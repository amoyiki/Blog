{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"41c46cda14e84650d69b6979d109ec7a471f0f1b","modified":1485680462162},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1480656226000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1480656226000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1480656226000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1480656226000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1480656226000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1480656226000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1480656226000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1480656226000},{"_id":"themes/next/_config.yml","hash":"ccc769a0008b98c4813550e220e8e8c2be9807cd","modified":1485680462131},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1480656226000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1480656226000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1480656226000},{"_id":"source/_posts/Java垃圾回收.md","hash":"60f383c23475b9832bce37950895d803f7e80d5e","modified":1481028008336},{"_id":"source/_posts/LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array.md","hash":"8194bbd724e33e2f1d15bf29b04234db9f67a033","modified":1485680462131},{"_id":"source/_posts/Docker入门.md","hash":"0839e16b9be3288ccb932cff55c8c9f8a0c6ee92","modified":1485680462131},{"_id":"source/_posts/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal.md","hash":"617e89fd6e8931cae4f12df385460d6ad9573437","modified":1485680462131},{"_id":"source/_posts/LeetCode-217-Contains-Duplicate.md","hash":"2907827d290dc4b346b81a8762878c996ba72256","modified":1481634695153},{"_id":"source/_posts/LeetCode-232-Implement-Queue-using-Stacks.md","hash":"6db3ad4b241a037243d77d33c13fbd699621925e","modified":1485680462131},{"_id":"source/_posts/LeetCode-290-Word-Pattern.md","hash":"9777fd3c41f149f5a499fe928334c838c00350f4","modified":1481724498524},{"_id":"source/_posts/LeetCode-303-Range-Sum-Query-Immutable.md","hash":"6e53c065d20036774834b836ec8ddceb7460c49a","modified":1481634695169},{"_id":"source/_posts/LeetCode-409-Longest-Palindrome.md","hash":"4d129f78d95a35ec3ec185cc934ce802cee4d5cc","modified":1481634695169},{"_id":"source/_posts/LeetCode-453-Minimum-Moves-to-Equal-Array-Elements.md","hash":"2cc56a503d07bbd1291f0c6cf20da58d6f5ca893","modified":1485680462131},{"_id":"source/_posts/LeetCode-463-Island-Perimeter.md","hash":"6dba52afb3cf33bd2cdd36589b3aee39ab4c5bd8","modified":1481634695169},{"_id":"source/_posts/LeetCode-70-Climbing-Stairs.md","hash":"8c3caf78b936ea7221f9eecf52fa3d292a168459","modified":1485680462131},{"_id":"source/_posts/LeetCode-74-Search-a-2D-Matrix.md","hash":"21da907b62cbcfe74f0926fd509503e7b7b2ae5c","modified":1485680462131},{"_id":"source/_posts/Linux注意事项.md","hash":"deb14594a262c25daae003d38c04d4fc83294fc5","modified":1481028008336},{"_id":"source/_posts/Nginx学习笔记（一）.md","hash":"543680052bc27c15adbeb58d93d2d9265a7d8d0c","modified":1485680462131},{"_id":"source/_posts/Nginx学习笔记（二）.md","hash":"38eae2a71501a1c87cbdefce9b3021b7e1b0b1cf","modified":1485680462131},{"_id":"source/_posts/Python一些小技巧.md","hash":"1f1684555fa56b50c562cf7d4d3c6ba9037fe8c2","modified":1485680462131},{"_id":"source/_posts/Python协程.md","hash":"c29d89530d4c22f0be4f3536babed73432e95658","modified":1485680462131},{"_id":"source/_posts/SQL小技巧.md","hash":"9f88c04b5097038ad15107b0815326136546ebe0","modified":1485680462131},{"_id":"source/_posts/SQL 中Group by 的使用.md","hash":"09f15ed2af55f92c687f0273c1a988885850a0e8","modified":1480083832035},{"_id":"source/_posts/vim使用技巧.md","hash":"63a76dd85d6b807a45c9fc2e03260e4e2cede0a4","modified":1480083832035},{"_id":"source/_posts/git技巧-gitignore配置.md","hash":"56f6d440d82d6d729580764fa570c1c3cb0fdfcb","modified":1482156523573},{"_id":"source/_posts/windows-下使用Virtualenv-管理Python项目.md","hash":"967a34c4cee19b6d6b6b3842f863d0751ba51faf","modified":1480083832035},{"_id":"source/_posts/数据结构-Java（1）-实现Stack.md","hash":"c431d570970040609a51ff184f76eb753ba200f0","modified":1480083832036},{"_id":"source/_posts/数据结构-Java（2）实现链表.md","hash":"fcc72ae44603d7a70985e8b415fa518bb9b41b51","modified":1480083832036},{"_id":"source/_posts/了解HashMap.md","hash":"1e363ffc4eb84e301e484584dac48c148db16387","modified":1481634695169},{"_id":"source/_posts/新的开始.md","hash":"0f21882b434975b8821909c5f5c8455af8101caa","modified":1485680462131},{"_id":"source/_posts/离线安装WMWare-Tools.md","hash":"0112053038e993235aead0bf10fe899a032fddf7","modified":1483334963406},{"_id":"source/_posts/编写一个Chrome-extension-网页二维码生成.md","hash":"217ce0618f74144280e4e632323bcef24fdb8ecf","modified":1481724498524},{"_id":"source/_posts/编写简单的ORM.md","hash":"95f922f47169d2a790bedbf4707fcdd5eb1c7c7a","modified":1480083832036},{"_id":"source/_posts/转-Java集合小抄.md","hash":"d2b1a6d2df5b9075a6839c1a112e8de696b971cf","modified":1485680462131},{"_id":"source/_posts/零碎的小技巧.md","hash":"74c1420c54c74f5e738da62c7f2bcd393cf65423","modified":1481724498525},{"_id":"source/about/index.md","hash":"092743c47b386730c57ee9df730731330485dd61","modified":1480083832037},{"_id":"source/images/avatar.jpg","hash":"d2874bd0c190119d36e7f1dc3510389a42de730f","modified":1480083832038},{"_id":"source/images/favicon.ico","hash":"53b7f78c7d14239959f25988efc38cadadca28c9","modified":1485680462131},{"_id":"source/categories/index.md","hash":"bf824d61d7e2268a1ede8c7918c4f0b9560ff6e4","modified":1480083832037},{"_id":"source/tags/index.md","hash":"23c6eb3b63cdbf7766728afb7ddd0af4d15f69c9","modified":1480083832038},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1480656226000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1480656226000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1480656226000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1480656226000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1480656226000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1480656226000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1480656226000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1480656226000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1480656226000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1480656226000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1480656226000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1480656226000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1480656226000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1480656226000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1480656226000},{"_id":"themes/next/layout/_layout.swig","hash":"b7bf40636336602bed918e840faf1f0a7565224b","modified":1485680462131},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1480656226000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1480656226000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1480656226000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1480656226000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1480656226000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1480656226000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1480656226000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1480656226000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1480656226000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1480656226000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1480656226000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480656226000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480656226000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1480656226000},{"_id":"themes/next/layout/_macro/post.swig","hash":"4e533447024433a9b7a3f80b875be707e4b02a8c","modified":1485680462131},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1480656226000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1480656226000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1480656226000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1480656226000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1480656226000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1480656226000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1480656226000},{"_id":"themes/next/layout/_partials/header.swig","hash":"8fc0f280465d7430c7f76b3f97d2893594d41c9b","modified":1482152719478},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1480656226000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1480656226000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1480656226000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1480656226000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1480656226000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1480656226000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1480656226000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1480656226000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1480656226000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1480656226000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1480656226000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1480656226000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1480656226000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480656226000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480656226000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480656226000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480656226000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480656226000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480656226000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480656226000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480656226000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480656226000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480656226000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480656226000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480656226000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480656226000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480656226000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1480656226000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1480656226000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1480656226000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1480656226000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1480656226000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1480656226000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1480656226000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1480656226000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1480656226000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1480656226000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1480656226000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1480656226000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1480656226000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1480656226000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1480656226000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1480656226000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1480656226000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1480656226000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"167e8da91dbdf9d73336a35fcd66830ff9b2a78d","modified":1485680462131},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480656226000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480656226000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480656226000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480656226000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480656226000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480656226000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1480656226000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480656226000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1480656226000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480656226000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1480656226000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1480656226000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1480656226000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1480656226000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1480656226000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1480656226000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1480656226000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1480656226000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480656226000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480656226000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1480656226000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1480656226000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480656226000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480656226000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480656226000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1480656226000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"2ae409435535a9cac93d58c69e7b367711043577","modified":1482159321164},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1480656226000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1480656226000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1480656226000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1480656226000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1480656226000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1480656226000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"cb81f4863e7e462328756f6c3debe05a5c49b5ae","modified":1485680462131},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1480656226000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480656226000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480656226000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480656226000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480656226000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480656226000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"fa80e5c50cdc82ab689a6d26b4e86b9662815c62","modified":1482158664193},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"71350a49c2d5b7f4ff7f414755ada57073aacb56","modified":1485680462131},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6d3fb4883084fd675bde866fc667884b85ee5dfb","modified":1482156443278},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480656226000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480656226000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"cecfd0e3e04ec962f35590495c8a7ca93c2b83e5","modified":1485680462131},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480656226000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480656226000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480656226000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1480656226000},{"_id":"public/search.xml","hash":"c539791e71494eda217ffe866e9520a09f77fc83","modified":1485680612837},{"_id":"public/about/index.html","hash":"c4614bf70887d0e4b65ba50aeee4fba78b14e38a","modified":1485680612869},{"_id":"public/categories/index.html","hash":"9e26a7120edf50539e5d886b14550849b5884b1e","modified":1485680612869},{"_id":"public/2017/01/20/LeetCode-70-Climbing-Stairs/index.html","hash":"6ae177e843c4ee2ec8404948734f75d5aa2bac8c","modified":1485680612869},{"_id":"public/tags/index.html","hash":"5e2ac331c765e7a388493b337260d076b5d96314","modified":1485680612869},{"_id":"public/2017/01/20/Docker入门/index.html","hash":"40831f1db08a42c5e45557ec1380c77ce475b32b","modified":1485680612869},{"_id":"public/2017/01/19/LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array/index.html","hash":"f6a22c004d029d68ad77b1bdbb6f8c90eac46fa7","modified":1485680612869},{"_id":"public/2017/01/18/转-Java集合小抄/index.html","hash":"8ef1d6b4efea13d4294b137a71866b9fe2e981db","modified":1485680612869},{"_id":"public/2017/01/11/LeetCode-232-Implement-Queue-using-Stacks/index.html","hash":"a75a7168277181ebd6ca50b02fda18bc1c5f9b82","modified":1485680612869},{"_id":"public/2017/01/06/Nginx学习笔记（二）/index.html","hash":"714324416ec6bf69bbfc6f86e8ff19564f7f0ad1","modified":1485680612869},{"_id":"public/2017/01/05/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/index.html","hash":"e88ebb529dd066dc4289695e741482bc55adbb85","modified":1485680612869},{"_id":"public/2016/12/21/LeetCode-74-Search-a-2D-Matrix/index.html","hash":"9c3d0ecc88dd891c300e11dfb1bbabe1dba08274","modified":1485680612869},{"_id":"public/2016/12/19/离线安装WMWare-Tools/index.html","hash":"e7c09647fc0566f6597b7b7cb536aa040d2bced7","modified":1485680612869},{"_id":"public/2016/12/16/Python协程/index.html","hash":"a133122121eb5073c1308f77d222d8a6c62a2277","modified":1485680612869},{"_id":"public/2016/12/15/git技巧-gitignore配置/index.html","hash":"6370a761b488dea0102ffd74a4193db5f119bb05","modified":1485680612869},{"_id":"public/2016/12/13/编写一个Chrome-extension-网页二维码生成/index.html","hash":"8fe50426a02f79a5a4c19236b72fabe80a09a673","modified":1485680612869},{"_id":"public/2016/12/12/LeetCode-290-Word-Pattern/index.html","hash":"574f9d098e12c0cab0fd6136754e4b786adbe47f","modified":1485680612869},{"_id":"public/2016/12/07/LeetCode-303-Range-Sum-Query-Immutable/index.html","hash":"5675ab9fde43dc8cf243e3e9cfedad5a6315c1c7","modified":1485680612869},{"_id":"public/2016/12/07/了解HashMap/index.html","hash":"b0a8a7f91a306df371038c147fd5a790797119a4","modified":1485680612869},{"_id":"public/2016/12/06/Java垃圾回收/index.html","hash":"5674e32535c9d682c0a472a3bd570d6e2a79a880","modified":1485680612869},{"_id":"public/2016/11/23/LeetCode-463-Island-Perimeter/index.html","hash":"d68273d975d652cfdf011f5b716b2ba067984e51","modified":1485680612869},{"_id":"public/2016/11/10/LeetCode-217-Contains-Duplicate/index.html","hash":"e00c3207bcad9e52e2fe01afaca36ee8209c6ec0","modified":1485680612869},{"_id":"public/2016/11/09/LeetCode-453-Minimum-Moves-to-Equal-Array-Elements/index.html","hash":"9d0f6cc186112e8ddf6518c41c867ba4026c6d50","modified":1485680612869},{"_id":"public/2016/11/09/LeetCode-409-Longest-Palindrome/index.html","hash":"b25719142a9ed2b8c0e8ed4bce29c3e2014a0ad5","modified":1485680612869},{"_id":"public/2016/11/07/数据结构-Java（2）实现链表/index.html","hash":"5c6143d0ccb80be41a632c4988f17a04751c449c","modified":1485680612869},{"_id":"public/2016/10/31/数据结构-Java（1）-实现Stack/index.html","hash":"38324d74c3c736bf25a1facbd91d15a368ca1078","modified":1485680612869},{"_id":"public/2016/10/16/Nginx学习笔记（一）/index.html","hash":"f4fff42c63ed6988a5448aeb772ea1ef7d32d46d","modified":1485680612869},{"_id":"public/2016/10/10/Python一些小技巧/index.html","hash":"fe59801b53dd5b834ca05293114e19c8d1ee9652","modified":1485680612869},{"_id":"public/2016/08/24/编写简单的ORM/index.html","hash":"0fce6ea41007944893f1972837e62abc3cceab69","modified":1485680612869},{"_id":"public/2016/08/18/SQL小技巧/index.html","hash":"4ba025128a5c86c526c61a5c950a6fe0a10db055","modified":1485680612869},{"_id":"public/2016/08/05/零碎的小技巧/index.html","hash":"4b1ffc01ca12a169e278c50650dab555891d0e53","modified":1485680612869},{"_id":"public/2016/05/19/vim使用技巧/index.html","hash":"d236cda48296c43a48fec06059354badb3a4fb4b","modified":1485680612869},{"_id":"public/2016/05/11/SQL 中Group by 的使用/index.html","hash":"827bb7adc5f5442f292b1c01c6768cf3c2fe81b8","modified":1485680612869},{"_id":"public/2016/05/10/Linux注意事项/index.html","hash":"83f22c0caed696432646962753a4d72139cf6910","modified":1485680612869},{"_id":"public/2016/05/09/windows-下使用Virtualenv-管理Python项目/index.html","hash":"cde11190432e2b07a792999f2d658fc01336afb2","modified":1485680612869},{"_id":"public/2016/05/01/新的开始/index.html","hash":"de8771e284aa8ea6cd944fad4c43999ed3690181","modified":1485680612869},{"_id":"public/archives/index.html","hash":"5191319319cc5ba1c89263b1e2f186ccc66890bf","modified":1485680612869},{"_id":"public/archives/page/2/index.html","hash":"30f9a8c9528dac35a221e086f5e1560bd525bed4","modified":1485680612869},{"_id":"public/archives/page/3/index.html","hash":"e7b5bc1d459092c66d3df4b7edb3afdecaae2a48","modified":1485680612869},{"_id":"public/archives/page/4/index.html","hash":"27d4199b364d2f33b8d231a379e8e209ebf31324","modified":1485680612869},{"_id":"public/archives/page/5/index.html","hash":"bf06294633cfd71c407974d3a0d22a09361cec28","modified":1485680612869},{"_id":"public/archives/page/6/index.html","hash":"ad62b60b8893e858e6ddd6a2c9d0f14f97e93f0c","modified":1485680612869},{"_id":"public/archives/page/7/index.html","hash":"b7a3a2ef686369c978a5dd86b48e20a6f75e5887","modified":1485680612869},{"_id":"public/archives/2016/index.html","hash":"a2cad26ed86bffd62893da4bc400e23bd1c7a9b6","modified":1485680612869},{"_id":"public/archives/2016/page/2/index.html","hash":"1fc0b3c2d0e921715c33858b1b97062fb77c8a18","modified":1485680612869},{"_id":"public/archives/2016/page/3/index.html","hash":"4b460b7d43a401ebe1e0adf7713f4693c57639be","modified":1485680612869},{"_id":"public/archives/2016/page/4/index.html","hash":"dbba51ae796146261d82fe4968777be8ec50e189","modified":1485680612869},{"_id":"public/archives/2016/page/5/index.html","hash":"e41ee2363a2ef28d8e451511dc1394606fbf98a4","modified":1485680612869},{"_id":"public/archives/2016/05/index.html","hash":"481ce1ad43f271f2d0c9861b4969f8e0c73b16a7","modified":1485680612869},{"_id":"public/archives/2016/08/index.html","hash":"fe0b0514564ff49776a7bb93dfb19ed496eb429a","modified":1485680612869},{"_id":"public/archives/2016/10/index.html","hash":"0e540c78694aaefe9da1cdee0e539bbfaa75653b","modified":1485680612869},{"_id":"public/archives/2016/11/index.html","hash":"3532a639499b0d92dd8e85de619ffd24222094c1","modified":1485680612869},{"_id":"public/archives/2016/12/index.html","hash":"022ba599156a495aeca96651d8c866ceb3c1db55","modified":1485680612869},{"_id":"public/archives/2016/12/page/2/index.html","hash":"295b1551026de3cac4cee4d9e15f0e167eba1990","modified":1485680612869},{"_id":"public/archives/2017/index.html","hash":"6a0f1d43f0cfdd510db783a1c79fd7058c3e25a7","modified":1485680612869},{"_id":"public/archives/2017/page/2/index.html","hash":"45b415a2a91ce66887e0f6d292306c659a5c9787","modified":1485680612869},{"_id":"public/archives/2017/01/index.html","hash":"6142049d9b43e227efea090b0e832ae98344c83a","modified":1485680612869},{"_id":"public/archives/2017/01/page/2/index.html","hash":"a2b95d36a260aa316d1794ec43131b5f04afb9c5","modified":1485680612869},{"_id":"public/categories/Java-VM/index.html","hash":"e76562a98605ef75197e7beafffcaf2f4fd0bc22","modified":1485680612869},{"_id":"public/categories/Algorithms/index.html","hash":"d273d91d44e8bfa9106883d757c97a606941e4f6","modified":1485680612869},{"_id":"public/categories/Algorithms/page/2/index.html","hash":"e25af6d61f742e9bab7e8f824b77a5655bcf5d23","modified":1485680612869},{"_id":"public/categories/Algorithms/page/3/index.html","hash":"0da58f046a638daf576d076e453f69608c803ec9","modified":1485680612869},{"_id":"public/categories/Linux/index.html","hash":"d6034bfafb5e8319e9d2e00fd835c4696311000c","modified":1485680612869},{"_id":"public/categories/Nginx/index.html","hash":"534974e7d0ccef352affbf23ffe5d539a1fe56a2","modified":1485680612869},{"_id":"public/categories/Python/index.html","hash":"383bb9dc7a07be4d3d0bef16f1f47a8d0010642e","modified":1485680612869},{"_id":"public/categories/SQL/index.html","hash":"a87c92ba8debf1c056af13f3cb9e2ece2fd0b9f7","modified":1485680612869},{"_id":"public/categories/Git/index.html","hash":"8bf48ea6ac635407585bbd51672e049b7136964d","modified":1485680612869},{"_id":"public/categories/工具配置/index.html","hash":"4594f409b0f0daf57ca891ead2339998ef2bfd4f","modified":1485680612869},{"_id":"public/categories/Data-Structure/index.html","hash":"1ea83fd45fa162e7cdab081c195a89132dd9ae82","modified":1485680612869},{"_id":"public/categories/Java/index.html","hash":"a23cf4e0bdfc38ec1de0f463de9b7c2592e9d730","modified":1485680612869},{"_id":"public/categories/半畳/index.html","hash":"aa7367ba1cd157b352f78f4ff77b0172ad23bfd3","modified":1485680612869},{"_id":"public/categories/Chrome-extension/index.html","hash":"48ca24f7d76a7bea206de9bbca2b696d04f29d75","modified":1485680612869},{"_id":"public/tags/学习/index.html","hash":"2f69fe33c98bdfc5e02b5f1ea4b20d4a49e51c6e","modified":1485680612869},{"_id":"public/tags/学习/page/2/index.html","hash":"1f9d3a58873d352ef73e63f90da6d44ae56d96ad","modified":1485680612869},{"_id":"public/tags/学习/page/3/index.html","hash":"c10f38812a0b7b3a8d709f2530bc0a1643c9a9d0","modified":1485680612869},{"_id":"public/tags/学习/page/4/index.html","hash":"410af30b6a81d09c3a66d93ae04bf62b38d7a0ea","modified":1485680612869},{"_id":"public/tags/学习/page/5/index.html","hash":"1ecd5671ac784484e4496d1bd6609a54fe900439","modified":1485680612869},{"_id":"public/tags/vim/index.html","hash":"db737725b2a467c7a1fab60392aab3a31538880e","modified":1485680612869},{"_id":"public/tags/git/index.html","hash":"bccd21078faf44132bb54ce44c9aaf5d80db04db","modified":1485680612869},{"_id":"public/tags/Virtualenv/index.html","hash":"69142d167a23e0e8271fbe37836e25544f465e88","modified":1485680612869},{"_id":"public/tags/Python/index.html","hash":"83f8ce2269bf74bf732e579e577e452b97096525","modified":1485680612869},{"_id":"public/tags/杂谈/index.html","hash":"577323c99a6a6e438a96a5aa34d52385c0644d0a","modified":1485680612869},{"_id":"public/tags/WMWare/index.html","hash":"a027fe374739b808fdaacaac9b8516acccaedd8e","modified":1485680612869},{"_id":"public/index.html","hash":"230cf2b96318523eb35c4d64adcb982d97482e67","modified":1485680612869},{"_id":"public/page/2/index.html","hash":"0a6404198c05b638d2c1c6f652bed0c3606bd176","modified":1485680612869},{"_id":"public/page/3/index.html","hash":"23e295ba2b55272963caf6770a6e9c392aabe0d0","modified":1485680612869},{"_id":"public/page/4/index.html","hash":"b12ab07d3b0ab493482c176d86d7fb69b71cd784","modified":1485680612869},{"_id":"public/page/5/index.html","hash":"729619a74927e3226227632c841a7181ee3529bd","modified":1485680612869},{"_id":"public/page/6/index.html","hash":"00ecfa639e7c29a7df591ce15f7411b3e5dde98a","modified":1485680612869},{"_id":"public/page/7/index.html","hash":"1f4c03157e49bd55ff4f53af627275b12e1bafc4","modified":1485680612869},{"_id":"public/CNAME","hash":"41c46cda14e84650d69b6979d109ec7a471f0f1b","modified":1485680612884},{"_id":"public/images/avatar.jpg","hash":"d2874bd0c190119d36e7f1dc3510389a42de730f","modified":1485680612884},{"_id":"public/images/favicon.ico","hash":"53b7f78c7d14239959f25988efc38cadadca28c9","modified":1485680612884},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1485680612884},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1485680612884},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1485680612884},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1485680612884},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1485680612884},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1485680612884},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1485680612884},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1485680612884},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1485680612884},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1485680612884},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1485680612884},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1485680612884},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1485680612884},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1485680612884},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1485680612884},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1485680612884},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485680612884},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1485680612884},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1485680612884},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1485680612884},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485680612884},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1485680612884},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1485680612884},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1485680612884},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1485680613352},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1485680613352},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1485680613368},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1485680613368},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1485680613368},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1485680613368},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1485680613368},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1485680613368},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1485680613368},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1485680613368},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1485680613368},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1485680613368},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1485680613368},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1485680613368},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1485680613368},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1485680613368},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1485680613368},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1485680613368},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1485680613368},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1485680613368},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1485680613368},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1485680613368},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1485680613368},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1485680613368},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1485680613368},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1485680613368},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1485680613368},{"_id":"public/css/main.css","hash":"c9e9709d853d0ff481e01e334c53d81a6c4cb432","modified":1485680613368},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1485680613368},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1485680613368},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1485680613368},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1485680613368},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1485680613368},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1485680613368},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1485680613368},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1485680613368},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1485680613368},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1485680613368},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1485680613368},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1485680613399},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1485680613399},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1485680613399},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1485680613399},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1485680613399},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1485680613399},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1485680613415}],"Category":[{"name":"Java VM","_id":"ciyifvja90005m4qfo98sq23e"},{"name":"Algorithms","_id":"ciyifvja9000bm4qf3srbmzb5"},{"name":"Linux","_id":"ciyifvjb40015m4qf6v6prn4j"},{"name":"Nginx","_id":"ciyifvjb4001em4qft06giw70"},{"name":"Python","_id":"ciyifvjb4001lm4qfwfearvmc"},{"name":"SQL","_id":"ciyifvjbk0025m4qf74y0n2ti"},{"name":"Git","_id":"ciyifvjbk002jm4qfzy4o3gdj"},{"name":"工具配置","_id":"ciyifvjbz002rm4qfccxcpavx"},{"name":"Data Structure","_id":"ciyifvjbz002xm4qf87zvsq0r"},{"name":"Java","_id":"ciyifvjbz0033m4qfj3hvlcjx"},{"name":"半畳","_id":"ciyifvjbz0037m4qf8dpn7sut"},{"name":"Chrome extension","_id":"ciyifvjbz003bm4qfm5h7hdmv"}],"Data":[],"Page":[{"title":"关于","date":"2016-04-28T14:54:47.000Z","type":"about","_content":"### 关于我 ###\n毕业于某三流学院的见习`Java`魔法学徒,现转为`Python`魔法学徒。喜欢`美剧`，`日剧`，`动漫`，`日音`。努力学习不同的知识，扩大自己的舒适区。\n### 关于BLOG ###\n1. 记录自己学习的过程，内容不一定有深度。\n2. ~~顺便写一些日记~~\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-04-28 22:54:47\ntype: \"about\"\n---\n### 关于我 ###\n毕业于某三流学院的见习`Java`魔法学徒,现转为`Python`魔法学徒。喜欢`美剧`，`日剧`，`动漫`，`日音`。努力学习不同的知识，扩大自己的舒适区。\n### 关于BLOG ###\n1. 记录自己学习的过程，内容不一定有深度。\n2. ~~顺便写一些日记~~\n","updated":"2016-11-25T14:23:52.037Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciyifvj9t0001m4qf6q27h4ob","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>毕业于某三流学院的见习<code>Java</code>魔法学徒,现转为<code>Python</code>魔法学徒。喜欢<code>美剧</code>，<code>日剧</code>，<code>动漫</code>，<code>日音</code>。努力学习不同的知识，扩大自己的舒适区。</p>\n<h3 id=\"关于BLOG\"><a href=\"#关于BLOG\" class=\"headerlink\" title=\"关于BLOG\"></a>关于BLOG</h3><ol>\n<li>记录自己学习的过程，内容不一定有深度。</li>\n<li><del>顺便写一些日记</del></li>\n</ol>\n","excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>毕业于某三流学院的见习<code>Java</code>魔法学徒,现转为<code>Python</code>魔法学徒。喜欢<code>美剧</code>，<code>日剧</code>，<code>动漫</code>，<code>日音</code>。努力学习不同的知识，扩大自己的舒适区。</p>\n<h3 id=\"关于BLOG\"><a href=\"#关于BLOG\" class=\"headerlink\" title=\"关于BLOG\"></a>关于BLOG</h3><ol>\n<li>记录自己学习的过程，内容不一定有深度。</li>\n<li><del>顺便写一些日记</del></li>\n</ol>\n"},{"title":"分类","date":"2016-04-28T14:54:26.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-04-28 22:54:26\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-25T14:23:52.037Z","path":"categories/index.html","layout":"page","_id":"ciyifvj9t0003m4qfdi0fdutf","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-04-28T14:53:52.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-04-28 22:53:52\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-25T14:23:52.038Z","path":"tags/index.html","layout":"page","_id":"ciyifvja90007m4qfz9f7fop8","content":"","excerpt":"","more":""}],"Post":[{"title":"Java垃圾回收","date":"2016-12-06T08:32:20.000Z","_content":"\n## GC 如何判断对象可以被回收 ##\n### 引用计数算法 ###\n早期Java使用的算法，现已不用。\n### 可达性分析算法 ###\n以`GC Root` 作为起始点，向下搜索。走过的路径成为`引用链`。当一个对象到`GC Root`\n没有任何引用链相连时，证明对象不可用。\n**Java的`GC Root`对象包括：**\n1. 虚拟机栈（栈帧中的本地变量表中引用对象）\n2. 方法区中类静态属性引用对象\n3. 方法区常量引用对象\n4. 本地方法JNI引用对象\n\n\n","source":"_posts/Java垃圾回收.md","raw":"---\ntitle: Java垃圾回收\ndate: 2016-12-06 16:32:20\ncategories: \"Java VM\"\ntags:\n- 学习\n---\n\n## GC 如何判断对象可以被回收 ##\n### 引用计数算法 ###\n早期Java使用的算法，现已不用。\n### 可达性分析算法 ###\n以`GC Root` 作为起始点，向下搜索。走过的路径成为`引用链`。当一个对象到`GC Root`\n没有任何引用链相连时，证明对象不可用。\n**Java的`GC Root`对象包括：**\n1. 虚拟机栈（栈帧中的本地变量表中引用对象）\n2. 方法区中类静态属性引用对象\n3. 方法区常量引用对象\n4. 本地方法JNI引用对象\n\n\n","slug":"Java垃圾回收","published":1,"updated":"2016-12-06T12:40:08.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvj9t0000m4qf0hon7dop","content":"<h2 id=\"GC-如何判断对象可以被回收\"><a href=\"#GC-如何判断对象可以被回收\" class=\"headerlink\" title=\"GC 如何判断对象可以被回收\"></a>GC 如何判断对象可以被回收</h2><h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>早期Java使用的算法，现已不用。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>以<code>GC Root</code> 作为起始点，向下搜索。走过的路径成为<code>引用链</code>。当一个对象到<code>GC Root</code><br>没有任何引用链相连时，证明对象不可用。<br><strong>Java的<code>GC Root</code>对象包括：</strong></p>\n<ol>\n<li>虚拟机栈（栈帧中的本地变量表中引用对象）</li>\n<li>方法区中类静态属性引用对象</li>\n<li>方法区常量引用对象</li>\n<li>本地方法JNI引用对象</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"GC-如何判断对象可以被回收\"><a href=\"#GC-如何判断对象可以被回收\" class=\"headerlink\" title=\"GC 如何判断对象可以被回收\"></a>GC 如何判断对象可以被回收</h2><h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>早期Java使用的算法，现已不用。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>以<code>GC Root</code> 作为起始点，向下搜索。走过的路径成为<code>引用链</code>。当一个对象到<code>GC Root</code><br>没有任何引用链相连时，证明对象不可用。<br><strong>Java的<code>GC Root</code>对象包括：</strong></p>\n<ol>\n<li>虚拟机栈（栈帧中的本地变量表中引用对象）</li>\n<li>方法区中类静态属性引用对象</li>\n<li>方法区常量引用对象</li>\n<li>本地方法JNI引用对象</li>\n</ol>\n"},{"title":"[LeetCode]153.Find Minimum in Rotated Sorted Array","date":"2017-01-19T09:45:10.000Z","_content":"### 问题描述 ###\n一个顺序数组，经过一次旋转\n{1,2,3,4,5}  ---> {3,4,5,1,2}\n找出最小元素。\n<!-- more -->\n### 解题思路 ###\n无论Java还是Python，只要排序过后就可以找出最小元素。时间复杂度O(n)\n如Python方法min()就能直接得出数组最小值。Java也有Arrays.sort()方法排序。\n但是如果单纯O(n)的复杂度，明显没有多大的意义。所有这道题应该用二分查找方法来返回最小值。\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def findMin(self,nums):\n        left,right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) / 2\n            if nums[mid] <= nums[right]:\n                right = mid\n            else:\n                low = mid + 1\n        return nums[low]\n```\n","source":"_posts/LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array.md","raw":"---\ntitle: '[LeetCode]153.Find Minimum in Rotated Sorted Array'\ndate: 2017-01-19 17:45:10\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n一个顺序数组，经过一次旋转\n{1,2,3,4,5}  ---> {3,4,5,1,2}\n找出最小元素。\n<!-- more -->\n### 解题思路 ###\n无论Java还是Python，只要排序过后就可以找出最小元素。时间复杂度O(n)\n如Python方法min()就能直接得出数组最小值。Java也有Arrays.sort()方法排序。\n但是如果单纯O(n)的复杂度，明显没有多大的意义。所有这道题应该用二分查找方法来返回最小值。\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def findMin(self,nums):\n        left,right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) / 2\n            if nums[mid] <= nums[right]:\n                right = mid\n            else:\n                low = mid + 1\n        return nums[low]\n```\n","slug":"LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvj9t0002m4qf9mxqhng3","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>一个顺序数组，经过一次旋转<br>{1,2,3,4,5}  —&gt; {3,4,5,1,2}<br>找出最小元素。<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>无论Java还是Python，只要排序过后就可以找出最小元素。时间复杂度O(n)<br>如Python方法min()就能直接得出数组最小值。Java也有Arrays.sort()方法排序。<br>但是如果单纯O(n)的复杂度，明显没有多大的意义。所有这道题应该用二分查找方法来返回最小值。</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMin</span><span class=\"params\">(self,nums)</span>:</span></span><br><span class=\"line\">        left,right = <span class=\"number\">0</span>, len(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">            mid = (left + right) / <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid] &lt;= nums[right]:</span><br><span class=\"line\">                right = mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[low]</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>一个顺序数组，经过一次旋转<br>{1,2,3,4,5}  —&gt; {3,4,5,1,2}<br>找出最小元素。<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>无论Java还是Python，只要排序过后就可以找出最小元素。时间复杂度O(n)<br>如Python方法min()就能直接得出数组最小值。Java也有Arrays.sort()方法排序。<br>但是如果单纯O(n)的复杂度，明显没有多大的意义。所有这道题应该用二分查找方法来返回最小值。</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMin</span><span class=\"params\">(self,nums)</span>:</span></span><br><span class=\"line\">        left,right = <span class=\"number\">0</span>, len(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">            mid = (left + right) / <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[mid] &lt;= nums[right]:</span><br><span class=\"line\">                right = mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[low]</span><br></pre></td></tr></table></figure></p>"},{"title":"[LeetCode]105.Construct Binary Tree from Preorder and Inorder Traversal","date":"2017-01-05T09:52:05.000Z","_content":"### 问题描述 ###\n给定树的前序遍历和中序遍历，构建出这个二叉树\n<!-- more -->\n### 解题思路 ###\n相对于Python的数组切割,Java取下标值来获取每次递归所需的值区间。所以需要一个辅助函数来负责递归。\n前序遍历中第一个元素pre[0]一定是root节点。\n假设该节点的元素在中序中是在in[5],那么中序中的in[0] ~ in[4]就是左子树，\nin[6] ~ end 就是右子树。\n第二次递归，左子树从pre[1]开始(即pre[0]的下移一位)。中序数组从0~4\n右子树从pre[0+5-0+1]开始,中序数组从6~end\n第三次\n...\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        if not preorder or not inorder:\n            return None\n\n        rootValue = preorder.pop(0)\n        root = TreeNode(rootValue)\n        inorderIndex = inorder.index(rootValue)\n\n        root.left = self.buildTree(preorder, inorder[:inorderIndex])\n        root.right = self.buildTree(preorder, inorder[inorderIndex+1:])\n\n        return root\n```\n\n**Java**\n```java\npublic class Soultion{\n    public TreeNode buildTree(int[]preorder, int[] inorder){\n        return helper(0,0,inorder.length-1,preorder,inorder);\n    }\n    public TreeNode helper(int preStart, int inStart, int inEnd, int[] pre,int[] in){\n        if(preStart > pre.length - 1 || inStart > inEnd){\n            return null;\n        }\n        TreeNode root = new TreeNode(pre[preStart]);\n        int inIndex = 0; // root节点在中序数组中的下标位置\n        for(int i == inStart; i<= inEnd; i++){\n            if(in[i]==root.val){\n                inIndex = i;\n            }\n        }\n        /* \n        左子树：前序数组从当前root下标的下一位开始，中序数组从开头开始到当前root下标的前一位结束\n        右子树：前序数组从当前root下标的下一位，中序数组从root下标下一位到结束\n        */\n        root.left = helper(preStart + 1, inStart, inIndex - 1, pre, in);\n        root.right = helper(preStart + inIndex - inStart + 1, inIndex + 1, inEnd , pr, in);\n        return root;\n    }\n}\n```\n","source":"_posts/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal.md","raw":"---\ntitle: '[LeetCode]105.Construct Binary Tree from Preorder and Inorder Traversal'\ndate: 2017-01-05 17:52:05\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n给定树的前序遍历和中序遍历，构建出这个二叉树\n<!-- more -->\n### 解题思路 ###\n相对于Python的数组切割,Java取下标值来获取每次递归所需的值区间。所以需要一个辅助函数来负责递归。\n前序遍历中第一个元素pre[0]一定是root节点。\n假设该节点的元素在中序中是在in[5],那么中序中的in[0] ~ in[4]就是左子树，\nin[6] ~ end 就是右子树。\n第二次递归，左子树从pre[1]开始(即pre[0]的下移一位)。中序数组从0~4\n右子树从pre[0+5-0+1]开始,中序数组从6~end\n第三次\n...\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        if not preorder or not inorder:\n            return None\n\n        rootValue = preorder.pop(0)\n        root = TreeNode(rootValue)\n        inorderIndex = inorder.index(rootValue)\n\n        root.left = self.buildTree(preorder, inorder[:inorderIndex])\n        root.right = self.buildTree(preorder, inorder[inorderIndex+1:])\n\n        return root\n```\n\n**Java**\n```java\npublic class Soultion{\n    public TreeNode buildTree(int[]preorder, int[] inorder){\n        return helper(0,0,inorder.length-1,preorder,inorder);\n    }\n    public TreeNode helper(int preStart, int inStart, int inEnd, int[] pre,int[] in){\n        if(preStart > pre.length - 1 || inStart > inEnd){\n            return null;\n        }\n        TreeNode root = new TreeNode(pre[preStart]);\n        int inIndex = 0; // root节点在中序数组中的下标位置\n        for(int i == inStart; i<= inEnd; i++){\n            if(in[i]==root.val){\n                inIndex = i;\n            }\n        }\n        /* \n        左子树：前序数组从当前root下标的下一位开始，中序数组从开头开始到当前root下标的前一位结束\n        右子树：前序数组从当前root下标的下一位，中序数组从root下标下一位到结束\n        */\n        root.left = helper(preStart + 1, inStart, inIndex - 1, pre, in);\n        root.right = helper(preStart + inIndex - inStart + 1, inIndex + 1, inEnd , pr, in);\n        return root;\n    }\n}\n```\n","slug":"LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvja90006m4qfv0hrp2ik","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定树的前序遍历和中序遍历，构建出这个二叉树<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>相对于Python的数组切割,Java取下标值来获取每次递归所需的值区间。所以需要一个辅助函数来负责递归。<br>前序遍历中第一个元素pre[0]一定是root节点。<br>假设该节点的元素在中序中是在in[5],那么中序中的in[0] ~ in[4]就是左子树，<br>in[6] ~ end 就是右子树。<br>第二次递归，左子树从pre[1]开始(即pre[0]的下移一位)。中序数组从0~4<br>右子树从pre[0+5-0+1]开始,中序数组从6~end<br>第三次<br>…</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildTree</span><span class=\"params\">(self, preorder, inorder)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> preorder <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> inorder:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        rootValue = preorder.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        root = TreeNode(rootValue)</span><br><span class=\"line\">        inorderIndex = inorder.index(rootValue)</span><br><span class=\"line\"></span><br><span class=\"line\">        root.left = self.buildTree(preorder, inorder[:inorderIndex])</span><br><span class=\"line\">        root.right = self.buildTree(preorder, inorder[inorderIndex+<span class=\"number\">1</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Soultion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[]preorder, <span class=\"keyword\">int</span>[] inorder)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper(<span class=\"number\">0</span>,<span class=\"number\">0</span>,inorder.length-<span class=\"number\">1</span>,preorder,inorder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span> preStart, <span class=\"keyword\">int</span> inStart, <span class=\"keyword\">int</span> inEnd, <span class=\"keyword\">int</span>[] pre,<span class=\"keyword\">int</span>[] in)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(preStart &gt; pre.length - <span class=\"number\">1</span> || inStart &gt; inEnd)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TreeNode root = <span class=\"keyword\">new</span> TreeNode(pre[preStart]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> inIndex = <span class=\"number\">0</span>; <span class=\"comment\">// root节点在中序数组中的下标位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i == inStart; i&lt;= inEnd; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(in[i]==root.val)&#123;</span><br><span class=\"line\">                inIndex = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* </span><br><span class=\"line\">        左子树：前序数组从当前root下标的下一位开始，中序数组从开头开始到当前root下标的前一位结束</span><br><span class=\"line\">        右子树：前序数组从当前root下标的下一位，中序数组从root下标下一位到结束</span><br><span class=\"line\">        */</span></span><br><span class=\"line\">        root.left = helper(preStart + <span class=\"number\">1</span>, inStart, inIndex - <span class=\"number\">1</span>, pre, in);</span><br><span class=\"line\">        root.right = helper(preStart + inIndex - inStart + <span class=\"number\">1</span>, inIndex + <span class=\"number\">1</span>, inEnd , pr, in);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定树的前序遍历和中序遍历，构建出这个二叉树<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>相对于Python的数组切割,Java取下标值来获取每次递归所需的值区间。所以需要一个辅助函数来负责递归。<br>前序遍历中第一个元素pre[0]一定是root节点。<br>假设该节点的元素在中序中是在in[5],那么中序中的in[0] ~ in[4]就是左子树，<br>in[6] ~ end 就是右子树。<br>第二次递归，左子树从pre[1]开始(即pre[0]的下移一位)。中序数组从0~4<br>右子树从pre[0+5-0+1]开始,中序数组从6~end<br>第三次<br>…</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildTree</span><span class=\"params\">(self, preorder, inorder)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> preorder <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> inorder:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        rootValue = preorder.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        root = TreeNode(rootValue)</span><br><span class=\"line\">        inorderIndex = inorder.index(rootValue)</span><br><span class=\"line\"></span><br><span class=\"line\">        root.left = self.buildTree(preorder, inorder[:inorderIndex])</span><br><span class=\"line\">        root.right = self.buildTree(preorder, inorder[inorderIndex+<span class=\"number\">1</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Soultion</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[]preorder, <span class=\"keyword\">int</span>[] inorder)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper(<span class=\"number\">0</span>,<span class=\"number\">0</span>,inorder.length-<span class=\"number\">1</span>,preorder,inorder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span> preStart, <span class=\"keyword\">int</span> inStart, <span class=\"keyword\">int</span> inEnd, <span class=\"keyword\">int</span>[] pre,<span class=\"keyword\">int</span>[] in)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(preStart &gt; pre.length - <span class=\"number\">1</span> || inStart &gt; inEnd)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TreeNode root = <span class=\"keyword\">new</span> TreeNode(pre[preStart]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> inIndex = <span class=\"number\">0</span>; <span class=\"comment\">// root节点在中序数组中的下标位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i == inStart; i&lt;= inEnd; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(in[i]==root.val)&#123;</span><br><span class=\"line\">                inIndex = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* </span><br><span class=\"line\">        左子树：前序数组从当前root下标的下一位开始，中序数组从开头开始到当前root下标的前一位结束</span><br><span class=\"line\">        右子树：前序数组从当前root下标的下一位，中序数组从root下标下一位到结束</span><br><span class=\"line\">        */</span></span><br><span class=\"line\">        root.left = helper(preStart + <span class=\"number\">1</span>, inStart, inIndex - <span class=\"number\">1</span>, pre, in);</span><br><span class=\"line\">        root.right = helper(preStart + inIndex - inStart + <span class=\"number\">1</span>, inIndex + <span class=\"number\">1</span>, inEnd , pr, in);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Docker入门","date":"2017-01-20T07:55:15.000Z","_content":"","source":"_posts/Docker入门.md","raw":"---\ntitle: Docker入门\ndate: 2017-01-20 15:55:15\ntags:\n---\n","slug":"Docker入门","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvja90008m4qf7ev4j90z","content":"","excerpt":"","more":""},{"title":"[LeetCode]217. Contains Duplicate","date":"2016-11-10T06:44:59.000Z","_content":"### 问题描述 ###\n给定一个整数数组，判断是否包含重复元素，是返回true。\n若都是唯一返回false\n<!-- more -->\n\n### 解题思路 ###\n利用set这种数据结构的特点，只要set后的数据长度不等于原来的数据长度的话，就证明有重复元素，否则证明没有重复元素。\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def containsDuplicate(self, nums):\n        return len(nums) != len(set(nums))\n```\n\n**Java**\n```java\npublic class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Set s = new HashSet();\n        for(int n:nums){\n            s.add(n);\n        }\n        if(nums.length != s.size()) return true;\n        return false;\n    }\n}\n```\n","source":"_posts/LeetCode-217-Contains-Duplicate.md","raw":"---\ntitle: '[LeetCode]217. Contains Duplicate'\ndate: 2016-11-10 14:44:59\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n给定一个整数数组，判断是否包含重复元素，是返回true。\n若都是唯一返回false\n<!-- more -->\n\n### 解题思路 ###\n利用set这种数据结构的特点，只要set后的数据长度不等于原来的数据长度的话，就证明有重复元素，否则证明没有重复元素。\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def containsDuplicate(self, nums):\n        return len(nums) != len(set(nums))\n```\n\n**Java**\n```java\npublic class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Set s = new HashSet();\n        for(int n:nums){\n            s.add(n);\n        }\n        if(nums.length != s.size()) return true;\n        return false;\n    }\n}\n```\n","slug":"LeetCode-217-Contains-Duplicate","published":1,"updated":"2016-12-13T13:11:35.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvja9000am4qf8fw5ro1y","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个整数数组，判断是否包含重复元素，是返回true。<br>若都是唯一返回false<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>利用set这种数据结构的特点，只要set后的数据长度不等于原来的数据长度的话，就证明有重复元素，否则证明没有重复元素。</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(nums) != len(set(nums))</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Set s = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n:nums)&#123;</span><br><span class=\"line\">            s.add(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length != s.size()) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个整数数组，判断是否包含重复元素，是返回true。<br>若都是唯一返回false<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>利用set这种数据结构的特点，只要set后的数据长度不等于原来的数据长度的话，就证明有重复元素，否则证明没有重复元素。</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(nums) != len(set(nums))</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        Set s = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n:nums)&#123;</span><br><span class=\"line\">            s.add(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length != s.size()) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"[LeetCode]290. Word Pattern","date":"2016-12-12T08:48:27.000Z","_content":"### 问题描述 ###\n给定一个模式pattern和一个字符串str，判断str是否满足相同的pattern。\n例如：\npattern = \"abba\", str = \"dog cat cat dog\" 则返回 true.\n<!-- more -->\n\n### 解题思路 ###\n判断pattern，str每个元素出现的下标，求得的数组相等即返回true\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def wordPattern(self, pattern, str):\n        p = pattern\n        s = str.split()\n        return map(p.find,p) == map(s.index,s)\n\n```\n**Java**\n```java\npublic class Solution {\n    public boolean wordPattern(String pattern, String str) {\n        String[] words = str.split(\" \");\n        if(pattern.length() != words.length) return false;\n        Set<String> set = new HashSet<String>();\n        Map<Character,String> map = new HashMap<Character,String>();\n        for(int i=0;i<words.length;i++){\n            char p = pattern.charAt(i);\n            if (map.containsKey(p)){\n                if(!map.get(p).equals(words[i])) return false;\n            }else {\n                if (set.contains(words[i])) return false;\n                map.put(p,words[i]);\n                set.add(words[i]);\n            }\n        }\n        return true;\n    }\n}\n```\n","source":"_posts/LeetCode-290-Word-Pattern.md","raw":"---\ntitle: '[LeetCode]290. Word Pattern'\ndate: 2016-12-12 16:48:27\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n给定一个模式pattern和一个字符串str，判断str是否满足相同的pattern。\n例如：\npattern = \"abba\", str = \"dog cat cat dog\" 则返回 true.\n<!-- more -->\n\n### 解题思路 ###\n判断pattern，str每个元素出现的下标，求得的数组相等即返回true\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def wordPattern(self, pattern, str):\n        p = pattern\n        s = str.split()\n        return map(p.find,p) == map(s.index,s)\n\n```\n**Java**\n```java\npublic class Solution {\n    public boolean wordPattern(String pattern, String str) {\n        String[] words = str.split(\" \");\n        if(pattern.length() != words.length) return false;\n        Set<String> set = new HashSet<String>();\n        Map<Character,String> map = new HashMap<Character,String>();\n        for(int i=0;i<words.length;i++){\n            char p = pattern.charAt(i);\n            if (map.containsKey(p)){\n                if(!map.get(p).equals(words[i])) return false;\n            }else {\n                if (set.contains(words[i])) return false;\n                map.put(p,words[i]);\n                set.add(words[i]);\n            }\n        }\n        return true;\n    }\n}\n```\n","slug":"LeetCode-290-Word-Pattern","published":1,"updated":"2016-12-14T14:08:18.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvja9000dm4qf5z5zbkpc","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个模式pattern和一个字符串str，判断str是否满足相同的pattern。<br>例如：<br>pattern = “abba”, str = “dog cat cat dog” 则返回 true.<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>判断pattern，str每个元素出现的下标，求得的数组相等即返回true</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordPattern</span><span class=\"params\">(self, pattern, str)</span>:</span></span><br><span class=\"line\">        p = pattern</span><br><span class=\"line\">        s = str.split()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map(p.find,p) == map(s.index,s)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">wordPattern</span><span class=\"params\">(String pattern, String str)</span> </span>&#123;</span><br><span class=\"line\">        String[] words = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pattern.length() != words.length) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">        Map&lt;Character,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Character,String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;words.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> p = pattern.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(p))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!map.get(p).equals(words[i])) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.contains(words[i])) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                map.put(p,words[i]);</span><br><span class=\"line\">                set.add(words[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个模式pattern和一个字符串str，判断str是否满足相同的pattern。<br>例如：<br>pattern = “abba”, str = “dog cat cat dog” 则返回 true.<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>判断pattern，str每个元素出现的下标，求得的数组相等即返回true</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordPattern</span><span class=\"params\">(self, pattern, str)</span>:</span></span><br><span class=\"line\">        p = pattern</span><br><span class=\"line\">        s = str.split()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map(p.find,p) == map(s.index,s)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">wordPattern</span><span class=\"params\">(String pattern, String str)</span> </span>&#123;</span><br><span class=\"line\">        String[] words = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pattern.length() != words.length) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">        Map&lt;Character,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Character,String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;words.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> p = pattern.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(p))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!map.get(p).equals(words[i])) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (set.contains(words[i])) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                map.put(p,words[i]);</span><br><span class=\"line\">                set.add(words[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"[LeetCode]303. Range Sum Query - Immutable","date":"2016-12-07T06:34:39.000Z","_content":"### 问题描述 ###\n给定一个数字数组，求下标在i和j(i ≤ j)之间的元素和\n<!-- more -->\n### 解题思路 ###\n利用一个辅助数组sums[x+1]来存储当前位置与之前元素的累加和\n\n### 具体代码 ###\n**python**\n```python\nclass NumArray(object):\n    def __init__(self,nums):\n        size = len(nums)\n        # 辅助函数sums，计算每个位置与之前的数字累积和\n        self.sums = [0] * (size + 1)\n        for x in range(size):\n            # 当前(x+1)位置元素累积和 = 前一位(累积和)+当前元素\n            self.sums[x + 1] += self.sums[x] + nums[x]\n\n    def sumRange(self,i,j):\n        return self.sums[j+1] - self.sums[i]\n```\n\n**Java**\n```java\npublic class NumArray {\n    public int[] sums;\n    public NumArray(int[] nums) {\n        int size = nums.length;\n        sums = new int[size+1];\n        for(int i=0;i<size;i++){\n            sums[i+1] = sums[i] + nums[i];\n        }\n    }\n\n    public int sumRange(int i, int j) {\n        return sums[j+1] - sums[i];\n    }\n}\n```\n","source":"_posts/LeetCode-303-Range-Sum-Query-Immutable.md","raw":"---\ntitle: '[LeetCode]303. Range Sum Query - Immutable'\ndate: 2016-12-07 14:34:39\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n给定一个数字数组，求下标在i和j(i ≤ j)之间的元素和\n<!-- more -->\n### 解题思路 ###\n利用一个辅助数组sums[x+1]来存储当前位置与之前元素的累加和\n\n### 具体代码 ###\n**python**\n```python\nclass NumArray(object):\n    def __init__(self,nums):\n        size = len(nums)\n        # 辅助函数sums，计算每个位置与之前的数字累积和\n        self.sums = [0] * (size + 1)\n        for x in range(size):\n            # 当前(x+1)位置元素累积和 = 前一位(累积和)+当前元素\n            self.sums[x + 1] += self.sums[x] + nums[x]\n\n    def sumRange(self,i,j):\n        return self.sums[j+1] - self.sums[i]\n```\n\n**Java**\n```java\npublic class NumArray {\n    public int[] sums;\n    public NumArray(int[] nums) {\n        int size = nums.length;\n        sums = new int[size+1];\n        for(int i=0;i<size;i++){\n            sums[i+1] = sums[i] + nums[i];\n        }\n    }\n\n    public int sumRange(int i, int j) {\n        return sums[j+1] - sums[i];\n    }\n}\n```\n","slug":"LeetCode-303-Range-Sum-Query-Immutable","published":1,"updated":"2016-12-13T13:11:35.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjap000hm4qfgoefvbb0","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个数字数组，求下标在i和j(i ≤ j)之间的元素和<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>利用一个辅助数组sums[x+1]来存储当前位置与之前元素的累加和</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumArray</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,nums)</span>:</span></span><br><span class=\"line\">        size = len(nums)</span><br><span class=\"line\">        <span class=\"comment\"># 辅助函数sums，计算每个位置与之前的数字累积和</span></span><br><span class=\"line\">        self.sums = [<span class=\"number\">0</span>] * (size + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            <span class=\"comment\"># 当前(x+1)位置元素累积和 = 前一位(累积和)+当前元素</span></span><br><span class=\"line\">            self.sums[x + <span class=\"number\">1</span>] += self.sums[x] + nums[x]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumRange</span><span class=\"params\">(self,i,j)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.sums[j+<span class=\"number\">1</span>] - self.sums[i]</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumArray</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] sums;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NumArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = nums.length;</span><br><span class=\"line\">        sums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">            sums[i+<span class=\"number\">1</span>] = sums[i] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumRange</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sums[j+<span class=\"number\">1</span>] - sums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个数字数组，求下标在i和j(i ≤ j)之间的元素和<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>利用一个辅助数组sums[x+1]来存储当前位置与之前元素的累加和</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumArray</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,nums)</span>:</span></span><br><span class=\"line\">        size = len(nums)</span><br><span class=\"line\">        <span class=\"comment\"># 辅助函数sums，计算每个位置与之前的数字累积和</span></span><br><span class=\"line\">        self.sums = [<span class=\"number\">0</span>] * (size + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            <span class=\"comment\"># 当前(x+1)位置元素累积和 = 前一位(累积和)+当前元素</span></span><br><span class=\"line\">            self.sums[x + <span class=\"number\">1</span>] += self.sums[x] + nums[x]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumRange</span><span class=\"params\">(self,i,j)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.sums[j+<span class=\"number\">1</span>] - self.sums[i]</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumArray</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] sums;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NumArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = nums.length;</span><br><span class=\"line\">        sums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">            sums[i+<span class=\"number\">1</span>] = sums[i] + nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumRange</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sums[j+<span class=\"number\">1</span>] - sums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"[LeetCode]453.Minimum Moves to Equal Array Elements","date":"2016-11-09T08:21:57.000Z","_content":"### 问题描述 ###\n给定一个长度为n的非空数字数组，每次对n-1个加1。\n求所有元素值相等，需要几次操作。\n<!-- more -->\n\n### 解题思路 ###\n操作次数 = 数组总和 - 数组中最小的数*数组长度\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def minMoves(self, nums):\n        return sum(nums) - min(nums)*len(nums)\n\n```\n\n**java**\n```java\npublic class Solution {\n    public int minMoves(int[] nums) {\n        int min = nums[0];\n        int sum = 0;\n        for(int i: nums){\n            min = Math.min(min,i);\n            sum +=i;\n        }\n        return sum - min*nums.length;\n    }\n}\n```\n","source":"_posts/LeetCode-453-Minimum-Moves-to-Equal-Array-Elements.md","raw":"---\ntitle: '[LeetCode]453.Minimum Moves to Equal Array Elements'\ndate: 2016-11-09 16:21:57\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n给定一个长度为n的非空数字数组，每次对n-1个加1。\n求所有元素值相等，需要几次操作。\n<!-- more -->\n\n### 解题思路 ###\n操作次数 = 数组总和 - 数组中最小的数*数组长度\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def minMoves(self, nums):\n        return sum(nums) - min(nums)*len(nums)\n\n```\n\n**java**\n```java\npublic class Solution {\n    public int minMoves(int[] nums) {\n        int min = nums[0];\n        int sum = 0;\n        for(int i: nums){\n            min = Math.min(min,i);\n            sum +=i;\n        }\n        return sum - min*nums.length;\n    }\n}\n```\n","slug":"LeetCode-453-Minimum-Moves-to-Equal-Array-Elements","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjap000km4qf685smrp1","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个长度为n的非空数字数组，每次对n-1个加1。<br>求所有元素值相等，需要几次操作。<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>操作次数 = 数组总和 - 数组中最小的数*数组长度</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minMoves</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum(nums) - min(nums)*len(nums)</span><br></pre></td></tr></table></figure></p>\n<p><strong>java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minMoves</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i: nums)&#123;</span><br><span class=\"line\">            min = Math.min(min,i);</span><br><span class=\"line\">            sum +=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum - min*nums.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个长度为n的非空数字数组，每次对n-1个加1。<br>求所有元素值相等，需要几次操作。<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>操作次数 = 数组总和 - 数组中最小的数*数组长度</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minMoves</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum(nums) - min(nums)*len(nums)</span><br></pre></td></tr></table></figure></p>\n<p><strong>java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minMoves</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i: nums)&#123;</span><br><span class=\"line\">            min = Math.min(min,i);</span><br><span class=\"line\">            sum +=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum - min*nums.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"[LeetCode]409.Longest Palindrome","date":"2016-11-09T02:50:21.000Z","_content":"\n### 问题描述 ###\n求一串字符串最大的回文子字符串长度\n<!-- more -->\n**注意：**\n1.大小写敏感.\n2.默认字符串全大写或全小写\n\n### 解题思路 ###\n偶数字符个数累加；奇数字符个数先减一再累加，同时计算奇数个数。\n最后如果奇数个数大于0，累加结果再加1。\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def longestPalindrome(self, s):\n        ans = odd = 0\n        count = collections.Counter(s)\n        for i in count:\n            ans += count[i]\n            if count[i] % 2 == 1:\n                ans -= 1\n                odd += 1\n        return ans + (odd > 0)\n```\n\n**Java**\n```java\nclass Soultion {\n    public int longestPalindrome(String s) {\n        int len = 0;\n        boolean[] map = new boolean[128];\n        for(char c : s.toCharArray()){\n            map[c] = !map[c];//将有字符的位置由false变成true\n            //如果该位置为false的话证明有偶数个数存在\n            if(!map[c]) len += 2;\n        }\n        //如果字符串长度大于已累计长度，添加一个元素放在回文字符串中间\n        if (len < s.length())len++;\n        return len;\n    }\n}\n```\n","source":"_posts/LeetCode-409-Longest-Palindrome.md","raw":"---\ntitle: '[LeetCode]409.Longest Palindrome'\ndate: 2016-11-09 10:50:21\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n\n### 问题描述 ###\n求一串字符串最大的回文子字符串长度\n<!-- more -->\n**注意：**\n1.大小写敏感.\n2.默认字符串全大写或全小写\n\n### 解题思路 ###\n偶数字符个数累加；奇数字符个数先减一再累加，同时计算奇数个数。\n最后如果奇数个数大于0，累加结果再加1。\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def longestPalindrome(self, s):\n        ans = odd = 0\n        count = collections.Counter(s)\n        for i in count:\n            ans += count[i]\n            if count[i] % 2 == 1:\n                ans -= 1\n                odd += 1\n        return ans + (odd > 0)\n```\n\n**Java**\n```java\nclass Soultion {\n    public int longestPalindrome(String s) {\n        int len = 0;\n        boolean[] map = new boolean[128];\n        for(char c : s.toCharArray()){\n            map[c] = !map[c];//将有字符的位置由false变成true\n            //如果该位置为false的话证明有偶数个数存在\n            if(!map[c]) len += 2;\n        }\n        //如果字符串长度大于已累计长度，添加一个元素放在回文字符串中间\n        if (len < s.length())len++;\n        return len;\n    }\n}\n```\n","slug":"LeetCode-409-Longest-Palindrome","published":1,"updated":"2016-12-13T13:11:35.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjap000nm4qfzavoit5d","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>求一串字符串最大的回文子字符串长度<br><a id=\"more\"></a><br><strong>注意：</strong><br>1.大小写敏感.<br>2.默认字符串全大写或全小写</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>偶数字符个数累加；奇数字符个数先减一再累加，同时计算奇数个数。<br>最后如果奇数个数大于0，累加结果再加1。</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        ans = odd = <span class=\"number\">0</span></span><br><span class=\"line\">        count = collections.Counter(s)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> count:</span><br><span class=\"line\">            ans += count[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> count[i] % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                ans -= <span class=\"number\">1</span></span><br><span class=\"line\">                odd += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans + (odd &gt; <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Soultion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] map = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : s.toCharArray())&#123;</span><br><span class=\"line\">            map[c] = !map[c];<span class=\"comment\">//将有字符的位置由false变成true</span></span><br><span class=\"line\">            <span class=\"comment\">//如果该位置为false的话证明有偶数个数存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!map[c]) len += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果字符串长度大于已累计长度，添加一个元素放在回文字符串中间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; s.length())len++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>求一串字符串最大的回文子字符串长度<br>","more":"<br><strong>注意：</strong><br>1.大小写敏感.<br>2.默认字符串全大写或全小写</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>偶数字符个数累加；奇数字符个数先减一再累加，同时计算奇数个数。<br>最后如果奇数个数大于0，累加结果再加1。</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        ans = odd = <span class=\"number\">0</span></span><br><span class=\"line\">        count = collections.Counter(s)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> count:</span><br><span class=\"line\">            ans += count[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> count[i] % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                ans -= <span class=\"number\">1</span></span><br><span class=\"line\">                odd += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans + (odd &gt; <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Soultion</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] map = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : s.toCharArray())&#123;</span><br><span class=\"line\">            map[c] = !map[c];<span class=\"comment\">//将有字符的位置由false变成true</span></span><br><span class=\"line\">            <span class=\"comment\">//如果该位置为false的话证明有偶数个数存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!map[c]) len += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果字符串长度大于已累计长度，添加一个元素放在回文字符串中间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; s.length())len++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"[LeetCode]463. Island Perimeter","date":"2016-11-23T02:01:55.000Z","_content":"\n### 问题描述 ###\n给定一个二维地图，1表示陆地，0表示水域。每一个陆地\n是边长为1的正方形。求岛屿的周长。\n<!-- more -->\n\n### 解题思路 ###\n每个格子周长为4，两个格子相邻时周长-2\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def islandPerimeter(self, grid):\n        ans = 0\n        h = len(grid)\n        w = len(grid[0]) if h else 0\n        for x in range(h):\n            for y in range(w):\n                if grid[x][y] == 1:\n                    ans += 4\n                    if x > 0 and grid[x-1][y]:\n                        ans -= 2\n                    if y > 0 and grid[x][y-1]:\n                        ans -= 2\n        return ans\n```\n\n**Java**\n```java\npublic class Solution {\n    public int islandPerimeter(int[][] grid) {\n        int ans = 0;\n        int h = g.length;\n        int w = g[0].length;\n        for(int i=0;i<h;i++){\n            for (int j=0;j<w;j++){\n                if (g[i][j] == 1){\n                    ans += 4;\n                    if(i > 0 && g[i-1][j] == 1) ans -= 2;\n                    if(j > 0 && g[i][j-1] == 1) ans -= 2;\n                }\n            }\n        }\n        return ans\n    }\n}\n```\n","source":"_posts/LeetCode-463-Island-Perimeter.md","raw":"---\ntitle: '[LeetCode]463. Island Perimeter'\ndate: 2016-11-23 10:01:55\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n\n### 问题描述 ###\n给定一个二维地图，1表示陆地，0表示水域。每一个陆地\n是边长为1的正方形。求岛屿的周长。\n<!-- more -->\n\n### 解题思路 ###\n每个格子周长为4，两个格子相邻时周长-2\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def islandPerimeter(self, grid):\n        ans = 0\n        h = len(grid)\n        w = len(grid[0]) if h else 0\n        for x in range(h):\n            for y in range(w):\n                if grid[x][y] == 1:\n                    ans += 4\n                    if x > 0 and grid[x-1][y]:\n                        ans -= 2\n                    if y > 0 and grid[x][y-1]:\n                        ans -= 2\n        return ans\n```\n\n**Java**\n```java\npublic class Solution {\n    public int islandPerimeter(int[][] grid) {\n        int ans = 0;\n        int h = g.length;\n        int w = g[0].length;\n        for(int i=0;i<h;i++){\n            for (int j=0;j<w;j++){\n                if (g[i][j] == 1){\n                    ans += 4;\n                    if(i > 0 && g[i-1][j] == 1) ans -= 2;\n                    if(j > 0 && g[i][j-1] == 1) ans -= 2;\n                }\n            }\n        }\n        return ans\n    }\n}\n```\n","slug":"LeetCode-463-Island-Perimeter","published":1,"updated":"2016-12-13T13:11:35.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjap000rm4qf5dixenw8","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个二维地图，1表示陆地，0表示水域。每一个陆地<br>是边长为1的正方形。求岛屿的周长。<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>每个格子周长为4，两个格子相邻时周长-2</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        h = len(grid)</span><br><span class=\"line\">        w = len(grid[<span class=\"number\">0</span>]) <span class=\"keyword\">if</span> h <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(h):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(w):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[x][y] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    ans += <span class=\"number\">4</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> grid[x<span class=\"number\">-1</span>][y]:</span><br><span class=\"line\">                        ans -= <span class=\"number\">2</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> y &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> grid[x][y<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                        ans -= <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = g.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w = g[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;h;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;w;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (g[i][j] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    ans += <span class=\"number\">4</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span> &amp;&amp; g[i-<span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) ans -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; g[i][j-<span class=\"number\">1</span>] == <span class=\"number\">1</span>) ans -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个二维地图，1表示陆地，0表示水域。每一个陆地<br>是边长为1的正方形。求岛屿的周长。<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>每个格子周长为4，两个格子相邻时周长-2</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        h = len(grid)</span><br><span class=\"line\">        w = len(grid[<span class=\"number\">0</span>]) <span class=\"keyword\">if</span> h <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(h):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(w):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[x][y] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    ans += <span class=\"number\">4</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> grid[x<span class=\"number\">-1</span>][y]:</span><br><span class=\"line\">                        ans -= <span class=\"number\">2</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> y &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> grid[x][y<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                        ans -= <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = g.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w = g[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;h;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;w;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (g[i][j] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    ans += <span class=\"number\">4</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span> &amp;&amp; g[i-<span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) ans -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; g[i][j-<span class=\"number\">1</span>] == <span class=\"number\">1</span>) ans -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"[LeetCode]70. Climbing Stairs","date":"2017-01-20T09:28:22.000Z","_content":"### 问题描述 ###\n有n步楼梯，需要n步才能到顶。每次你可以选择爬1步或2步，需要多少步你才能爬到顶。\n<!-- more -->\n\n### 解题思路 ###\n这个题目跟斐波那契数列一样。爬到最后一步有两种方式：\n- f(n-1) 爬一步到顶\n- f(n-2) 爬两步到顶\n同时爬1步只有一种方式，爬两步有两种方式。\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def climbStairs(self,n):\n        a,b = 1,1\n        for i in range(n):\n            a,b = b,a+b\n        return a\n```\n**java**\n```java\npublic class Solution{\n    public int climbStairs(int n){\n        if(n==0) return 0;\n        int a=1,b=1;\n        for(int i=0;i<n;i++){\n            int temp = a;\n            a = b;\n            b = a+temp;\n        }\n        return a;\n    }\n}\n\n```\n\nClimbing Stairs 这题还有一个变种题。题目如下\n>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n\n代码\n### 递归 ###\n```python\nclass Solution:\n    def jumpFloorII(self, number):\n        if number <=0: return -1\n        if number == 1: return 1\n        return 2 * self.jumpFloorII(number-1)\n\n```\n### 非递归 ###\n```python\nclass Solution:\n    def jumpFloorII(self, number):\n        # write code here\n        if number <= 0: return -1\n        if number == 1: return 1\n        a = 2\n        for i in range(2,number):\n            a *=2\n        return a\n```\n\n还有一道斐波那契数列的变种，题目如下\n> 用2*1的小矩形横、竖去覆盖更大的矩形。用n个2*1的小矩形无重叠的覆盖一个2*n的大矩形。共有多少种方法。\n> 如果因为是覆盖一个2*n的矩阵，所以当一个2*1的小矩阵竖放时，大矩形的长度就会变成n-1，剩下的需要覆盖的面积就是2*(n-1)\n> 如果是横放的话剩下需要覆盖的面积是2*(n-2) ,由此推出f(n) = f(n-1) + f(n-2)\n### 非递归 ###\n```python\nclass Solution:\n    def rectCover(self, number):\n    if number <= 0:\n        return 0\n    t = [1,2]\n    if number <= 2:\n        return t[number-1]\n    for i in range(2,number):\n        t.append(t[i-1]+t[i-2])\n    return t[-1]\n```\n\n### 递归 ###\n```java\npublic class Solution{\n    public int RectCover(int target){\n        if(target<=0){\n            return 0;\n        }else if(target==1){\n            return 1;\n        }else if(target==2){\n            return 2;\n        }\n        return RectCover(target-1)+RectCover(target-2);\n    }\n}\n```\n","source":"_posts/LeetCode-70-Climbing-Stairs.md","raw":"---\ntitle: '[LeetCode]70. Climbing Stairs'\ndate: 2017-01-20 17:28:22\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n有n步楼梯，需要n步才能到顶。每次你可以选择爬1步或2步，需要多少步你才能爬到顶。\n<!-- more -->\n\n### 解题思路 ###\n这个题目跟斐波那契数列一样。爬到最后一步有两种方式：\n- f(n-1) 爬一步到顶\n- f(n-2) 爬两步到顶\n同时爬1步只有一种方式，爬两步有两种方式。\n\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def climbStairs(self,n):\n        a,b = 1,1\n        for i in range(n):\n            a,b = b,a+b\n        return a\n```\n**java**\n```java\npublic class Solution{\n    public int climbStairs(int n){\n        if(n==0) return 0;\n        int a=1,b=1;\n        for(int i=0;i<n;i++){\n            int temp = a;\n            a = b;\n            b = a+temp;\n        }\n        return a;\n    }\n}\n\n```\n\nClimbing Stairs 这题还有一个变种题。题目如下\n>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n\n代码\n### 递归 ###\n```python\nclass Solution:\n    def jumpFloorII(self, number):\n        if number <=0: return -1\n        if number == 1: return 1\n        return 2 * self.jumpFloorII(number-1)\n\n```\n### 非递归 ###\n```python\nclass Solution:\n    def jumpFloorII(self, number):\n        # write code here\n        if number <= 0: return -1\n        if number == 1: return 1\n        a = 2\n        for i in range(2,number):\n            a *=2\n        return a\n```\n\n还有一道斐波那契数列的变种，题目如下\n> 用2*1的小矩形横、竖去覆盖更大的矩形。用n个2*1的小矩形无重叠的覆盖一个2*n的大矩形。共有多少种方法。\n> 如果因为是覆盖一个2*n的矩阵，所以当一个2*1的小矩阵竖放时，大矩形的长度就会变成n-1，剩下的需要覆盖的面积就是2*(n-1)\n> 如果是横放的话剩下需要覆盖的面积是2*(n-2) ,由此推出f(n) = f(n-1) + f(n-2)\n### 非递归 ###\n```python\nclass Solution:\n    def rectCover(self, number):\n    if number <= 0:\n        return 0\n    t = [1,2]\n    if number <= 2:\n        return t[number-1]\n    for i in range(2,number):\n        t.append(t[i-1]+t[i-2])\n    return t[-1]\n```\n\n### 递归 ###\n```java\npublic class Solution{\n    public int RectCover(int target){\n        if(target<=0){\n            return 0;\n        }else if(target==1){\n            return 1;\n        }else if(target==2){\n            return 2;\n        }\n        return RectCover(target-1)+RectCover(target-2);\n    }\n}\n```\n","slug":"LeetCode-70-Climbing-Stairs","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjap000um4qfbl5ied80","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>有n步楼梯，需要n步才能到顶。每次你可以选择爬1步或2步，需要多少步你才能爬到顶。<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这个题目跟斐波那契数列一样。爬到最后一步有两种方式：</p>\n<ul>\n<li>f(n-1) 爬一步到顶</li>\n<li>f(n-2) 爬两步到顶<br>同时爬1步只有一种方式，爬两步有两种方式。</li>\n</ul>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">climbStairs</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        a,b = <span class=\"number\">1</span>,<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            a,b = b,a+b</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure></p>\n<p><strong>java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">            a = b;</span><br><span class=\"line\">            b = a+temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Climbing Stairs 这题还有一个变种题。题目如下</p>\n<blockquote>\n<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n</blockquote>\n<p>代码</p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jumpFloorII</span><span class=\"params\">(self, number)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number &lt;=<span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span> * self.jumpFloorII(number<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jumpFloorII</span><span class=\"params\">(self, number)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># write code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number &lt;= <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        a = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,number):</span><br><span class=\"line\">            a *=<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure>\n<p>还有一道斐波那契数列的变种，题目如下</p>\n<blockquote>\n<p>用2<em>1的小矩形横、竖去覆盖更大的矩形。用n个2</em>1的小矩形无重叠的覆盖一个2<em>n的大矩形。共有多少种方法。<br>如果因为是覆盖一个2</em>n的矩阵，所以当一个2<em>1的小矩阵竖放时，大矩形的长度就会变成n-1，剩下的需要覆盖的面积就是2</em>(n-1)<br>如果是横放的话剩下需要覆盖的面积是2*(n-2) ,由此推出f(n) = f(n-1) + f(n-2)</p>\n<h3 id=\"非递归-1\"><a href=\"#非递归-1\" class=\"headerlink\" title=\"非递归\"></a>非递归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rectCover</span><span class=\"params\">(self, number)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    t = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t[number<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,number):</span><br><span class=\"line\">        t.append(t[i<span class=\"number\">-1</span>]+t[i<span class=\"number\">-2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"递归-1\"><a href=\"#递归-1\" class=\"headerlink\" title=\"递归\"></a>递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">RectCover</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RectCover(target-<span class=\"number\">1</span>)+RectCover(target-<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>有n步楼梯，需要n步才能到顶。每次你可以选择爬1步或2步，需要多少步你才能爬到顶。<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这个题目跟斐波那契数列一样。爬到最后一步有两种方式：</p>\n<ul>\n<li>f(n-1) 爬一步到顶</li>\n<li>f(n-2) 爬两步到顶<br>同时爬1步只有一种方式，爬两步有两种方式。</li>\n</ul>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">climbStairs</span><span class=\"params\">(self,n)</span>:</span></span><br><span class=\"line\">        a,b = <span class=\"number\">1</span>,<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            a,b = b,a+b</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure></p>\n<p><strong>java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">            a = b;</span><br><span class=\"line\">            b = a+temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Climbing Stairs 这题还有一个变种题。题目如下</p>\n<blockquote>\n<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n</blockquote>\n<p>代码</p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jumpFloorII</span><span class=\"params\">(self, number)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number &lt;=<span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span> * self.jumpFloorII(number<span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jumpFloorII</span><span class=\"params\">(self, number)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># write code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number &lt;= <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> number == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        a = <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,number):</span><br><span class=\"line\">            a *=<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure>\n<p>还有一道斐波那契数列的变种，题目如下</p>\n<blockquote>\n<p>用2<em>1的小矩形横、竖去覆盖更大的矩形。用n个2</em>1的小矩形无重叠的覆盖一个2<em>n的大矩形。共有多少种方法。<br>如果因为是覆盖一个2</em>n的矩阵，所以当一个2<em>1的小矩阵竖放时，大矩形的长度就会变成n-1，剩下的需要覆盖的面积就是2</em>(n-1)<br>如果是横放的话剩下需要覆盖的面积是2*(n-2) ,由此推出f(n) = f(n-1) + f(n-2)</p>\n<h3 id=\"非递归-1\"><a href=\"#非递归-1\" class=\"headerlink\" title=\"非递归\"></a>非递归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rectCover</span><span class=\"params\">(self, number)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    t = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> number &lt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t[number<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,number):</span><br><span class=\"line\">        t.append(t[i<span class=\"number\">-1</span>]+t[i<span class=\"number\">-2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"递归-1\"><a href=\"#递归-1\" class=\"headerlink\" title=\"递归\"></a>递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">RectCover</span><span class=\"params\">(<span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RectCover(target-<span class=\"number\">1</span>)+RectCover(target-<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[LeetCode]74. Search a 2D Matrix","date":"2016-12-21T02:42:05.000Z","_content":"### 问题描述 ###\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n### 解题思路 ###\n一开始打算用二分查找的方式，将二维数组划分成两部分，递归判断。实际写出来的时候就发现，二维数组并不好去判断值。后来在网上看到一个更好的方法。\n>将二维数组转化成二维平面，将target值从第一行的最后一个值开始查找，小于就往左边移动，大于就往下面移动。\n\n| | | | |\n| :---: |:---:| :---:| :---:|\n|1|3|5|7|\n|10|11|16|20|\n|23|30|34|50|\n<!-- more -->\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def searchMatrix(self, matrix, target):\n        if matrix is None or len(matrix)==0:\n            return False\n        row = len(matrix)\n        col = len(matrix[0])\n        i=col-1\n        j=0\n        while(i>=0 and j<row):\n            if matrix[j][i] == target:\n                return True\n            elif matrix[j][i] > target:\n                i = i - 1\n            elif matrix[j][i] < target:\n                j = j + 1\n        return False\n```\n**java**\n```java\npublic class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        if(matrix==null || matrix.length==0 || matrix[0].length==0) \n            return false;\n        int i = 0;\n        int j = matrix[0].length - 1;\n        while (i <= matrix.length - 1 && j >= 0) {\n            if (target == matrix[i][j]) {\n                return true;\n            } else if (target < matrix[i][j]) {\n                j--;\n            } else if (target > matrix[i][j]) {\n                i++;\n            }\n        }\n        return false;\n    }\n}\n```\n","source":"_posts/LeetCode-74-Search-a-2D-Matrix.md","raw":"---\ntitle: '[LeetCode]74. Search a 2D Matrix'\ndate: 2016-12-21 10:42:05\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n### 解题思路 ###\n一开始打算用二分查找的方式，将二维数组划分成两部分，递归判断。实际写出来的时候就发现，二维数组并不好去判断值。后来在网上看到一个更好的方法。\n>将二维数组转化成二维平面，将target值从第一行的最后一个值开始查找，小于就往左边移动，大于就往下面移动。\n\n| | | | |\n| :---: |:---:| :---:| :---:|\n|1|3|5|7|\n|10|11|16|20|\n|23|30|34|50|\n<!-- more -->\n### 具体代码 ###\n**python**\n```python\nclass Solution(object):\n    def searchMatrix(self, matrix, target):\n        if matrix is None or len(matrix)==0:\n            return False\n        row = len(matrix)\n        col = len(matrix[0])\n        i=col-1\n        j=0\n        while(i>=0 and j<row):\n            if matrix[j][i] == target:\n                return True\n            elif matrix[j][i] > target:\n                i = i - 1\n            elif matrix[j][i] < target:\n                j = j + 1\n        return False\n```\n**java**\n```java\npublic class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        if(matrix==null || matrix.length==0 || matrix[0].length==0) \n            return false;\n        int i = 0;\n        int j = matrix[0].length - 1;\n        while (i <= matrix.length - 1 && j >= 0) {\n            if (target == matrix[i][j]) {\n                return true;\n            } else if (target < matrix[i][j]) {\n                j--;\n            } else if (target > matrix[i][j]) {\n                i++;\n            }\n        }\n        return false;\n    }\n}\n```\n","slug":"LeetCode-74-Search-a-2D-Matrix","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjap000xm4qf1b5m0sxf","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一开始打算用二分查找的方式，将二维数组划分成两部分，递归判断。实际写出来的时候就发现，二维数组并不好去判断值。后来在网上看到一个更好的方法。</p>\n<blockquote>\n<p>将二维数组转化成二维平面，将target值从第一行的最后一个值开始查找，小于就往左边移动，大于就往下面移动。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">20</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">50</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(self, matrix, target)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> len(matrix)==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        row = len(matrix)</span><br><span class=\"line\">        col = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        i=col<span class=\"number\">-1</span></span><br><span class=\"line\">        j=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> j&lt;row):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> matrix[j][i] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> matrix[j][i] &gt; target:</span><br><span class=\"line\">                i = i - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> matrix[j][i] &lt; target:</span><br><span class=\"line\">                j = j + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix==<span class=\"keyword\">null</span> || matrix.length==<span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length==<span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = matrix[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= matrix.length - <span class=\"number\">1</span> &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == matrix[i][j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; matrix[i][j]) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; matrix[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>一开始打算用二分查找的方式，将二维数组划分成两部分，递归判断。实际写出来的时候就发现，二维数组并不好去判断值。后来在网上看到一个更好的方法。</p>\n<blockquote>\n<p>将二维数组转化成二维平面，将target值从第一行的最后一个值开始查找，小于就往左边移动，大于就往下面移动。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">20</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">50</td>\n</tr>\n</tbody>\n</table>","more":"<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(self, matrix, target)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> matrix <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> len(matrix)==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        row = len(matrix)</span><br><span class=\"line\">        col = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        i=col<span class=\"number\">-1</span></span><br><span class=\"line\">        j=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> j&lt;row):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> matrix[j][i] == target:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> matrix[j][i] &gt; target:</span><br><span class=\"line\">                i = i - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> matrix[j][i] &lt; target:</span><br><span class=\"line\">                j = j + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix==<span class=\"keyword\">null</span> || matrix.length==<span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length==<span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = matrix[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= matrix.length - <span class=\"number\">1</span> &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == matrix[i][j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; matrix[i][j]) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; matrix[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Linux注意事项","date":"2016-05-10T03:41:57.000Z","_content":"1. 下载、解压、执行 `make` `make install` `wget` 等命令需要在命令前加上`sudo`(**PS：最好所有命令都加上**)\n2. 解压与压缩命令\n    \n    解压命令：\n    \n    - `tar` `-zxvf` *.tar.gz\n    - `tar` `-xvf` *.tar\n    - `unrar` e *.rar\n    - `unzip` *.zip\n\n    压缩命令：\n    \n    - tar -cf all.tar *.jpg # -c新的包，f文件名\n    - tar -rf all.tar *.gif # -r新增加\n    \n    列出all中所有文件\n    \n    - tar -tf all.tar \n3. 切换命令/图形界面\n    <!-- more -->\n    切换成命令界面（暂时）\n\n    `Ctrl+Alt+空格` `Ctrl+Alt+F1~F6`\n\n    切换成命令模式（永久）\n    \n    > $>echo \"false\" | sudo tee /etc/X11/default-display-manager\n    \n    然后重启Ubuntu\n\n    切换成图形界面（暂时）\n\n    > startx\n    \n    切换成图形界面（永久）\n\n    > $>echo “/usr/sbin/gdm” | sudo tee /etc/X11/default-display-manager\n\n4. Linux 软件安装步骤\n    1. 加载配置 `sudo ./configure` **注意：**  在此命令后面添加`--prefix=...`可以指定安装路径，例如`sudo ./configure --prefix=/usr/local/python`\n    2. 编译 `sudo make`\n    3. 安装 `sudo make install`\n5. Linux 清屏命令\n    - `$ clear` 保留历史记录，将页面下翻一页而已\n    - `$ reset` 真正意义上的清空界面\n6. Linux 更改计算机名\n\n    > $ sudo vim /etc/hostname\n    > 将第一行改为你想要的名字\n\n7. Ubuntu apt-get update失败\n    > E: Could not get lock /var/lib/apt/lists/lock \n    > E: Could not get lock /var/lib/dpkg/lock\n    > 将这两个文件删除即可执行update命令\n\n8. 中断命令执行\n    > 有时候命令执行到一半发现执行错误，或者命令执行时卡死。需要执行中断命令\n    > `Ctrl + z`\n\n9. 创建文件夹或文件\n```bash\n$> mkdir aa # 创建aa文件夹\n$> touch aa.log # 创建aa.log文件(0字节)\n```\n\n10. Linux 查看进程\n```bash\n$> ps -ef | grep nginx \n#nobody    4554  4553  0 15:50 ?        00:00:00 nginx: worker process \n$> ps -e | grep nginx \n#4553 ?        00:00:00 nginx\n```\n\n11. Linux 关闭防火墙\n```bash\n$> sudo ufw disable\n```\n\n12. 开机自启动服务\n```bash\n$> sudo vi /etc/rc.local\n# 在 exit 0 前添加所需自启动服务\n```\n\n13. 安装ssh服务\n```bash\n$> sudo apt-get install openssh-server\n```\n","source":"_posts/Linux注意事项.md","raw":"---\ntitle: Linux注意事项\ndate: 2016-05-10 11:41:57\ncategories: \"Linux\"\ntags:\n- 学习\n---\n1. 下载、解压、执行 `make` `make install` `wget` 等命令需要在命令前加上`sudo`(**PS：最好所有命令都加上**)\n2. 解压与压缩命令\n    \n    解压命令：\n    \n    - `tar` `-zxvf` *.tar.gz\n    - `tar` `-xvf` *.tar\n    - `unrar` e *.rar\n    - `unzip` *.zip\n\n    压缩命令：\n    \n    - tar -cf all.tar *.jpg # -c新的包，f文件名\n    - tar -rf all.tar *.gif # -r新增加\n    \n    列出all中所有文件\n    \n    - tar -tf all.tar \n3. 切换命令/图形界面\n    <!-- more -->\n    切换成命令界面（暂时）\n\n    `Ctrl+Alt+空格` `Ctrl+Alt+F1~F6`\n\n    切换成命令模式（永久）\n    \n    > $>echo \"false\" | sudo tee /etc/X11/default-display-manager\n    \n    然后重启Ubuntu\n\n    切换成图形界面（暂时）\n\n    > startx\n    \n    切换成图形界面（永久）\n\n    > $>echo “/usr/sbin/gdm” | sudo tee /etc/X11/default-display-manager\n\n4. Linux 软件安装步骤\n    1. 加载配置 `sudo ./configure` **注意：**  在此命令后面添加`--prefix=...`可以指定安装路径，例如`sudo ./configure --prefix=/usr/local/python`\n    2. 编译 `sudo make`\n    3. 安装 `sudo make install`\n5. Linux 清屏命令\n    - `$ clear` 保留历史记录，将页面下翻一页而已\n    - `$ reset` 真正意义上的清空界面\n6. Linux 更改计算机名\n\n    > $ sudo vim /etc/hostname\n    > 将第一行改为你想要的名字\n\n7. Ubuntu apt-get update失败\n    > E: Could not get lock /var/lib/apt/lists/lock \n    > E: Could not get lock /var/lib/dpkg/lock\n    > 将这两个文件删除即可执行update命令\n\n8. 中断命令执行\n    > 有时候命令执行到一半发现执行错误，或者命令执行时卡死。需要执行中断命令\n    > `Ctrl + z`\n\n9. 创建文件夹或文件\n```bash\n$> mkdir aa # 创建aa文件夹\n$> touch aa.log # 创建aa.log文件(0字节)\n```\n\n10. Linux 查看进程\n```bash\n$> ps -ef | grep nginx \n#nobody    4554  4553  0 15:50 ?        00:00:00 nginx: worker process \n$> ps -e | grep nginx \n#4553 ?        00:00:00 nginx\n```\n\n11. Linux 关闭防火墙\n```bash\n$> sudo ufw disable\n```\n\n12. 开机自启动服务\n```bash\n$> sudo vi /etc/rc.local\n# 在 exit 0 前添加所需自启动服务\n```\n\n13. 安装ssh服务\n```bash\n$> sudo apt-get install openssh-server\n```\n","slug":"Linux注意事项","published":1,"updated":"2016-12-06T12:40:08.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjap0010m4qfbs5oqcnr","content":"<ol>\n<li>下载、解压、执行 <code>make</code> <code>make install</code> <code>wget</code> 等命令需要在命令前加上<code>sudo</code>(<strong>PS：最好所有命令都加上</strong>)</li>\n<li><p>解压与压缩命令</p>\n<p> 解压命令：</p>\n<ul>\n<li><code>tar</code> <code>-zxvf</code> *.tar.gz</li>\n<li><code>tar</code> <code>-xvf</code> *.tar</li>\n<li><code>unrar</code> e *.rar</li>\n<li><p><code>unzip</code> *.zip</p>\n<p>压缩命令：</p>\n</li>\n<li><p>tar -cf all.tar *.jpg # -c新的包，f文件名</p>\n</li>\n<li><p>tar -rf all.tar *.gif # -r新增加</p>\n<p>列出all中所有文件</p>\n</li>\n<li><p>tar -tf all.tar </p>\n</li>\n</ul>\n</li>\n<li><p>切换命令/图形界面</p>\n <a id=\"more\"></a>\n<p> 切换成命令界面（暂时）</p>\n<p> <code>Ctrl+Alt+空格</code> <code>Ctrl+Alt+F1~F6</code></p>\n<p> 切换成命令模式（永久）</p>\n<blockquote>\n<p>$&gt;echo “false” | sudo tee /etc/X11/default-display-manager</p>\n</blockquote>\n<p> 然后重启Ubuntu</p>\n<p> 切换成图形界面（暂时）</p>\n<blockquote>\n<p>startx</p>\n</blockquote>\n<p> 切换成图形界面（永久）</p>\n<blockquote>\n<p>$&gt;echo “/usr/sbin/gdm” | sudo tee /etc/X11/default-display-manager</p>\n</blockquote>\n</li>\n<li><p>Linux 软件安装步骤</p>\n<ol>\n<li>加载配置 <code>sudo ./configure</code> <strong>注意：</strong>  在此命令后面添加<code>--prefix=...</code>可以指定安装路径，例如<code>sudo ./configure --prefix=/usr/local/python</code></li>\n<li>编译 <code>sudo make</code></li>\n<li>安装 <code>sudo make install</code></li>\n</ol>\n</li>\n<li>Linux 清屏命令<ul>\n<li><code>$ clear</code> 保留历史记录，将页面下翻一页而已</li>\n<li><code>$ reset</code> 真正意义上的清空界面</li>\n</ul>\n</li>\n<li><p>Linux 更改计算机名</p>\n<blockquote>\n<p>$ sudo vim /etc/hostname<br>将第一行改为你想要的名字</p>\n</blockquote>\n</li>\n<li><p>Ubuntu apt-get update失败</p>\n<blockquote>\n<p>E: Could not get lock /var/lib/apt/lists/lock<br>E: Could not get lock /var/lib/dpkg/lock<br>将这两个文件删除即可执行update命令</p>\n</blockquote>\n</li>\n<li><p>中断命令执行</p>\n<blockquote>\n<p>有时候命令执行到一半发现执行错误，或者命令执行时卡死。需要执行中断命令<br><code>Ctrl + z</code></p>\n</blockquote>\n</li>\n<li><p>创建文件夹或文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; mkdir aa <span class=\"comment\"># 创建aa文件夹</span></span><br><span class=\"line\">$&gt; touch aa.log <span class=\"comment\"># 创建aa.log文件(0字节)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Linux 查看进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; ps -ef | grep nginx </span><br><span class=\"line\"><span class=\"comment\">#nobody    4554  4553  0 15:50 ?        00:00:00 nginx: worker process </span></span><br><span class=\"line\">$&gt; ps <span class=\"_\">-e</span> | grep nginx </span><br><span class=\"line\"><span class=\"comment\">#4553 ?        00:00:00 nginx</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Linux 关闭防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo ufw <span class=\"built_in\">disable</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开机自启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo vi /etc/rc.local</span><br><span class=\"line\"><span class=\"comment\"># 在 exit 0 前添加所需自启动服务</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装ssh服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<ol>\n<li>下载、解压、执行 <code>make</code> <code>make install</code> <code>wget</code> 等命令需要在命令前加上<code>sudo</code>(<strong>PS：最好所有命令都加上</strong>)</li>\n<li><p>解压与压缩命令</p>\n<p> 解压命令：</p>\n<ul>\n<li><code>tar</code> <code>-zxvf</code> *.tar.gz</li>\n<li><code>tar</code> <code>-xvf</code> *.tar</li>\n<li><code>unrar</code> e *.rar</li>\n<li><p><code>unzip</code> *.zip</p>\n<p>压缩命令：</p>\n</li>\n<li><p>tar -cf all.tar *.jpg # -c新的包，f文件名</p>\n</li>\n<li><p>tar -rf all.tar *.gif # -r新增加</p>\n<p>列出all中所有文件</p>\n</li>\n<li><p>tar -tf all.tar </p>\n</li>\n</ul>\n</li>\n<li><p>切换命令/图形界面</p>","more":"<p> 切换成命令界面（暂时）</p>\n<p> <code>Ctrl+Alt+空格</code> <code>Ctrl+Alt+F1~F6</code></p>\n<p> 切换成命令模式（永久）</p>\n<blockquote>\n<p>$&gt;echo “false” | sudo tee /etc/X11/default-display-manager</p>\n</blockquote>\n<p> 然后重启Ubuntu</p>\n<p> 切换成图形界面（暂时）</p>\n<blockquote>\n<p>startx</p>\n</blockquote>\n<p> 切换成图形界面（永久）</p>\n<blockquote>\n<p>$&gt;echo “/usr/sbin/gdm” | sudo tee /etc/X11/default-display-manager</p>\n</blockquote>\n</li>\n<li><p>Linux 软件安装步骤</p>\n<ol>\n<li>加载配置 <code>sudo ./configure</code> <strong>注意：</strong>  在此命令后面添加<code>--prefix=...</code>可以指定安装路径，例如<code>sudo ./configure --prefix=/usr/local/python</code></li>\n<li>编译 <code>sudo make</code></li>\n<li>安装 <code>sudo make install</code></li>\n</ol>\n</li>\n<li>Linux 清屏命令<ul>\n<li><code>$ clear</code> 保留历史记录，将页面下翻一页而已</li>\n<li><code>$ reset</code> 真正意义上的清空界面</li>\n</ul>\n</li>\n<li><p>Linux 更改计算机名</p>\n<blockquote>\n<p>$ sudo vim /etc/hostname<br>将第一行改为你想要的名字</p>\n</blockquote>\n</li>\n<li><p>Ubuntu apt-get update失败</p>\n<blockquote>\n<p>E: Could not get lock /var/lib/apt/lists/lock<br>E: Could not get lock /var/lib/dpkg/lock<br>将这两个文件删除即可执行update命令</p>\n</blockquote>\n</li>\n<li><p>中断命令执行</p>\n<blockquote>\n<p>有时候命令执行到一半发现执行错误，或者命令执行时卡死。需要执行中断命令<br><code>Ctrl + z</code></p>\n</blockquote>\n</li>\n<li><p>创建文件夹或文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; mkdir aa <span class=\"comment\"># 创建aa文件夹</span></span><br><span class=\"line\">$&gt; touch aa.log <span class=\"comment\"># 创建aa.log文件(0字节)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Linux 查看进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; ps -ef | grep nginx </span><br><span class=\"line\"><span class=\"comment\">#nobody    4554  4553  0 15:50 ?        00:00:00 nginx: worker process </span></span><br><span class=\"line\">$&gt; ps <span class=\"_\">-e</span> | grep nginx </span><br><span class=\"line\"><span class=\"comment\">#4553 ?        00:00:00 nginx</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Linux 关闭防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo ufw <span class=\"built_in\">disable</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开机自启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo vi /etc/rc.local</span><br><span class=\"line\"><span class=\"comment\"># 在 exit 0 前添加所需自启动服务</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装ssh服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Nginx学习笔记（一）安装Nginx","date":"2016-10-16T14:42:14.000Z","_content":"### 在Linux下安装Nginx ###\n1. 在(Nginx官网)[http://nginx.org/en/download.html]上下载压缩包。\n2. 解压后进行安装\n<!-- more -->\n\n    > 在./configure的时候会报错\n    > ./configure: error: the HTTP rewrite module requires the PCRE library.\n    >  这时候我们需要在Linux上安装PCRE库\n    >  sudo apt-get update\n    >  sudo apt-get install libpcre3 libpcre3-dev\n    >  再次编译，发现又报了缺少zlib library，我们再次照葫芦画瓢安装zlib\n    >  sudo apt-get install zlib1g-dev\n    >  再次编译，发现Nginx安装成功！\n\n### Nginx的启动，关闭命令 ###\n1. Nginx 启动命令\n```shell\n/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n```\n\n2. Nginx 关闭命令\n```shell\nkill -QUIT PID\n```\n\n3. 将Nginx写成服务运行\n如果每次都去执行`/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf`是非常麻烦的事。所以我们将Nginx的相关操作写成Bash脚本，就能像windows服务一样简单的几个命令就能完成任务。\n首先我们在网上Copy一份*[>>Ngnix脚本](http://github.com/amoyiki/Blog/raw/master/Document/nginx)*\n然后在Linux执行命令\n```shell\n$> sudo wget http://github.com/amoyiki/Blog/raw/master/Document/nginx -O /etc/init.d/nginx\n$> sudo chmod +x /etc/init.d/nginx\n```\n\n现在我们就可以用简短的命令启动服务了\n\n> Usage: /etc/init.d/nginx {start|stop|restart|force-reload|reload|status|configtest|quietupgrade|terminate|destroy}\n\n","source":"_posts/Nginx学习笔记（一）.md","raw":"---\ntitle: Nginx学习笔记（一）安装Nginx\ndate: 2016-10-16 22:42:14\ncategories: \"Nginx\"\ntags:\n- 学习\n---\n### 在Linux下安装Nginx ###\n1. 在(Nginx官网)[http://nginx.org/en/download.html]上下载压缩包。\n2. 解压后进行安装\n<!-- more -->\n\n    > 在./configure的时候会报错\n    > ./configure: error: the HTTP rewrite module requires the PCRE library.\n    >  这时候我们需要在Linux上安装PCRE库\n    >  sudo apt-get update\n    >  sudo apt-get install libpcre3 libpcre3-dev\n    >  再次编译，发现又报了缺少zlib library，我们再次照葫芦画瓢安装zlib\n    >  sudo apt-get install zlib1g-dev\n    >  再次编译，发现Nginx安装成功！\n\n### Nginx的启动，关闭命令 ###\n1. Nginx 启动命令\n```shell\n/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n```\n\n2. Nginx 关闭命令\n```shell\nkill -QUIT PID\n```\n\n3. 将Nginx写成服务运行\n如果每次都去执行`/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf`是非常麻烦的事。所以我们将Nginx的相关操作写成Bash脚本，就能像windows服务一样简单的几个命令就能完成任务。\n首先我们在网上Copy一份*[>>Ngnix脚本](http://github.com/amoyiki/Blog/raw/master/Document/nginx)*\n然后在Linux执行命令\n```shell\n$> sudo wget http://github.com/amoyiki/Blog/raw/master/Document/nginx -O /etc/init.d/nginx\n$> sudo chmod +x /etc/init.d/nginx\n```\n\n现在我们就可以用简短的命令启动服务了\n\n> Usage: /etc/init.d/nginx {start|stop|restart|force-reload|reload|status|configtest|quietupgrade|terminate|destroy}\n\n","slug":"Nginx学习笔记（一）","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb40013m4qf2ud95ovq","content":"<h3 id=\"在Linux下安装Nginx\"><a href=\"#在Linux下安装Nginx\" class=\"headerlink\" title=\"在Linux下安装Nginx\"></a>在Linux下安装Nginx</h3><ol>\n<li>在(Nginx官网)[<a href=\"http://nginx.org/en/download.html]上下载压缩包。\" target=\"_blank\" rel=\"external\">http://nginx.org/en/download.html]上下载压缩包。</a></li>\n<li><p>解压后进行安装</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>在./configure的时候会报错<br>./configure: error: the HTTP rewrite module requires the PCRE library.<br> 这时候我们需要在Linux上安装PCRE库<br> sudo apt-get update<br> sudo apt-get install libpcre3 libpcre3-dev<br> 再次编译，发现又报了缺少zlib library，我们再次照葫芦画瓢安装zlib<br> sudo apt-get install zlib1g-dev<br> 再次编译，发现Nginx安装成功！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Nginx的启动，关闭命令\"><a href=\"#Nginx的启动，关闭命令\" class=\"headerlink\" title=\"Nginx的启动，关闭命令\"></a>Nginx的启动，关闭命令</h3><ol>\n<li><p>Nginx 启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx 关闭命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT PID</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将Nginx写成服务运行<br>如果每次都去执行<code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code>是非常麻烦的事。所以我们将Nginx的相关操作写成Bash脚本，就能像windows服务一样简单的几个命令就能完成任务。<br>首先我们在网上Copy一份<em><a href=\"http://github.com/amoyiki/Blog/raw/master/Document/nginx\" target=\"_blank\" rel=\"external\">&gt;&gt;Ngnix脚本</a></em><br>然后在Linux执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo wget http://github.com/amoyiki/Blog/raw/master/Document/nginx -O /etc/init.d/nginx</span><br><span class=\"line\">$&gt; sudo chmod +x /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>现在我们就可以用简短的命令启动服务了</p>\n<blockquote>\n<p>Usage: /etc/init.d/nginx {start|stop|restart|force-reload|reload|status|configtest|quietupgrade|terminate|destroy}</p>\n</blockquote>\n","excerpt":"<h3 id=\"在Linux下安装Nginx\"><a href=\"#在Linux下安装Nginx\" class=\"headerlink\" title=\"在Linux下安装Nginx\"></a>在Linux下安装Nginx</h3><ol>\n<li>在(Nginx官网)[<a href=\"http://nginx.org/en/download.html]上下载压缩包。\">http://nginx.org/en/download.html]上下载压缩包。</a></li>\n<li><p>解压后进行安装</p>","more":"<blockquote>\n<p>在./configure的时候会报错<br>./configure: error: the HTTP rewrite module requires the PCRE library.<br> 这时候我们需要在Linux上安装PCRE库<br> sudo apt-get update<br> sudo apt-get install libpcre3 libpcre3-dev<br> 再次编译，发现又报了缺少zlib library，我们再次照葫芦画瓢安装zlib<br> sudo apt-get install zlib1g-dev<br> 再次编译，发现Nginx安装成功！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Nginx的启动，关闭命令\"><a href=\"#Nginx的启动，关闭命令\" class=\"headerlink\" title=\"Nginx的启动，关闭命令\"></a>Nginx的启动，关闭命令</h3><ol>\n<li><p>Nginx 启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx 关闭命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -QUIT PID</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将Nginx写成服务运行<br>如果每次都去执行<code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code>是非常麻烦的事。所以我们将Nginx的相关操作写成Bash脚本，就能像windows服务一样简单的几个命令就能完成任务。<br>首先我们在网上Copy一份<em><a href=\"http://github.com/amoyiki/Blog/raw/master/Document/nginx\">&gt;&gt;Ngnix脚本</a></em><br>然后在Linux执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; sudo wget http://github.com/amoyiki/Blog/raw/master/Document/nginx -O /etc/init.d/nginx</span><br><span class=\"line\">$&gt; sudo chmod +x /etc/init.d/nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>现在我们就可以用简短的命令启动服务了</p>\n<blockquote>\n<p>Usage: /etc/init.d/nginx {start|stop|restart|force-reload|reload|status|configtest|quietupgrade|terminate|destroy}</p>\n</blockquote>"},{"title":"Python一些小技巧","date":"2016-10-10T07:31:11.000Z","_content":"\n\n## 列表 ##\n### 排序 ###\n1. 列表和字典的混合排序\n<!-- more -->\n```python\npersons = [{'name':'zhang3','age':15},{'name':'li4','age':12}]\npersons.sort(lambda a,b:a['age']-b['age']) # 按照年龄排序\n```\n\n### 两个列表的差异 ###\n1. 交集\n```python\na = [1,2,3]\nb = [2,3,4]\nvalue = [v for v in a if v in b]\n```\n\n2. 差集\n```python\n...\nvalue = [v for v in a if not v in b]\n```\n\n## 日期 ##\n### datetime ###\n1. 获得今天时间凌晨，格式：'2016-11-02 00:00:00'\n```python\nnow = datetime.datetime.today().replace(hour=0,minute=0,second=0,microsecond=0)\n```\n2. 时间相加减\n```python \nd1 = datetime.datetime.now()\nd2 = d1 + datetime.timedelta()\n```\n其中`timedelta`方法可以以下几个日期参数进行修改\n> days=0,seconds=0,microseconds=0,milliseconds=0,minutes=0,hours=0,weeks=0\n","source":"_posts/Python一些小技巧.md","raw":"---\ntitle: Python一些小技巧\ndate: 2016-10-10 15:31:11\ncategories: \"Python\"\ntags:\n- 学习\n---\n\n\n## 列表 ##\n### 排序 ###\n1. 列表和字典的混合排序\n<!-- more -->\n```python\npersons = [{'name':'zhang3','age':15},{'name':'li4','age':12}]\npersons.sort(lambda a,b:a['age']-b['age']) # 按照年龄排序\n```\n\n### 两个列表的差异 ###\n1. 交集\n```python\na = [1,2,3]\nb = [2,3,4]\nvalue = [v for v in a if v in b]\n```\n\n2. 差集\n```python\n...\nvalue = [v for v in a if not v in b]\n```\n\n## 日期 ##\n### datetime ###\n1. 获得今天时间凌晨，格式：'2016-11-02 00:00:00'\n```python\nnow = datetime.datetime.today().replace(hour=0,minute=0,second=0,microsecond=0)\n```\n2. 时间相加减\n```python \nd1 = datetime.datetime.now()\nd2 = d1 + datetime.timedelta()\n```\n其中`timedelta`方法可以以下几个日期参数进行修改\n> days=0,seconds=0,microseconds=0,milliseconds=0,minutes=0,hours=0,weeks=0\n","slug":"Python一些小技巧","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb40017m4qfq5p8wckz","content":"<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><ol>\n<li>列表和字典的混合排序<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">persons = [&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'zhang3'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">15</span>&#125;,&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'li4'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">12</span>&#125;]</span><br><span class=\"line\">persons.sort(<span class=\"keyword\">lambda</span> a,b:a[<span class=\"string\">'age'</span>]-b[<span class=\"string\">'age'</span>]) <span class=\"comment\"># 按照年龄排序</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"两个列表的差异\"><a href=\"#两个列表的差异\" class=\"headerlink\" title=\"两个列表的差异\"></a>两个列表的差异</h3><ol>\n<li><p>交集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">value = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> v <span class=\"keyword\">in</span> b]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>差集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">value = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">in</span> b]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h2><h3 id=\"datetime\"><a href=\"#datetime\" class=\"headerlink\" title=\"datetime\"></a>datetime</h3><ol>\n<li><p>获得今天时间凌晨，格式：’2016-11-02 00:00:00’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now = datetime.datetime.today().replace(hour=<span class=\"number\">0</span>,minute=<span class=\"number\">0</span>,second=<span class=\"number\">0</span>,microsecond=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>时间相加减</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d1 = datetime.datetime.now()</span><br><span class=\"line\">d2 = d1 + datetime.timedelta()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中<code>timedelta</code>方法可以以下几个日期参数进行修改</p>\n<blockquote>\n<p>days=0,seconds=0,microseconds=0,milliseconds=0,minutes=0,hours=0,weeks=0</p>\n</blockquote>\n","excerpt":"<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><ol>\n<li>列表和字典的混合排序","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">persons = [&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'zhang3'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">15</span>&#125;,&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'li4'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">12</span>&#125;]</span><br><span class=\"line\">persons.sort(<span class=\"keyword\">lambda</span> a,b:a[<span class=\"string\">'age'</span>]-b[<span class=\"string\">'age'</span>]) <span class=\"comment\"># 按照年龄排序</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"两个列表的差异\"><a href=\"#两个列表的差异\" class=\"headerlink\" title=\"两个列表的差异\"></a>两个列表的差异</h3><ol>\n<li><p>交集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">b = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">value = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> v <span class=\"keyword\">in</span> b]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>差集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">value = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> v <span class=\"keyword\">in</span> b]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h2><h3 id=\"datetime\"><a href=\"#datetime\" class=\"headerlink\" title=\"datetime\"></a>datetime</h3><ol>\n<li><p>获得今天时间凌晨，格式：’2016-11-02 00:00:00’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now = datetime.datetime.today().replace(hour=<span class=\"number\">0</span>,minute=<span class=\"number\">0</span>,second=<span class=\"number\">0</span>,microsecond=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>时间相加减</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d1 = datetime.datetime.now()</span><br><span class=\"line\">d2 = d1 + datetime.timedelta()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中<code>timedelta</code>方法可以以下几个日期参数进行修改</p>\n<blockquote>\n<p>days=0,seconds=0,microseconds=0,milliseconds=0,minutes=0,hours=0,weeks=0</p>\n</blockquote>"},{"title":"Nginx学习笔记（二）配置及性能调优","date":"2017-01-06T01:39:42.000Z","_content":"## 如何使用 ##\n### 配置文档 ###\n1.nginx文档结构\n```nginx\n...  #全局块\nevents { #events块\n    ...  \n}\n\nhttp { #http块\n    ... #http全局块\n\n    server { #server块\n        ... #server全局块\n\n        location [PATTRERN] { #location块\n            ...\n        }\n\n        location [PATTRERN] {\n            ...\n        }\n    }\n\n    ...\n}\n```\n<!-- more -->\n- `全局块`：配置会影响nginx全局指令\n- `events块`：配置事件驱动模型和最大连接数\n- `http块`：可以嵌套多个server，配置代理，缓存，日志\n- `server块`：\n- `location块`：\n** --施工中-- **\n### 性能调优 ###\n** --施工中-- **\n","source":"_posts/Nginx学习笔记（二）.md","raw":"---\ntitle: Nginx学习笔记（二）配置及性能调优\ndate: 2017-01-06 09:39:42\ncategories: \"Nginx\"\ntags:\n- 学习\n---\n## 如何使用 ##\n### 配置文档 ###\n1.nginx文档结构\n```nginx\n...  #全局块\nevents { #events块\n    ...  \n}\n\nhttp { #http块\n    ... #http全局块\n\n    server { #server块\n        ... #server全局块\n\n        location [PATTRERN] { #location块\n            ...\n        }\n\n        location [PATTRERN] {\n            ...\n        }\n    }\n\n    ...\n}\n```\n<!-- more -->\n- `全局块`：配置会影响nginx全局指令\n- `events块`：配置事件驱动模型和最大连接数\n- `http块`：可以嵌套多个server，配置代理，缓存，日志\n- `server块`：\n- `location块`：\n** --施工中-- **\n### 性能调优 ###\n** --施工中-- **\n","slug":"Nginx学习笔记（二）","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb4001am4qfi2qz9f11","content":"<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"配置文档\"><a href=\"#配置文档\" class=\"headerlink\" title=\"配置文档\"></a>配置文档</h3><p>1.nginx文档结构<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...  #全局块</span><br><span class=\"line\">events &#123; #events块</span><br><span class=\"line\">    ...  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123; #http块</span><br><span class=\"line\">    ... #http全局块</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123; #server块</span><br><span class=\"line\">        ... #server全局块</span><br><span class=\"line\"></span><br><span class=\"line\">        location [PATTRERN] &#123; #location块</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location [PATTRERN] &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<ul>\n<li><code>全局块</code>：配置会影响nginx全局指令</li>\n<li><code>events块</code>：配置事件驱动模型和最大连接数</li>\n<li><code>http块</code>：可以嵌套多个server，配置代理，缓存，日志</li>\n<li><code>server块</code>：</li>\n<li><code>location块</code>：<br><strong> –施工中– </strong><h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><strong> –施工中– </strong></li>\n</ul>\n","excerpt":"<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"配置文档\"><a href=\"#配置文档\" class=\"headerlink\" title=\"配置文档\"></a>配置文档</h3><p>1.nginx文档结构<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...  #全局块</span><br><span class=\"line\">events &#123; #events块</span><br><span class=\"line\">    ...  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123; #http块</span><br><span class=\"line\">    ... #http全局块</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123; #server块</span><br><span class=\"line\">        ... #server全局块</span><br><span class=\"line\"></span><br><span class=\"line\">        location [PATTRERN] &#123; #location块</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location [PATTRERN] &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<ul>\n<li><code>全局块</code>：配置会影响nginx全局指令</li>\n<li><code>events块</code>：配置事件驱动模型和最大连接数</li>\n<li><code>http块</code>：可以嵌套多个server，配置代理，缓存，日志</li>\n<li><code>server块</code>：</li>\n<li><code>location块</code>：<br><strong> –施工中– </strong><h3 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h3><strong> –施工中– </strong></li>\n</ul>"},{"title":"Python协程","date":"2016-12-16T03:04:21.000Z","_content":" ** -- 施工中 -- **\n<!-- more -->\n\n> Because generator-iterators begin execution at the top of the\n    generator's function body, there is no yield expression to receive\n    a value when the generator has just been created.  Therefore,\n    calling send() with a non-None argument is prohibited when the\n    generator iterator has just started, and a TypeError is raised if\n    this occurs (presumably due to a logic error of some kind).  Thus,\n    before you can communicate with a coroutine you must first call\n    next() or send(None) to advance its execution to the first yield\n    expression.\n\n\n~~因为生成器在执行函数时，生成器刚被创建，没有接收到yield表达式的值\n隐藏当生成器启动时禁止进行无参send()方法~~\n### 生产者消费者 ###\n```python\ndef consumer(): # 定义一个消费者，由于有yeild关键字，此方法是个生成器\n    print '[Consumer] Init Consumer ...'\n    r = 'init ok' # 初始化返回结果，在启动消费者的时候，返回给生成者\n    while True:\n        n = yield r # 消费者通过yield接收生产者的消息，并返回其结果\n        print '[Consumer] consume n = %s, r=%s'%(n,r)\n        r = 'consume %s OK' % n # 消费者消费结果，下个循环返回给生成者\ndef produce(c): # 定义一个生产者，c为消费者生成器\n    print '[Producer] Init Producer ...'\n    r = c.send(None) # 启动消费者生成器，同时返回第一次结果\n    n = 0\n    while n < 5:\n        n += 1\n        print '[Producer] While, Producing %s ...'%n\n        r = c.send(n) # 向消费者发送消息并准备接收结果。此时会切换到消费者执行\n        print '[Producer] Consumer return: %s'%r\n    c.close()\n    print '[Producer] Close Producer ....'\n```\n","source":"_posts/Python协程.md","raw":"---\ntitle: Python协程\ndate: 2016-12-16 11:04:21\ncategories: \"Python\"\ntags:\n- 学习\n---\n ** -- 施工中 -- **\n<!-- more -->\n\n> Because generator-iterators begin execution at the top of the\n    generator's function body, there is no yield expression to receive\n    a value when the generator has just been created.  Therefore,\n    calling send() with a non-None argument is prohibited when the\n    generator iterator has just started, and a TypeError is raised if\n    this occurs (presumably due to a logic error of some kind).  Thus,\n    before you can communicate with a coroutine you must first call\n    next() or send(None) to advance its execution to the first yield\n    expression.\n\n\n~~因为生成器在执行函数时，生成器刚被创建，没有接收到yield表达式的值\n隐藏当生成器启动时禁止进行无参send()方法~~\n### 生产者消费者 ###\n```python\ndef consumer(): # 定义一个消费者，由于有yeild关键字，此方法是个生成器\n    print '[Consumer] Init Consumer ...'\n    r = 'init ok' # 初始化返回结果，在启动消费者的时候，返回给生成者\n    while True:\n        n = yield r # 消费者通过yield接收生产者的消息，并返回其结果\n        print '[Consumer] consume n = %s, r=%s'%(n,r)\n        r = 'consume %s OK' % n # 消费者消费结果，下个循环返回给生成者\ndef produce(c): # 定义一个生产者，c为消费者生成器\n    print '[Producer] Init Producer ...'\n    r = c.send(None) # 启动消费者生成器，同时返回第一次结果\n    n = 0\n    while n < 5:\n        n += 1\n        print '[Producer] While, Producing %s ...'%n\n        r = c.send(n) # 向消费者发送消息并准备接收结果。此时会切换到消费者执行\n        print '[Producer] Consumer return: %s'%r\n    c.close()\n    print '[Producer] Close Producer ....'\n```\n","slug":"Python协程","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb4001dm4qfal7kgkte","content":"<p> <strong> – 施工中 – </strong><br><a id=\"more\"></a></p>\n<blockquote>\n<p>Because generator-iterators begin execution at the top of the<br>    generator’s function body, there is no yield expression to receive<br>    a value when the generator has just been created.  Therefore,<br>    calling send() with a non-None argument is prohibited when the<br>    generator iterator has just started, and a TypeError is raised if<br>    this occurs (presumably due to a logic error of some kind).  Thus,<br>    before you can communicate with a coroutine you must first call<br>    next() or send(None) to advance its execution to the first yield<br>    expression.</p>\n</blockquote>\n<p><del>因为生成器在执行函数时，生成器刚被创建，没有接收到yield表达式的值<br>隐藏当生成器启动时禁止进行无参send()方法</del></p>\n<h3 id=\"生产者消费者\"><a href=\"#生产者消费者\" class=\"headerlink\" title=\"生产者消费者\"></a>生产者消费者</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer</span><span class=\"params\">()</span>:</span> <span class=\"comment\"># 定义一个消费者，由于有yeild关键字，此方法是个生成器</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'[Consumer] Init Consumer ...'</span></span><br><span class=\"line\">    r = <span class=\"string\">'init ok'</span> <span class=\"comment\"># 初始化返回结果，在启动消费者的时候，返回给生成者</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        n = <span class=\"keyword\">yield</span> r <span class=\"comment\"># 消费者通过yield接收生产者的消息，并返回其结果</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'[Consumer] consume n = %s, r=%s'</span>%(n,r)</span><br><span class=\"line\">        r = <span class=\"string\">'consume %s OK'</span> % n <span class=\"comment\"># 消费者消费结果，下个循环返回给生成者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce</span><span class=\"params\">(c)</span>:</span> <span class=\"comment\"># 定义一个生产者，c为消费者生成器</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] Init Producer ...'</span></span><br><span class=\"line\">    r = c.send(<span class=\"keyword\">None</span>) <span class=\"comment\"># 启动消费者生成器，同时返回第一次结果</span></span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        n += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] While, Producing %s ...'</span>%n</span><br><span class=\"line\">        r = c.send(n) <span class=\"comment\"># 向消费者发送消息并准备接收结果。此时会切换到消费者执行</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] Consumer return: %s'</span>%r</span><br><span class=\"line\">    c.close()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] Close Producer ....'</span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p> <strong> – 施工中 – </strong><br>","more":"</p>\n<blockquote>\n<p>Because generator-iterators begin execution at the top of the<br>    generator’s function body, there is no yield expression to receive<br>    a value when the generator has just been created.  Therefore,<br>    calling send() with a non-None argument is prohibited when the<br>    generator iterator has just started, and a TypeError is raised if<br>    this occurs (presumably due to a logic error of some kind).  Thus,<br>    before you can communicate with a coroutine you must first call<br>    next() or send(None) to advance its execution to the first yield<br>    expression.</p>\n</blockquote>\n<p><del>因为生成器在执行函数时，生成器刚被创建，没有接收到yield表达式的值<br>隐藏当生成器启动时禁止进行无参send()方法</del></p>\n<h3 id=\"生产者消费者\"><a href=\"#生产者消费者\" class=\"headerlink\" title=\"生产者消费者\"></a>生产者消费者</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer</span><span class=\"params\">()</span>:</span> <span class=\"comment\"># 定义一个消费者，由于有yeild关键字，此方法是个生成器</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'[Consumer] Init Consumer ...'</span></span><br><span class=\"line\">    r = <span class=\"string\">'init ok'</span> <span class=\"comment\"># 初始化返回结果，在启动消费者的时候，返回给生成者</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        n = <span class=\"keyword\">yield</span> r <span class=\"comment\"># 消费者通过yield接收生产者的消息，并返回其结果</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'[Consumer] consume n = %s, r=%s'</span>%(n,r)</span><br><span class=\"line\">        r = <span class=\"string\">'consume %s OK'</span> % n <span class=\"comment\"># 消费者消费结果，下个循环返回给生成者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce</span><span class=\"params\">(c)</span>:</span> <span class=\"comment\"># 定义一个生产者，c为消费者生成器</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] Init Producer ...'</span></span><br><span class=\"line\">    r = c.send(<span class=\"keyword\">None</span>) <span class=\"comment\"># 启动消费者生成器，同时返回第一次结果</span></span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        n += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] While, Producing %s ...'</span>%n</span><br><span class=\"line\">        r = c.send(n) <span class=\"comment\"># 向消费者发送消息并准备接收结果。此时会切换到消费者执行</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] Consumer return: %s'</span>%r</span><br><span class=\"line\">    c.close()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'[Producer] Close Producer ....'</span></span><br></pre></td></tr></table></figure>"},{"title":"SQL 中Group by 的使用","date":"2016-05-11T02:59:47.000Z","_content":"\n## 在多表查询中使用Group by ##\n\n> 有三张表，一张是部门表-dept，一张是餐厅表-dinner，还有一张是员工消费明细表-cost(**含餐厅、部门外键**)\n> 现在需要一张报表，需求如下:\n>\n|部门名称|餐厅名称|消费总次数|消费总金额|\n|-----|-----|------|-------|\n|部门1|餐厅1|2000|20000|\n|部门1|餐厅2|2000|20000|\n|部门2|餐厅1|2000|20000|\n\n<!-- more -->\n\n```sql\nselect dept.deptname,dinner.name,cost1.countsum,cost2.money from cost as c \nleft join (select dining_id,dept_id,count(*) as countsum from  cost group by dining_id,dept_id) as c1 on c1.dining_id = c.dining_id and c1.dept_id=c.dept_id\nleft join (select dining_id,dept_id,sum(money) as money from  cost group by dining_id,dept_id) as c2 on c2.dining_id = c.dining_id and c2.dept_id=ic.dept_id\nleft join dinner as d on d.id= c.dining_id\nleft join dept as dept on dept.deptid= c.dept_id ;\n\n```\n\n**注意：**\n\n> 当使用`group by`时，`select` 指定的字段要么作为分组\n分组依据，写在`group by` 后边，要吗已经被包含在聚合函数中。\n如果不是这两种情况的话会跳出错误：\n\n> *选择列表中的列 'xxx' 无效，因为该列没有包含在聚合函数或 GROUP BY 子句中。*\n","source":"_posts/SQL 中Group by 的使用.md","raw":"---\ntitle: SQL 中Group by 的使用\ndate: 2016-05-11 10:59:47\ncategories: \"SQL\"\ntags:\n- 学习\n---\n\n## 在多表查询中使用Group by ##\n\n> 有三张表，一张是部门表-dept，一张是餐厅表-dinner，还有一张是员工消费明细表-cost(**含餐厅、部门外键**)\n> 现在需要一张报表，需求如下:\n>\n|部门名称|餐厅名称|消费总次数|消费总金额|\n|-----|-----|------|-------|\n|部门1|餐厅1|2000|20000|\n|部门1|餐厅2|2000|20000|\n|部门2|餐厅1|2000|20000|\n\n<!-- more -->\n\n```sql\nselect dept.deptname,dinner.name,cost1.countsum,cost2.money from cost as c \nleft join (select dining_id,dept_id,count(*) as countsum from  cost group by dining_id,dept_id) as c1 on c1.dining_id = c.dining_id and c1.dept_id=c.dept_id\nleft join (select dining_id,dept_id,sum(money) as money from  cost group by dining_id,dept_id) as c2 on c2.dining_id = c.dining_id and c2.dept_id=ic.dept_id\nleft join dinner as d on d.id= c.dining_id\nleft join dept as dept on dept.deptid= c.dept_id ;\n\n```\n\n**注意：**\n\n> 当使用`group by`时，`select` 指定的字段要么作为分组\n分组依据，写在`group by` 后边，要吗已经被包含在聚合函数中。\n如果不是这两种情况的话会跳出错误：\n\n> *选择列表中的列 'xxx' 无效，因为该列没有包含在聚合函数或 GROUP BY 子句中。*\n","slug":"SQL 中Group by 的使用","published":1,"updated":"2016-11-25T14:23:52.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb4001hm4qfl5bmg05h","content":"<h2 id=\"在多表查询中使用Group-by\"><a href=\"#在多表查询中使用Group-by\" class=\"headerlink\" title=\"在多表查询中使用Group by\"></a>在多表查询中使用Group by</h2><blockquote>\n<p>有三张表，一张是部门表-dept，一张是餐厅表-dinner，还有一张是员工消费明细表-cost(<strong>含餐厅、部门外键</strong>)<br>现在需要一张报表，需求如下:</p>\n<table>\n<thead>\n<tr>\n<th>部门名称</th>\n<th>餐厅名称</th>\n<th>消费总次数</th>\n<th>消费总金额</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>部门1</td>\n<td>餐厅1</td>\n<td>2000</td>\n<td>20000</td>\n</tr>\n<tr>\n<td>部门1</td>\n<td>餐厅2</td>\n<td>2000</td>\n<td>20000</td>\n</tr>\n<tr>\n<td>部门2</td>\n<td>餐厅1</td>\n<td>2000</td>\n<td>20000</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> dept.deptname,dinner.name,cost1.countsum,cost2.money <span class=\"keyword\">from</span> <span class=\"keyword\">cost</span> <span class=\"keyword\">as</span> c </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> dining_id,dept_id,<span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> countsum <span class=\"keyword\">from</span>  <span class=\"keyword\">cost</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dining_id,dept_id) <span class=\"keyword\">as</span> c1 <span class=\"keyword\">on</span> c1.dining_id = c.dining_id <span class=\"keyword\">and</span> c1.dept_id=c.dept_id</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> dining_id,dept_id,<span class=\"keyword\">sum</span>(money) <span class=\"keyword\">as</span> money <span class=\"keyword\">from</span>  <span class=\"keyword\">cost</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dining_id,dept_id) <span class=\"keyword\">as</span> c2 <span class=\"keyword\">on</span> c2.dining_id = c.dining_id <span class=\"keyword\">and</span> c2.dept_id=ic.dept_id</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> dinner <span class=\"keyword\">as</span> d <span class=\"keyword\">on</span> d.id= c.dining_id</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> dept <span class=\"keyword\">as</span> dept <span class=\"keyword\">on</span> dept.deptid= c.dept_id ;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>当使用<code>group by</code>时，<code>select</code> 指定的字段要么作为分组<br>分组依据，写在<code>group by</code> 后边，要吗已经被包含在聚合函数中。<br>如果不是这两种情况的话会跳出错误：</p>\n<p><em>选择列表中的列 ‘xxx’ 无效，因为该列没有包含在聚合函数或 GROUP BY 子句中。</em></p>\n</blockquote>\n","excerpt":"<h2 id=\"在多表查询中使用Group-by\"><a href=\"#在多表查询中使用Group-by\" class=\"headerlink\" title=\"在多表查询中使用Group by\"></a>在多表查询中使用Group by</h2><blockquote>\n<p>有三张表，一张是部门表-dept，一张是餐厅表-dinner，还有一张是员工消费明细表-cost(<strong>含餐厅、部门外键</strong>)<br>现在需要一张报表，需求如下:</p>\n<table>\n<thead>\n<tr>\n<th>部门名称</th>\n<th>餐厅名称</th>\n<th>消费总次数</th>\n<th>消费总金额</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>部门1</td>\n<td>餐厅1</td>\n<td>2000</td>\n<td>20000</td>\n</tr>\n<tr>\n<td>部门1</td>\n<td>餐厅2</td>\n<td>2000</td>\n<td>20000</td>\n</tr>\n<tr>\n<td>部门2</td>\n<td>餐厅1</td>\n<td>2000</td>\n<td>20000</td>\n</tr>\n</tbody>\n</table>\n</blockquote>","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> dept.deptname,dinner.name,cost1.countsum,cost2.money <span class=\"keyword\">from</span> <span class=\"keyword\">cost</span> <span class=\"keyword\">as</span> c </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> dining_id,dept_id,<span class=\"keyword\">count</span>(*) <span class=\"keyword\">as</span> countsum <span class=\"keyword\">from</span>  <span class=\"keyword\">cost</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dining_id,dept_id) <span class=\"keyword\">as</span> c1 <span class=\"keyword\">on</span> c1.dining_id = c.dining_id <span class=\"keyword\">and</span> c1.dept_id=c.dept_id</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> dining_id,dept_id,<span class=\"keyword\">sum</span>(money) <span class=\"keyword\">as</span> money <span class=\"keyword\">from</span>  <span class=\"keyword\">cost</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> dining_id,dept_id) <span class=\"keyword\">as</span> c2 <span class=\"keyword\">on</span> c2.dining_id = c.dining_id <span class=\"keyword\">and</span> c2.dept_id=ic.dept_id</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> dinner <span class=\"keyword\">as</span> d <span class=\"keyword\">on</span> d.id= c.dining_id</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> dept <span class=\"keyword\">as</span> dept <span class=\"keyword\">on</span> dept.deptid= c.dept_id ;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<blockquote>\n<p>当使用<code>group by</code>时，<code>select</code> 指定的字段要么作为分组<br>分组依据，写在<code>group by</code> 后边，要吗已经被包含在聚合函数中。<br>如果不是这两种情况的话会跳出错误：</p>\n<p><em>选择列表中的列 ‘xxx’ 无效，因为该列没有包含在聚合函数或 GROUP BY 子句中。</em></p>\n</blockquote>"},{"title":"SQL小技巧","date":"2016-08-18T03:03:00.000Z","_content":"### 重置表自增长ID值 ###\n有时候我们需要清空一张表的数据，又不想删除增长表。除了删除数据外，还需要将自增长ID重置为0。相关的SQl操作如下\n1. 方法一\n  ```sql\n  truncate table tb\n  ```\n  但是`truncate`方法不能清空含有`Foreign Key`约束的表，这个时候就需要用到方法二了。\n2. 方法二\n  ```sql\nDBCC CHECKIDENT(TB,RESEED,0)\n  ```\n<!-- more -->\n### 循环插入10万条测试数据 ###\n```sql\ndeclare @i int\nset @i=1\nwhile @i<100000\nbegin\n    insert into test(title,date_time) values('test'+cast(@i as nvarchar(10)),getdate())\n    set @i=@i+1\nend\ngo\n```\n**注意**:  \n1. `cast()`函数是强制类型转换与`convert()`用法一致\n2. `declare` 用于声明变量\n","source":"_posts/SQL小技巧.md","raw":"---\ntitle: SQL小技巧\ndate: 2016-08-18 11:03:00\ncategories: \"SQL\"\n---\n### 重置表自增长ID值 ###\n有时候我们需要清空一张表的数据，又不想删除增长表。除了删除数据外，还需要将自增长ID重置为0。相关的SQl操作如下\n1. 方法一\n  ```sql\n  truncate table tb\n  ```\n  但是`truncate`方法不能清空含有`Foreign Key`约束的表，这个时候就需要用到方法二了。\n2. 方法二\n  ```sql\nDBCC CHECKIDENT(TB,RESEED,0)\n  ```\n<!-- more -->\n### 循环插入10万条测试数据 ###\n```sql\ndeclare @i int\nset @i=1\nwhile @i<100000\nbegin\n    insert into test(title,date_time) values('test'+cast(@i as nvarchar(10)),getdate())\n    set @i=@i+1\nend\ngo\n```\n**注意**:  \n1. `cast()`函数是强制类型转换与`convert()`用法一致\n2. `declare` 用于声明变量\n","slug":"SQL小技巧","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb4001km4qfwbx1gtzy","content":"<h3 id=\"重置表自增长ID值\"><a href=\"#重置表自增长ID值\" class=\"headerlink\" title=\"重置表自增长ID值\"></a>重置表自增长ID值</h3><p>有时候我们需要清空一张表的数据，又不想删除增长表。除了删除数据外，还需要将自增长ID重置为0。相关的SQl操作如下</p>\n<ol>\n<li><p>方法一</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> tb</span><br></pre></td></tr></table></figure>\n<p>但是<code>truncate</code>方法不能清空含有<code>Foreign Key</code>约束的表，这个时候就需要用到方法二了。</p>\n</li>\n<li>方法二<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBCC CHECKIDENT(TB,RESEED,0)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"循环插入10万条测试数据\"><a href=\"#循环插入10万条测试数据\" class=\"headerlink\" title=\"循环插入10万条测试数据\"></a>循环插入10万条测试数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> @i <span class=\"built_in\">int</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> @i=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> @i&lt;<span class=\"number\">100000</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">test</span>(title,date_time) <span class=\"keyword\">values</span>(<span class=\"string\">'test'</span>+<span class=\"keyword\">cast</span>(@i <span class=\"keyword\">as</span> <span class=\"keyword\">nvarchar</span>(<span class=\"number\">10</span>)),<span class=\"keyword\">getdate</span>())</span><br><span class=\"line\">    <span class=\"keyword\">set</span> @i=@i+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:  </p>\n<ol>\n<li><code>cast()</code>函数是强制类型转换与<code>convert()</code>用法一致</li>\n<li><code>declare</code> 用于声明变量</li>\n</ol>\n","excerpt":"<h3 id=\"重置表自增长ID值\"><a href=\"#重置表自增长ID值\" class=\"headerlink\" title=\"重置表自增长ID值\"></a>重置表自增长ID值</h3><p>有时候我们需要清空一张表的数据，又不想删除增长表。除了删除数据外，还需要将自增长ID重置为0。相关的SQl操作如下</p>\n<ol>\n<li><p>方法一</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> tb</span><br></pre></td></tr></table></figure>\n<p>但是<code>truncate</code>方法不能清空含有<code>Foreign Key</code>约束的表，这个时候就需要用到方法二了。</p>\n</li>\n<li>方法二<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBCC CHECKIDENT(TB,RESEED,0)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<h3 id=\"循环插入10万条测试数据\"><a href=\"#循环插入10万条测试数据\" class=\"headerlink\" title=\"循环插入10万条测试数据\"></a>循环插入10万条测试数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> @i <span class=\"built_in\">int</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> @i=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> @i&lt;<span class=\"number\">100000</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"keyword\">test</span>(title,date_time) <span class=\"keyword\">values</span>(<span class=\"string\">'test'</span>+<span class=\"keyword\">cast</span>(@i <span class=\"keyword\">as</span> <span class=\"keyword\">nvarchar</span>(<span class=\"number\">10</span>)),<span class=\"keyword\">getdate</span>())</span><br><span class=\"line\">    <span class=\"keyword\">set</span> @i=@i+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:  </p>\n<ol>\n<li><code>cast()</code>函数是强制类型转换与<code>convert()</code>用法一致</li>\n<li><code>declare</code> 用于声明变量</li>\n</ol>"},{"title":"Vim使用技巧","date":"2016-05-19T00:41:57.000Z","_content":"最近在学习Linux操作系统，顺带的把Vim也稍微的学了一下。下面记录一些常用的Vim操作命令\n。\n\n## Vim移动命令 ##\n\n* k,j,h,l 分别是移动光标：上下左右\n* Ctrl + b / Ctrl + f 分别是上翻一页，下翻一页\n* gg 移动到文档首\n* G 移动到文档末\n","source":"_posts/vim使用技巧.md","raw":"---\ntitle: Vim使用技巧\ndate: 2016-05-19 08:41:57\ncategories: \"Linux\"\ntags:\n- 学习\n- vim\n---\n最近在学习Linux操作系统，顺带的把Vim也稍微的学了一下。下面记录一些常用的Vim操作命令\n。\n\n## Vim移动命令 ##\n\n* k,j,h,l 分别是移动光标：上下左右\n* Ctrl + b / Ctrl + f 分别是上翻一页，下翻一页\n* gg 移动到文档首\n* G 移动到文档末\n","slug":"vim使用技巧","published":1,"updated":"2016-11-25T14:23:52.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb4001nm4qf4fxe38ad","content":"<p>最近在学习Linux操作系统，顺带的把Vim也稍微的学了一下。下面记录一些常用的Vim操作命令<br>。</p>\n<h2 id=\"Vim移动命令\"><a href=\"#Vim移动命令\" class=\"headerlink\" title=\"Vim移动命令\"></a>Vim移动命令</h2><ul>\n<li>k,j,h,l 分别是移动光标：上下左右</li>\n<li>Ctrl + b / Ctrl + f 分别是上翻一页，下翻一页</li>\n<li>gg 移动到文档首</li>\n<li>G 移动到文档末</li>\n</ul>\n","excerpt":"","more":"<p>最近在学习Linux操作系统，顺带的把Vim也稍微的学了一下。下面记录一些常用的Vim操作命令<br>。</p>\n<h2 id=\"Vim移动命令\"><a href=\"#Vim移动命令\" class=\"headerlink\" title=\"Vim移动命令\"></a>Vim移动命令</h2><ul>\n<li>k,j,h,l 分别是移动光标：上下左右</li>\n<li>Ctrl + b / Ctrl + f 分别是上翻一页，下翻一页</li>\n<li>gg 移动到文档首</li>\n<li>G 移动到文档末</li>\n</ul>\n"},{"title":"git技巧--gitignore配置","date":"2016-12-15T05:54:08.000Z","_content":"## .gitignore 文件配置 ##\n### .gitignore 配置无法解决问题时 ###\n如果`.gitignore`配置完后，仍无法屏蔽掉特殊文件的情况。我们可以手动修改项目路径下的`.git/info/exclude`文件。例如：\n> 在Pycharm下进行Python开发时会生成临时文件`__pycache__/`,只需将这个文件名写到exclude文件内即可。\n","source":"_posts/git技巧-gitignore配置.md","raw":"---\ntitle: git技巧--gitignore配置\ndate: 2016-12-15 13:54:08\ncategories: \"Git\"\ntags:\n- git\n---\n## .gitignore 文件配置 ##\n### .gitignore 配置无法解决问题时 ###\n如果`.gitignore`配置完后，仍无法屏蔽掉特殊文件的情况。我们可以手动修改项目路径下的`.git/info/exclude`文件。例如：\n> 在Pycharm下进行Python开发时会生成临时文件`__pycache__/`,只需将这个文件名写到exclude文件内即可。\n","slug":"git技巧-gitignore配置","published":1,"updated":"2016-12-19T14:08:43.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb4001pm4qftqnoxden","content":"<h2 id=\"gitignore-文件配置\"><a href=\"#gitignore-文件配置\" class=\"headerlink\" title=\".gitignore 文件配置\"></a>.gitignore 文件配置</h2><h3 id=\"gitignore-配置无法解决问题时\"><a href=\"#gitignore-配置无法解决问题时\" class=\"headerlink\" title=\".gitignore 配置无法解决问题时\"></a>.gitignore 配置无法解决问题时</h3><p>如果<code>.gitignore</code>配置完后，仍无法屏蔽掉特殊文件的情况。我们可以手动修改项目路径下的<code>.git/info/exclude</code>文件。例如：</p>\n<blockquote>\n<p>在Pycharm下进行Python开发时会生成临时文件<code>__pycache__/</code>,只需将这个文件名写到exclude文件内即可。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"gitignore-文件配置\"><a href=\"#gitignore-文件配置\" class=\"headerlink\" title=\".gitignore 文件配置\"></a>.gitignore 文件配置</h2><h3 id=\"gitignore-配置无法解决问题时\"><a href=\"#gitignore-配置无法解决问题时\" class=\"headerlink\" title=\".gitignore 配置无法解决问题时\"></a>.gitignore 配置无法解决问题时</h3><p>如果<code>.gitignore</code>配置完后，仍无法屏蔽掉特殊文件的情况。我们可以手动修改项目路径下的<code>.git/info/exclude</code>文件。例如：</p>\n<blockquote>\n<p>在Pycharm下进行Python开发时会生成临时文件<code>__pycache__/</code>,只需将这个文件名写到exclude文件内即可。</p>\n</blockquote>\n"},{"title":"windows 下使用Virtualenv 管理Python项目","date":"2016-05-09T14:57:21.000Z","_content":"\n### 为什么使用virtualenv ###\n\n我们在使用python时可能会遇到在一台电脑同时装不同的版本Python或者装不同版本的第三方依赖。\n这时候就可以用virtualenv来隔绝项目之间第三方依赖。\n此外，virtualenv还可以把开发环境打包。一键部署到其他地方。\n\n## windows 环境安装virtualenv ##\n**先决条件：**\n1. 已经安装Python\n2. 已经安装pip或easy_install\n<!-- more -->\n### 安装virtual ###\n（假定按在D:\\env文件夹下）\n```bash\nD:\\env> pip install virtualenv\nD:\\env> pip install virtualenvwrapper\n```\n### 创建一个虚拟环境 ###\n```bash\nD:\\env> mkvirtualenv env\nNew python executable in D:\\workspace\\env1\\Scripts\\python.exe\nInstalling setuptools, pip, wheel...done.\n```\n\n创建完成后我们可以使用`lsvirtualenv`查看已经创建的虚拟环境\n\n```bash\nD:\\env>lsvirtualenv\n\ndir /b /ad \"D:\\env\"\n========================================\nenv\n```\n\n可以利用`workon 虚拟环境名字`来切环境\n\n### 常用操作 ###\n\n1. 激活虚拟环境 `workon env`\n2. 退出虚拟环境`deactivate`\n3. 查看当前虚拟环境安装的所有软件包`pip list`\n\n### 结束 ###\n那么，愉快的用pip去装各种各样的依赖包吧！\n","source":"_posts/windows-下使用Virtualenv-管理Python项目.md","raw":"---\ntitle: windows 下使用Virtualenv 管理Python项目\ndate: 2016-05-09 22:57:21\ncategories: \"工具配置\"\ntags: \n- Virtualenv\n- Python\n---\n\n### 为什么使用virtualenv ###\n\n我们在使用python时可能会遇到在一台电脑同时装不同的版本Python或者装不同版本的第三方依赖。\n这时候就可以用virtualenv来隔绝项目之间第三方依赖。\n此外，virtualenv还可以把开发环境打包。一键部署到其他地方。\n\n## windows 环境安装virtualenv ##\n**先决条件：**\n1. 已经安装Python\n2. 已经安装pip或easy_install\n<!-- more -->\n### 安装virtual ###\n（假定按在D:\\env文件夹下）\n```bash\nD:\\env> pip install virtualenv\nD:\\env> pip install virtualenvwrapper\n```\n### 创建一个虚拟环境 ###\n```bash\nD:\\env> mkvirtualenv env\nNew python executable in D:\\workspace\\env1\\Scripts\\python.exe\nInstalling setuptools, pip, wheel...done.\n```\n\n创建完成后我们可以使用`lsvirtualenv`查看已经创建的虚拟环境\n\n```bash\nD:\\env>lsvirtualenv\n\ndir /b /ad \"D:\\env\"\n========================================\nenv\n```\n\n可以利用`workon 虚拟环境名字`来切环境\n\n### 常用操作 ###\n\n1. 激活虚拟环境 `workon env`\n2. 退出虚拟环境`deactivate`\n3. 查看当前虚拟环境安装的所有软件包`pip list`\n\n### 结束 ###\n那么，愉快的用pip去装各种各样的依赖包吧！\n","slug":"windows-下使用Virtualenv-管理Python项目","published":1,"updated":"2016-11-25T14:23:52.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjb4001um4qfbq1tqnka","content":"<h3 id=\"为什么使用virtualenv\"><a href=\"#为什么使用virtualenv\" class=\"headerlink\" title=\"为什么使用virtualenv\"></a>为什么使用virtualenv</h3><p>我们在使用python时可能会遇到在一台电脑同时装不同的版本Python或者装不同版本的第三方依赖。<br>这时候就可以用virtualenv来隔绝项目之间第三方依赖。<br>此外，virtualenv还可以把开发环境打包。一键部署到其他地方。</p>\n<h2 id=\"windows-环境安装virtualenv\"><a href=\"#windows-环境安装virtualenv\" class=\"headerlink\" title=\"windows 环境安装virtualenv\"></a>windows 环境安装virtualenv</h2><p><strong>先决条件：</strong></p>\n<ol>\n<li>已经安装Python</li>\n<li>已经安装pip或easy_install<a id=\"more\"></a>\n<h3 id=\"安装virtual\"><a href=\"#安装virtual\" class=\"headerlink\" title=\"安装virtual\"></a>安装virtual</h3>（假定按在D:\\env文件夹下）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\env&gt; pip install virtualenv</span><br><span class=\"line\">D:\\env&gt; pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"创建一个虚拟环境\"><a href=\"#创建一个虚拟环境\" class=\"headerlink\" title=\"创建一个虚拟环境\"></a>创建一个虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\env&gt; mkvirtualenv env</span><br><span class=\"line\">New python executable <span class=\"keyword\">in</span> D:\\workspace\\env1\\Scripts\\python.exe</span><br><span class=\"line\">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure>\n<p>创建完成后我们可以使用<code>lsvirtualenv</code>查看已经创建的虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\env&gt;lsvirtualenv</span><br><span class=\"line\"></span><br><span class=\"line\">dir /b /ad <span class=\"string\">\"D:\\env\"</span></span><br><span class=\"line\">========================================</span><br><span class=\"line\">env</span><br></pre></td></tr></table></figure>\n<p>可以利用<code>workon 虚拟环境名字</code>来切环境</p>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><ol>\n<li>激活虚拟环境 <code>workon env</code></li>\n<li>退出虚拟环境<code>deactivate</code></li>\n<li>查看当前虚拟环境安装的所有软件包<code>pip list</code></li>\n</ol>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>那么，愉快的用pip去装各种各样的依赖包吧！</p>\n","excerpt":"<h3 id=\"为什么使用virtualenv\"><a href=\"#为什么使用virtualenv\" class=\"headerlink\" title=\"为什么使用virtualenv\"></a>为什么使用virtualenv</h3><p>我们在使用python时可能会遇到在一台电脑同时装不同的版本Python或者装不同版本的第三方依赖。<br>这时候就可以用virtualenv来隔绝项目之间第三方依赖。<br>此外，virtualenv还可以把开发环境打包。一键部署到其他地方。</p>\n<h2 id=\"windows-环境安装virtualenv\"><a href=\"#windows-环境安装virtualenv\" class=\"headerlink\" title=\"windows 环境安装virtualenv\"></a>windows 环境安装virtualenv</h2><p><strong>先决条件：</strong></p>\n<ol>\n<li>已经安装Python</li>\n<li>已经安装pip或easy_install","more":"<h3 id=\"安装virtual\"><a href=\"#安装virtual\" class=\"headerlink\" title=\"安装virtual\"></a>安装virtual</h3>（假定按在D:\\env文件夹下）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\env&gt; pip install virtualenv</span><br><span class=\"line\">D:\\env&gt; pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"创建一个虚拟环境\"><a href=\"#创建一个虚拟环境\" class=\"headerlink\" title=\"创建一个虚拟环境\"></a>创建一个虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\env&gt; mkvirtualenv env</span><br><span class=\"line\">New python executable <span class=\"keyword\">in</span> D:\\workspace\\env1\\Scripts\\python.exe</span><br><span class=\"line\">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure>\n<p>创建完成后我们可以使用<code>lsvirtualenv</code>查看已经创建的虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\env&gt;lsvirtualenv</span><br><span class=\"line\"></span><br><span class=\"line\">dir /b /ad <span class=\"string\">\"D:\\env\"</span></span><br><span class=\"line\">========================================</span><br><span class=\"line\">env</span><br></pre></td></tr></table></figure>\n<p>可以利用<code>workon 虚拟环境名字</code>来切环境</p>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><ol>\n<li>激活虚拟环境 <code>workon env</code></li>\n<li>退出虚拟环境<code>deactivate</code></li>\n<li>查看当前虚拟环境安装的所有软件包<code>pip list</code></li>\n</ol>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>那么，愉快的用pip去装各种各样的依赖包吧！</p>"},{"title":"数据结构--Java（1） 实现Stack","date":"2016-10-31T07:59:38.000Z","_content":"### 利用数组实现Stack ###\n<!-- more -->\n```java\npublic class ArrayStack<T> implements StackADT<T> {\n    private final int DEFAULT_SIZE=2;//默认大小\n    private int capacity;//栈容量\n    private int size;//栈大小\n\n    private int top;\n    private Object[] array;\n\n    public ArrayStack(){\n        this.capacity = DEFAULT_SIZE;\n        this.array = new Object[this.capacity];\n        this.size = 0;\n        System.out.println(top);\n    }\n\n    public ArrayStack(int capacity){\n        this.capacity = capacity;\n        this.array = new Object[this.capacity];\n        this.size = 0;\n    }\n    @Override\n    public void clear() {\n        Arrays.fill(this.array,null);\n        this.size = 0;\n        this.top = 0;\n        this.capacity = DEFAULT_SIZE;\n        this.array = new Object[this.capacity];\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return this.size == 0;\n    }\n\n    @Override\n    public T peek() {\n        if (isEmpty()){\n            return null;\n        }\n        return (T) this.array[this.top-1];\n\n    }\n\n    @Override\n    public T pop() {\n        T v = (T) this.array[top-1];\n        array[this.top-1] = null;\n        this.top = this.top - 1;\n        this.size--;\n        return v;\n    }\n\n    @Override\n    public void push(T v) {\n        if (this.size<this.capacity){\n            this.array[top] = v;\n            this.size++;\n            this.top++;\n        }else {\n            addStackCap();\n            push(v);\n        }\n    }\n\n    private void addStackCap() {//扩容\n        this.capacity = this.capacity+DEFAULT_SIZE;\n        Object[] newArray = new Object[this.capacity];\n        System.arraycopy(this.array, 0, newArray, 0,this.array.length);\n        Arrays.fill(array, null);//原来的数组置空\n        this.array = newArray;\n    }\n\n    @Override\n    public int size() {\n        return this.size;\n    }\n    /**\n     * 测试栈\n     * @param args\n     */\n    public static void main(String[] args) {\n        ArrayStack<Integer> a = new ArrayStack<Integer>();\n        a.push(3);\n        a.push(5);\n        a.push(2);\n        a.push(1);\n        a.push(6);\n        System.out.println(\"栈大小:\"+a.size());\n        System.out.println(\"栈容量:\"+a.capacity);\n        System.out.println(\"栈顶元素:\"+a.peek());\n        while (!a.isEmpty()){\n            System.out.println(a.pop());\n        }\n        System.out.println(\"栈大小:\"+a.size());\n        System.out.println(\"栈容量:\"+a.capacity);\n        System.out.println(\"栈顶元素:\"+a.peek());\n        System.out.println(\"************\");\n        a.clear();\n        System.out.println(\"栈大小:\"+a.size());\n        System.out.println(\"栈容量:\"+a.capacity);\n    }\n}\n\n\ninterface StackADT<T> {\n    public void clear();\n    public boolean isEmpty();\n    public T peek();\n    public T pop();\n    public void push(T v);\n    public int size();\n}\n```\n\n### 利用LinkedList实现Stack ###\n\n```java\npublic class Stack<T> {\n    private LinkedList<T> storage = new LinkedList<T>();\n    /** 入栈 **/\n    public void push(T v){\n        storage.addFirst(v);\n    }\n    /** 出栈 **/\n    public T pop(){\n        if(isEmpty()) return null;\n        return storage.removeFirst();\n    }\n    /** 栈为空 **/\n    public boolean isEmpty() {\n        return storage.isEmpty();\n    }\n    public String toString(){\n        return storage.toString();\n    }\n    public void clear(){ storage.clear(); }\n    public static void main(String[] args) {\n        Stack stack = new Stack<String>();\n        stack.push(\"a\");\n        stack.push(\"b\");\n        stack.push(\"c\");\n        System.out.println(stack.toString());\n        Object obj = stack.pop();\n        System.out.println(obj+\"------\"+stack.toString());\n        obj = stack.pop();\n        obj = stack.pop();\n        System.out.println(obj);\n    }\n}\n```\n","source":"_posts/数据结构-Java（1）-实现Stack.md","raw":"---\ntitle: 数据结构--Java（1） 实现Stack\ndate: 2016-10-31 15:59:38\ncategories: \"Data Structure\"\ntags:\n- 学习\n---\n### 利用数组实现Stack ###\n<!-- more -->\n```java\npublic class ArrayStack<T> implements StackADT<T> {\n    private final int DEFAULT_SIZE=2;//默认大小\n    private int capacity;//栈容量\n    private int size;//栈大小\n\n    private int top;\n    private Object[] array;\n\n    public ArrayStack(){\n        this.capacity = DEFAULT_SIZE;\n        this.array = new Object[this.capacity];\n        this.size = 0;\n        System.out.println(top);\n    }\n\n    public ArrayStack(int capacity){\n        this.capacity = capacity;\n        this.array = new Object[this.capacity];\n        this.size = 0;\n    }\n    @Override\n    public void clear() {\n        Arrays.fill(this.array,null);\n        this.size = 0;\n        this.top = 0;\n        this.capacity = DEFAULT_SIZE;\n        this.array = new Object[this.capacity];\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return this.size == 0;\n    }\n\n    @Override\n    public T peek() {\n        if (isEmpty()){\n            return null;\n        }\n        return (T) this.array[this.top-1];\n\n    }\n\n    @Override\n    public T pop() {\n        T v = (T) this.array[top-1];\n        array[this.top-1] = null;\n        this.top = this.top - 1;\n        this.size--;\n        return v;\n    }\n\n    @Override\n    public void push(T v) {\n        if (this.size<this.capacity){\n            this.array[top] = v;\n            this.size++;\n            this.top++;\n        }else {\n            addStackCap();\n            push(v);\n        }\n    }\n\n    private void addStackCap() {//扩容\n        this.capacity = this.capacity+DEFAULT_SIZE;\n        Object[] newArray = new Object[this.capacity];\n        System.arraycopy(this.array, 0, newArray, 0,this.array.length);\n        Arrays.fill(array, null);//原来的数组置空\n        this.array = newArray;\n    }\n\n    @Override\n    public int size() {\n        return this.size;\n    }\n    /**\n     * 测试栈\n     * @param args\n     */\n    public static void main(String[] args) {\n        ArrayStack<Integer> a = new ArrayStack<Integer>();\n        a.push(3);\n        a.push(5);\n        a.push(2);\n        a.push(1);\n        a.push(6);\n        System.out.println(\"栈大小:\"+a.size());\n        System.out.println(\"栈容量:\"+a.capacity);\n        System.out.println(\"栈顶元素:\"+a.peek());\n        while (!a.isEmpty()){\n            System.out.println(a.pop());\n        }\n        System.out.println(\"栈大小:\"+a.size());\n        System.out.println(\"栈容量:\"+a.capacity);\n        System.out.println(\"栈顶元素:\"+a.peek());\n        System.out.println(\"************\");\n        a.clear();\n        System.out.println(\"栈大小:\"+a.size());\n        System.out.println(\"栈容量:\"+a.capacity);\n    }\n}\n\n\ninterface StackADT<T> {\n    public void clear();\n    public boolean isEmpty();\n    public T peek();\n    public T pop();\n    public void push(T v);\n    public int size();\n}\n```\n\n### 利用LinkedList实现Stack ###\n\n```java\npublic class Stack<T> {\n    private LinkedList<T> storage = new LinkedList<T>();\n    /** 入栈 **/\n    public void push(T v){\n        storage.addFirst(v);\n    }\n    /** 出栈 **/\n    public T pop(){\n        if(isEmpty()) return null;\n        return storage.removeFirst();\n    }\n    /** 栈为空 **/\n    public boolean isEmpty() {\n        return storage.isEmpty();\n    }\n    public String toString(){\n        return storage.toString();\n    }\n    public void clear(){ storage.clear(); }\n    public static void main(String[] args) {\n        Stack stack = new Stack<String>();\n        stack.push(\"a\");\n        stack.push(\"b\");\n        stack.push(\"c\");\n        System.out.println(stack.toString());\n        Object obj = stack.pop();\n        System.out.println(obj+\"------\"+stack.toString());\n        obj = stack.pop();\n        obj = stack.pop();\n        System.out.println(obj);\n    }\n}\n```\n","slug":"数据结构-Java（1）-实现Stack","published":1,"updated":"2016-11-25T14:23:52.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk001wm4qfxqo0pzh0","content":"<h3 id=\"利用数组实现Stack\"><a href=\"#利用数组实现Stack\" class=\"headerlink\" title=\"利用数组实现Stack\"></a>利用数组实现Stack</h3><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">StackADT</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_SIZE=<span class=\"number\">2</span>;<span class=\"comment\">//默认大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;<span class=\"comment\">//栈容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;<span class=\"comment\">//栈大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = DEFAULT_SIZE;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        System.out.println(top);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Arrays.fill(<span class=\"keyword\">this</span>.array,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = DEFAULT_SIZE;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">this</span>.array[<span class=\"keyword\">this</span>.top-<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T v = (T) <span class=\"keyword\">this</span>.array[top-<span class=\"number\">1</span>];</span><br><span class=\"line\">        array[<span class=\"keyword\">this</span>.top-<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.top = <span class=\"keyword\">this</span>.top - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size&lt;<span class=\"keyword\">this</span>.capacity)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.array[top] = v;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size++;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.top++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            addStackCap();</span><br><span class=\"line\">            push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addStackCap</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = <span class=\"keyword\">this</span>.capacity+DEFAULT_SIZE;</span><br><span class=\"line\">        Object[] newArray = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">        System.arraycopy(<span class=\"keyword\">this</span>.array, <span class=\"number\">0</span>, newArray, <span class=\"number\">0</span>,<span class=\"keyword\">this</span>.array.length);</span><br><span class=\"line\">        Arrays.fill(array, <span class=\"keyword\">null</span>);<span class=\"comment\">//原来的数组置空</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = newArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 测试栈</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> args</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayStack&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayStack&lt;Integer&gt;();</span><br><span class=\"line\">        a.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">5</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈大小:\"</span>+a.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈容量:\"</span>+a.capacity);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈顶元素:\"</span>+a.peek());</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!a.isEmpty())&#123;</span><br><span class=\"line\">            System.out.println(a.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈大小:\"</span>+a.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈容量:\"</span>+a.capacity);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈顶元素:\"</span>+a.peek());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"************\"</span>);</span><br><span class=\"line\">        a.clear();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈大小:\"</span>+a.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈容量:\"</span>+a.capacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StackADT</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">peek</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T v)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用LinkedList实现Stack\"><a href=\"#利用LinkedList实现Stack\" class=\"headerlink\" title=\"利用LinkedList实现Stack\"></a>利用LinkedList实现Stack</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinkedList&lt;T&gt; storage = <span class=\"keyword\">new</span> LinkedList&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/** 入栈 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T v)</span></span>&#123;</span><br><span class=\"line\">        storage.addFirst(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 出栈 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty()) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage.removeFirst();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 栈为空 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123; storage.clear(); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Stack stack = <span class=\"keyword\">new</span> Stack&lt;String&gt;();</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        System.out.println(stack.toString());</span><br><span class=\"line\">        Object obj = stack.pop();</span><br><span class=\"line\">        System.out.println(obj+<span class=\"string\">\"------\"</span>+stack.toString());</span><br><span class=\"line\">        obj = stack.pop();</span><br><span class=\"line\">        obj = stack.pop();</span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"利用数组实现Stack\"><a href=\"#利用数组实现Stack\" class=\"headerlink\" title=\"利用数组实现Stack\"></a>利用数组实现Stack</h3>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">StackADT</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_SIZE=<span class=\"number\">2</span>;<span class=\"comment\">//默认大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;<span class=\"comment\">//栈容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;<span class=\"comment\">//栈大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = DEFAULT_SIZE;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        System.out.println(top);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Arrays.fill(<span class=\"keyword\">this</span>.array,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = DEFAULT_SIZE;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">this</span>.array[<span class=\"keyword\">this</span>.top-<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T v = (T) <span class=\"keyword\">this</span>.array[top-<span class=\"number\">1</span>];</span><br><span class=\"line\">        array[<span class=\"keyword\">this</span>.top-<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.top = <span class=\"keyword\">this</span>.top - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size&lt;<span class=\"keyword\">this</span>.capacity)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.array[top] = v;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size++;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.top++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            addStackCap();</span><br><span class=\"line\">            push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addStackCap</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = <span class=\"keyword\">this</span>.capacity+DEFAULT_SIZE;</span><br><span class=\"line\">        Object[] newArray = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity];</span><br><span class=\"line\">        System.arraycopy(<span class=\"keyword\">this</span>.array, <span class=\"number\">0</span>, newArray, <span class=\"number\">0</span>,<span class=\"keyword\">this</span>.array.length);</span><br><span class=\"line\">        Arrays.fill(array, <span class=\"keyword\">null</span>);<span class=\"comment\">//原来的数组置空</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.array = newArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * 测试栈</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> args</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayStack&lt;Integer&gt; a = <span class=\"keyword\">new</span> ArrayStack&lt;Integer&gt;();</span><br><span class=\"line\">        a.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">5</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">        a.push(<span class=\"number\">6</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈大小:\"</span>+a.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈容量:\"</span>+a.capacity);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈顶元素:\"</span>+a.peek());</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!a.isEmpty())&#123;</span><br><span class=\"line\">            System.out.println(a.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈大小:\"</span>+a.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈容量:\"</span>+a.capacity);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈顶元素:\"</span>+a.peek());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"************\"</span>);</span><br><span class=\"line\">        a.clear();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈大小:\"</span>+a.size());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"栈容量:\"</span>+a.capacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StackADT</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">peek</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T v)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用LinkedList实现Stack\"><a href=\"#利用LinkedList实现Stack\" class=\"headerlink\" title=\"利用LinkedList实现Stack\"></a>利用LinkedList实现Stack</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinkedList&lt;T&gt; storage = <span class=\"keyword\">new</span> LinkedList&lt;T&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/** 入栈 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T v)</span></span>&#123;</span><br><span class=\"line\">        storage.addFirst(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 出栈 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty()) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage.removeFirst();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 栈为空 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123; storage.clear(); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Stack stack = <span class=\"keyword\">new</span> Stack&lt;String&gt;();</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        System.out.println(stack.toString());</span><br><span class=\"line\">        Object obj = stack.pop();</span><br><span class=\"line\">        System.out.println(obj+<span class=\"string\">\"------\"</span>+stack.toString());</span><br><span class=\"line\">        obj = stack.pop();</span><br><span class=\"line\">        obj = stack.pop();</span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"HashMap,Hashtable,ConcurrentHashMap,SynchronizedMap的原理与区别","date":"2016-12-07T02:28:18.000Z","_content":"## HashMap ##\n### HashMap的碰撞处理 ###\nHashMap通过hashCode()方法来确定元素存储的bucketIndex位置，不同的Key有概率hash是相同的。\n两个不同Key的hash值相同时，HashMap通过单链表方式，将新元素加入链表表头，通过next指向原有元素。\n<!-- more -->\n** 在JDK1.8版本中，只要bucket中的链表长度超过阈值（8）时，会将链表转化为红黑树**\n在JDK1.7中HashMap的put方法源码如下：\n```java\n public V put(K key, V value) {\n        ...\n        //处理Key为null\n        if (key == null)\n            return putForNullKey(value);\n        //得到key的hash码\n        int hash = hash(key);\n        //由hash码获取bucketIndex下标\n        int i = indexFor(hash, table.length);\n        //取出bucketIndex上元素，形成单链表\n        for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n            Object k;\n            //hash码相同时且对象相同时\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n                //替换旧值\n                V oldValue = e.value;\n                e.value = value;\n                e.recordAccess(this);\n                return oldValue;\n            }\n        }\n        //key不存在，加入新元素\n        modCount++;\n        addEntry(hash, key, value, i);\n        return null;\n    }\n```\n\n### 为什么HashMap线程不安全 ###\n1. 并发时，多线程同时操作使用put方法添加元素\n，如果发生碰撞，可能会导致两个值添加到同一位置，致使最终有一个值被覆盖\n2. 多线程使用HashMap进行扩容时，可能会形成循环链路，详情可以看看[Java HashMap的死循环](http://coolshell.cn/articles/9606.html)\n\n","source":"_posts/了解HashMap.md","raw":"---\ntitle: HashMap,Hashtable,ConcurrentHashMap,SynchronizedMap的原理与区别\ndate: 2016-12-07 10:28:18\ncategories: \"Java\"\ntags:\n- 学习\n---\n## HashMap ##\n### HashMap的碰撞处理 ###\nHashMap通过hashCode()方法来确定元素存储的bucketIndex位置，不同的Key有概率hash是相同的。\n两个不同Key的hash值相同时，HashMap通过单链表方式，将新元素加入链表表头，通过next指向原有元素。\n<!-- more -->\n** 在JDK1.8版本中，只要bucket中的链表长度超过阈值（8）时，会将链表转化为红黑树**\n在JDK1.7中HashMap的put方法源码如下：\n```java\n public V put(K key, V value) {\n        ...\n        //处理Key为null\n        if (key == null)\n            return putForNullKey(value);\n        //得到key的hash码\n        int hash = hash(key);\n        //由hash码获取bucketIndex下标\n        int i = indexFor(hash, table.length);\n        //取出bucketIndex上元素，形成单链表\n        for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n            Object k;\n            //hash码相同时且对象相同时\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n                //替换旧值\n                V oldValue = e.value;\n                e.value = value;\n                e.recordAccess(this);\n                return oldValue;\n            }\n        }\n        //key不存在，加入新元素\n        modCount++;\n        addEntry(hash, key, value, i);\n        return null;\n    }\n```\n\n### 为什么HashMap线程不安全 ###\n1. 并发时，多线程同时操作使用put方法添加元素\n，如果发生碰撞，可能会导致两个值添加到同一位置，致使最终有一个值被覆盖\n2. 多线程使用HashMap进行扩容时，可能会形成循环链路，详情可以看看[Java HashMap的死循环](http://coolshell.cn/articles/9606.html)\n\n","slug":"了解HashMap","published":1,"updated":"2016-12-13T13:11:35.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk0020m4qf9mr42j6e","content":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><h3 id=\"HashMap的碰撞处理\"><a href=\"#HashMap的碰撞处理\" class=\"headerlink\" title=\"HashMap的碰撞处理\"></a>HashMap的碰撞处理</h3><p>HashMap通过hashCode()方法来确定元素存储的bucketIndex位置，不同的Key有概率hash是相同的。<br>两个不同Key的hash值相同时，HashMap通过单链表方式，将新元素加入链表表头，通过next指向原有元素。<br><a id=\"more\"></a><br><strong> 在JDK1.8版本中，只要bucket中的链表长度超过阈值（8）时，会将链表转化为红黑树</strong><br>在JDK1.7中HashMap的put方法源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">       <span class=\"comment\">//处理Key为null</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> putForNullKey(value);</span><br><span class=\"line\">       <span class=\"comment\">//得到key的hash码</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">       <span class=\"comment\">//由hash码获取bucketIndex下标</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</span><br><span class=\"line\">       <span class=\"comment\">//取出bucketIndex上元素，形成单链表</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">           Object k;</span><br><span class=\"line\">           <span class=\"comment\">//hash码相同时且对象相同时</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//替换旧值</span></span><br><span class=\"line\">               V oldValue = e.value;</span><br><span class=\"line\">               e.value = value;</span><br><span class=\"line\">               e.recordAccess(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//key不存在，加入新元素</span></span><br><span class=\"line\">       modCount++;</span><br><span class=\"line\">       addEntry(hash, key, value, i);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为什么HashMap线程不安全\"><a href=\"#为什么HashMap线程不安全\" class=\"headerlink\" title=\"为什么HashMap线程不安全\"></a>为什么HashMap线程不安全</h3><ol>\n<li>并发时，多线程同时操作使用put方法添加元素<br>，如果发生碰撞，可能会导致两个值添加到同一位置，致使最终有一个值被覆盖</li>\n<li>多线程使用HashMap进行扩容时，可能会形成循环链路，详情可以看看<a href=\"http://coolshell.cn/articles/9606.html\" target=\"_blank\" rel=\"external\">Java HashMap的死循环</a></li>\n</ol>\n","excerpt":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><h3 id=\"HashMap的碰撞处理\"><a href=\"#HashMap的碰撞处理\" class=\"headerlink\" title=\"HashMap的碰撞处理\"></a>HashMap的碰撞处理</h3><p>HashMap通过hashCode()方法来确定元素存储的bucketIndex位置，不同的Key有概率hash是相同的。<br>两个不同Key的hash值相同时，HashMap通过单链表方式，将新元素加入链表表头，通过next指向原有元素。<br>","more":"<br><strong> 在JDK1.8版本中，只要bucket中的链表长度超过阈值（8）时，会将链表转化为红黑树</strong><br>在JDK1.7中HashMap的put方法源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">       <span class=\"comment\">//处理Key为null</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> putForNullKey(value);</span><br><span class=\"line\">       <span class=\"comment\">//得到key的hash码</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">       <span class=\"comment\">//由hash码获取bucketIndex下标</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</span><br><span class=\"line\">       <span class=\"comment\">//取出bucketIndex上元素，形成单链表</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">           Object k;</span><br><span class=\"line\">           <span class=\"comment\">//hash码相同时且对象相同时</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//替换旧值</span></span><br><span class=\"line\">               V oldValue = e.value;</span><br><span class=\"line\">               e.value = value;</span><br><span class=\"line\">               e.recordAccess(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//key不存在，加入新元素</span></span><br><span class=\"line\">       modCount++;</span><br><span class=\"line\">       addEntry(hash, key, value, i);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为什么HashMap线程不安全\"><a href=\"#为什么HashMap线程不安全\" class=\"headerlink\" title=\"为什么HashMap线程不安全\"></a>为什么HashMap线程不安全</h3><ol>\n<li>并发时，多线程同时操作使用put方法添加元素<br>，如果发生碰撞，可能会导致两个值添加到同一位置，致使最终有一个值被覆盖</li>\n<li>多线程使用HashMap进行扩容时，可能会形成循环链路，详情可以看看<a href=\"http://coolshell.cn/articles/9606.html\">Java HashMap的死循环</a></li>\n</ol>"},{"title":"数据结构--Java（2）实现链表","date":"2016-11-07T08:34:03.000Z","_content":"\n### 单向链表 ###\n<!-- more -->\n```python\n/**\n * Created by Administrator on 2016-11-07.\n */\npublic class LinkedList {\n    private class Node{\n        private Node next;\n        private Object obj;\n        public Node(Object obj){\n            this.obj = obj;\n        }\n    }\n\n    public Node first;\n    public int pos = 0;\n    public LinkedList(){\n        this.first = null;\n    }\n    public void addFirst(Object obj){\n        Node node = new Node(obj);\n        node.next = this.first;\n        this.first = node;\n\n    }\n    public Object delFirst() throws Exception {\n        if(isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n        Node temp = this.first;\n        this.first = temp.next;\n        return temp.obj;\n    }\n    public void add(int index, Object obj) throws Exception {\n        if (isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n\n        Node node = new Node(obj);\n        Node cur = first;\n        Node pre = first;\n        while (index != pos){\n            pre = first;\n            cur = first.next;\n            pos++;\n        }\n        node.next = cur;\n        pre.next = node;\n        pos = 0;\n    }\n    public void remove(Object obj) throws Exception {\n        if (isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n        if (first.obj.equals(obj)){\n            this.first = this.first.next;\n        }else{\n            Node pre = this.first;\n            Node cur = this.first.next;\n            while (cur != null){\n                if (cur.obj.equals(obj)){\n                    pre.next = cur.next;\n                    break;\n                }\n                pre = cur;\n                cur = cur.next;\n            }\n            if (cur == null){\n                throw new Exception(\"Not Found\");\n            }\n        }\n\n    }\n\n    public Node find(Object obj) throws Exception {\n        if (isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n        Node cur = first;\n        while(cur != null){\n            if (cur.obj.equals(obj)){\n                return cur;\n            }\n            cur = cur.next;\n        }\n        return null;\n    }\n    public boolean isEmpty(){\n        return (first == null);\n    }\n    public void display(){\n        if(first == null)\n            System.out.println(\"empty\");\n        Node cur = first;\n        while(cur != null){\n            System.out.print(cur.obj.toString() + \" -> \");\n            cur = cur.next;\n        }\n        System.out.print(\"\\n\");\n    }\n\n    public static void main(String[] args) throws Exception {\n        LinkedList ll = new LinkedList();\n        ll.addFirst(4);\n        ll.addFirst(3);\n        ll.addFirst(2);\n        ll.addFirst(1);\n        ll.display();\n        ll.delFirst();\n        ll.display();\n        ll.remove(3);\n        ll.display();\n        System.out.println(ll.find(1));\n        System.out.println(ll.find(4).obj);\n        ll.add(1,5);\n        ll.display();\n    }\n}\n\n```\n\n**out**\n>1 -> 2 -> 3 -> 4 -> \n>2 -> 3 -> 4 -> \n>2 -> 4 -> \n>null\n>4\n>2 -> 5 -> 4 -> \n\n","source":"_posts/数据结构-Java（2）实现链表.md","raw":"---\ntitle: 数据结构--Java（2）实现链表\ndate: 2016-11-07 16:34:03\ncategories: \"Data Structure\"\ntags:\n- 学习\n---\n\n### 单向链表 ###\n<!-- more -->\n```python\n/**\n * Created by Administrator on 2016-11-07.\n */\npublic class LinkedList {\n    private class Node{\n        private Node next;\n        private Object obj;\n        public Node(Object obj){\n            this.obj = obj;\n        }\n    }\n\n    public Node first;\n    public int pos = 0;\n    public LinkedList(){\n        this.first = null;\n    }\n    public void addFirst(Object obj){\n        Node node = new Node(obj);\n        node.next = this.first;\n        this.first = node;\n\n    }\n    public Object delFirst() throws Exception {\n        if(isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n        Node temp = this.first;\n        this.first = temp.next;\n        return temp.obj;\n    }\n    public void add(int index, Object obj) throws Exception {\n        if (isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n\n        Node node = new Node(obj);\n        Node cur = first;\n        Node pre = first;\n        while (index != pos){\n            pre = first;\n            cur = first.next;\n            pos++;\n        }\n        node.next = cur;\n        pre.next = node;\n        pos = 0;\n    }\n    public void remove(Object obj) throws Exception {\n        if (isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n        if (first.obj.equals(obj)){\n            this.first = this.first.next;\n        }else{\n            Node pre = this.first;\n            Node cur = this.first.next;\n            while (cur != null){\n                if (cur.obj.equals(obj)){\n                    pre.next = cur.next;\n                    break;\n                }\n                pre = cur;\n                cur = cur.next;\n            }\n            if (cur == null){\n                throw new Exception(\"Not Found\");\n            }\n        }\n\n    }\n\n    public Node find(Object obj) throws Exception {\n        if (isEmpty()){\n            throw new Exception(\"This LinkedList is empty!\");\n        }\n        Node cur = first;\n        while(cur != null){\n            if (cur.obj.equals(obj)){\n                return cur;\n            }\n            cur = cur.next;\n        }\n        return null;\n    }\n    public boolean isEmpty(){\n        return (first == null);\n    }\n    public void display(){\n        if(first == null)\n            System.out.println(\"empty\");\n        Node cur = first;\n        while(cur != null){\n            System.out.print(cur.obj.toString() + \" -> \");\n            cur = cur.next;\n        }\n        System.out.print(\"\\n\");\n    }\n\n    public static void main(String[] args) throws Exception {\n        LinkedList ll = new LinkedList();\n        ll.addFirst(4);\n        ll.addFirst(3);\n        ll.addFirst(2);\n        ll.addFirst(1);\n        ll.display();\n        ll.delFirst();\n        ll.display();\n        ll.remove(3);\n        ll.display();\n        System.out.println(ll.find(1));\n        System.out.println(ll.find(4).obj);\n        ll.add(1,5);\n        ll.display();\n    }\n}\n\n```\n\n**out**\n>1 -> 2 -> 3 -> 4 -> \n>2 -> 3 -> 4 -> \n>2 -> 4 -> \n>null\n>4\n>2 -> 5 -> 4 -> \n\n","slug":"数据结构-Java（2）实现链表","published":1,"updated":"2016-11-25T14:23:52.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk0022m4qfh51lcf2i","content":"<h3 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h3><a id=\"more\"></a>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by Administrator on 2016-11-07.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class LinkedList &#123;</span><br><span class=\"line\">    private class Node&#123;</span><br><span class=\"line\">        private Node next;</span><br><span class=\"line\">        private Object obj;</span><br><span class=\"line\">        public Node(Object obj)&#123;</span><br><span class=\"line\">            this.obj = obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Node first;</span><br><span class=\"line\">    public int pos = 0;</span><br><span class=\"line\">    public LinkedList()&#123;</span><br><span class=\"line\">        this.first = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void addFirst(Object obj)&#123;</span><br><span class=\"line\">        Node node = new Node(obj);</span><br><span class=\"line\">        node.next = this.first;</span><br><span class=\"line\">        this.first = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Object delFirst() throws Exception &#123;</span><br><span class=\"line\">        if(isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node temp = this.first;</span><br><span class=\"line\">        this.first = temp.next;</span><br><span class=\"line\">        return temp.obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void add(int index, Object obj) throws Exception &#123;</span><br><span class=\"line\">        if (isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node node = new Node(obj);</span><br><span class=\"line\">        Node cur = first;</span><br><span class=\"line\">        Node pre = first;</span><br><span class=\"line\">        while (index != pos)&#123;</span><br><span class=\"line\">            pre = first;</span><br><span class=\"line\">            cur = first.next;</span><br><span class=\"line\">            pos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.next = cur;</span><br><span class=\"line\">        pre.next = node;</span><br><span class=\"line\">        pos = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void remove(Object obj) throws Exception &#123;</span><br><span class=\"line\">        if (isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (first.obj.equals(obj))&#123;</span><br><span class=\"line\">            this.first = this.first.next;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            Node pre = this.first;</span><br><span class=\"line\">            Node cur = this.first.next;</span><br><span class=\"line\">            while (cur != null)&#123;</span><br><span class=\"line\">                if (cur.obj.equals(obj))&#123;</span><br><span class=\"line\">                    pre.next = cur.next;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pre = cur;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (cur == null)&#123;</span><br><span class=\"line\">                throw new Exception(\"Not Found\");</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Node find(Object obj) throws Exception &#123;</span><br><span class=\"line\">        if (isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node cur = first;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            if (cur.obj.equals(obj))&#123;</span><br><span class=\"line\">                return cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public boolean isEmpty()&#123;</span><br><span class=\"line\">        return (first == null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void display()&#123;</span><br><span class=\"line\">        if(first == null)</span><br><span class=\"line\">            System.out.println(\"empty\");</span><br><span class=\"line\">        Node cur = first;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            System.out.print(cur.obj.toString() + \" -&gt; \");</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(\"\\n\");</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        LinkedList ll = new LinkedList();</span><br><span class=\"line\">        ll.addFirst(4);</span><br><span class=\"line\">        ll.addFirst(3);</span><br><span class=\"line\">        ll.addFirst(2);</span><br><span class=\"line\">        ll.addFirst(1);</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">        ll.delFirst();</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">        ll.remove(3);</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">        System.out.println(ll.find(1));</span><br><span class=\"line\">        System.out.println(ll.find(4).obj);</span><br><span class=\"line\">        ll.add(1,5);</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>out</strong></p>\n<blockquote>\n<p>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt;<br>2 -&gt; 3 -&gt; 4 -&gt;<br>2 -&gt; 4 -&gt;<br>null<br>4<br>2 -&gt; 5 -&gt; 4 -&gt; </p>\n</blockquote>\n","excerpt":"<h3 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h3>","more":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by Administrator on 2016-11-07.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class LinkedList &#123;</span><br><span class=\"line\">    private class Node&#123;</span><br><span class=\"line\">        private Node next;</span><br><span class=\"line\">        private Object obj;</span><br><span class=\"line\">        public Node(Object obj)&#123;</span><br><span class=\"line\">            this.obj = obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Node first;</span><br><span class=\"line\">    public int pos = 0;</span><br><span class=\"line\">    public LinkedList()&#123;</span><br><span class=\"line\">        this.first = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void addFirst(Object obj)&#123;</span><br><span class=\"line\">        Node node = new Node(obj);</span><br><span class=\"line\">        node.next = this.first;</span><br><span class=\"line\">        this.first = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Object delFirst() throws Exception &#123;</span><br><span class=\"line\">        if(isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node temp = this.first;</span><br><span class=\"line\">        this.first = temp.next;</span><br><span class=\"line\">        return temp.obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void add(int index, Object obj) throws Exception &#123;</span><br><span class=\"line\">        if (isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node node = new Node(obj);</span><br><span class=\"line\">        Node cur = first;</span><br><span class=\"line\">        Node pre = first;</span><br><span class=\"line\">        while (index != pos)&#123;</span><br><span class=\"line\">            pre = first;</span><br><span class=\"line\">            cur = first.next;</span><br><span class=\"line\">            pos++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.next = cur;</span><br><span class=\"line\">        pre.next = node;</span><br><span class=\"line\">        pos = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void remove(Object obj) throws Exception &#123;</span><br><span class=\"line\">        if (isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (first.obj.equals(obj))&#123;</span><br><span class=\"line\">            this.first = this.first.next;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            Node pre = this.first;</span><br><span class=\"line\">            Node cur = this.first.next;</span><br><span class=\"line\">            while (cur != null)&#123;</span><br><span class=\"line\">                if (cur.obj.equals(obj))&#123;</span><br><span class=\"line\">                    pre.next = cur.next;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pre = cur;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (cur == null)&#123;</span><br><span class=\"line\">                throw new Exception(\"Not Found\");</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Node find(Object obj) throws Exception &#123;</span><br><span class=\"line\">        if (isEmpty())&#123;</span><br><span class=\"line\">            throw new Exception(\"This LinkedList is empty!\");</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node cur = first;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            if (cur.obj.equals(obj))&#123;</span><br><span class=\"line\">                return cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public boolean isEmpty()&#123;</span><br><span class=\"line\">        return (first == null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void display()&#123;</span><br><span class=\"line\">        if(first == null)</span><br><span class=\"line\">            System.out.println(\"empty\");</span><br><span class=\"line\">        Node cur = first;</span><br><span class=\"line\">        while(cur != null)&#123;</span><br><span class=\"line\">            System.out.print(cur.obj.toString() + \" -&gt; \");</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(\"\\n\");</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        LinkedList ll = new LinkedList();</span><br><span class=\"line\">        ll.addFirst(4);</span><br><span class=\"line\">        ll.addFirst(3);</span><br><span class=\"line\">        ll.addFirst(2);</span><br><span class=\"line\">        ll.addFirst(1);</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">        ll.delFirst();</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">        ll.remove(3);</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">        System.out.println(ll.find(1));</span><br><span class=\"line\">        System.out.println(ll.find(4).obj);</span><br><span class=\"line\">        ll.add(1,5);</span><br><span class=\"line\">        ll.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>out</strong></p>\n<blockquote>\n<p>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt;<br>2 -&gt; 3 -&gt; 4 -&gt;<br>2 -&gt; 4 -&gt;<br>null<br>4<br>2 -&gt; 5 -&gt; 4 -&gt; </p>\n</blockquote>"},{"title":"新的开始","date":"2016-05-01T02:59:47.000Z","visible":"hide","_content":"\n## 新的开始，建立在曾经的废墟之上 ##\n\n说来也是怪我自己脑子太二，在之前笔记本电脑内的Blog源文件没有备份就将电脑重装系统，结果就是之前的所有文章都消失得一干二净，虽然不是什么重要的文章，但毕竟是自己花心思写下的经验，丢了还是觉得蛮可惜的。所以这一次，我老老实实在GitHub上新开一个repository放我的hexo文件。以后每写一篇文章，就都要把源文件上传一次，妈妈再也不用担心换电脑没法继续写Blog了，顺带还能熟悉一些git命令，岂不美哉。\n<!-- more -->\n### 既然开了一篇杂谈，那我就再说说找工作的事吧 ###\n\n虽然没人看，但是我还是记录一下大四找工作的一些经历和体会，以后回顾的时候也能在心里啐一句：`当初怎么跟个傻子似的`。\n\n想开始找工作是在大四上的时候，虽然那个时候周围的同学都还在重复过着悠闲自在的大学生活，但是我比较杞人忧天，或许是在知乎逛多了，感觉其他大学生都屌的不行，而我以前也从未有过去实习的经历，如果还不趁着秋招公司多，到毕业时想找恐怕就难了。\n开始写简历的时候才发现，自己这四年来好像没什么好写的，一来学习成绩不怎么样，再来自己也没有参与过什么软件项目的开发，简直就只能白纸一张。想了好几个晚上，把自己大三开始所有写过的代码捋了一遍，挑了三个称的上开发的项目，然后一顿瞎掰开发过程。总算勉勉强强凑成了一页。\n接下来就是不断的参加校招，不断的递简历，不断的参加笔试面试。\n参加了几个比较有名的公司的校招，有的递完简历就了无音讯，有的参加完笔试就知道没机会了。不过在不断失败中，我还是攒到了一些经验，会针对面试公司可能出的问题进行复习。\n功夫不负有心人，虽然大公司一家都没有消息，不过海投中的一些小公司还是有给我回信。陆陆续续的面试了好几个公司，从一开始自我介绍就会声音就会发抖，到后面稍微从容的跟面试官聊一聊人生。这样的进步我觉得比我拿到offer更值得高兴。\n然后，我也收到了五个左右的offer，包括初创，电商，软件等公司，虽然大家都说在初创公司会得到很好的锻炼，但是我对自身技术水平还是不自信，怕到了初创公司会处于拖后腿的地位，考虑了很久，选择了一件面向企业的软件公司。\n工作了差不多4月，现在我也慢慢进入了社会人的角色。现在这个公司工作量不算太大，给的工资也说的过去。不过，工作内容不是自己期待中呢那样。所以，我开始思考一年以后，我该何去何从。\n\n### 对未来的展望 ###\n\n说完当下现状，就该想想以后的发展目标了。现在这个公司实在太过安逸了，每天要么处理客户问题，要么做一些重复的软件二次开发，要么就发发呆。这样让我开始担忧我的技术水平能不能在这一年有所提高，还是会比在学校更糟糕，每天下班回来基本不会再看技术书，不会在家里写一行代码。而且岗位本身就不是一个单纯的开发岗位，更像一个售后技术人员和软件定制开发人员的结合。公司同个技术小组同事虽然都很好，但是没有技术的交流，没有共同开发，大家各干各的活，这点让我很是失望。\n所以，我开始考虑明年跳槽，下一份工作，我决定去上海发展，在我们这个二流城市，互联网公司还是太少。机会感觉也不多。所以想去上海看看会不会有更多的机会。\n同时，我开始了前期的准备工作。现在做的python开发，之前在学校学的java基本上也忘了差不多，而python我也没有很深的了解，这个状态肯定无法跳槽。所以，我开始重新捡起书籍，为明年而奋斗！！\n\n","source":"_posts/新的开始.md","raw":"---\ntitle: 新的开始\ndate: 2016-05-01 10:59:47\ncategories: [半畳]\ntags: [杂谈]\nvisible: hide\n---\n\n## 新的开始，建立在曾经的废墟之上 ##\n\n说来也是怪我自己脑子太二，在之前笔记本电脑内的Blog源文件没有备份就将电脑重装系统，结果就是之前的所有文章都消失得一干二净，虽然不是什么重要的文章，但毕竟是自己花心思写下的经验，丢了还是觉得蛮可惜的。所以这一次，我老老实实在GitHub上新开一个repository放我的hexo文件。以后每写一篇文章，就都要把源文件上传一次，妈妈再也不用担心换电脑没法继续写Blog了，顺带还能熟悉一些git命令，岂不美哉。\n<!-- more -->\n### 既然开了一篇杂谈，那我就再说说找工作的事吧 ###\n\n虽然没人看，但是我还是记录一下大四找工作的一些经历和体会，以后回顾的时候也能在心里啐一句：`当初怎么跟个傻子似的`。\n\n想开始找工作是在大四上的时候，虽然那个时候周围的同学都还在重复过着悠闲自在的大学生活，但是我比较杞人忧天，或许是在知乎逛多了，感觉其他大学生都屌的不行，而我以前也从未有过去实习的经历，如果还不趁着秋招公司多，到毕业时想找恐怕就难了。\n开始写简历的时候才发现，自己这四年来好像没什么好写的，一来学习成绩不怎么样，再来自己也没有参与过什么软件项目的开发，简直就只能白纸一张。想了好几个晚上，把自己大三开始所有写过的代码捋了一遍，挑了三个称的上开发的项目，然后一顿瞎掰开发过程。总算勉勉强强凑成了一页。\n接下来就是不断的参加校招，不断的递简历，不断的参加笔试面试。\n参加了几个比较有名的公司的校招，有的递完简历就了无音讯，有的参加完笔试就知道没机会了。不过在不断失败中，我还是攒到了一些经验，会针对面试公司可能出的问题进行复习。\n功夫不负有心人，虽然大公司一家都没有消息，不过海投中的一些小公司还是有给我回信。陆陆续续的面试了好几个公司，从一开始自我介绍就会声音就会发抖，到后面稍微从容的跟面试官聊一聊人生。这样的进步我觉得比我拿到offer更值得高兴。\n然后，我也收到了五个左右的offer，包括初创，电商，软件等公司，虽然大家都说在初创公司会得到很好的锻炼，但是我对自身技术水平还是不自信，怕到了初创公司会处于拖后腿的地位，考虑了很久，选择了一件面向企业的软件公司。\n工作了差不多4月，现在我也慢慢进入了社会人的角色。现在这个公司工作量不算太大，给的工资也说的过去。不过，工作内容不是自己期待中呢那样。所以，我开始思考一年以后，我该何去何从。\n\n### 对未来的展望 ###\n\n说完当下现状，就该想想以后的发展目标了。现在这个公司实在太过安逸了，每天要么处理客户问题，要么做一些重复的软件二次开发，要么就发发呆。这样让我开始担忧我的技术水平能不能在这一年有所提高，还是会比在学校更糟糕，每天下班回来基本不会再看技术书，不会在家里写一行代码。而且岗位本身就不是一个单纯的开发岗位，更像一个售后技术人员和软件定制开发人员的结合。公司同个技术小组同事虽然都很好，但是没有技术的交流，没有共同开发，大家各干各的活，这点让我很是失望。\n所以，我开始考虑明年跳槽，下一份工作，我决定去上海发展，在我们这个二流城市，互联网公司还是太少。机会感觉也不多。所以想去上海看看会不会有更多的机会。\n同时，我开始了前期的准备工作。现在做的python开发，之前在学校学的java基本上也忘了差不多，而python我也没有很深的了解，这个状态肯定无法跳槽。所以，我开始重新捡起书籍，为明年而奋斗！！\n\n","slug":"新的开始","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk0026m4qf85lfjq7z","content":"<h2 id=\"新的开始，建立在曾经的废墟之上\"><a href=\"#新的开始，建立在曾经的废墟之上\" class=\"headerlink\" title=\"新的开始，建立在曾经的废墟之上\"></a>新的开始，建立在曾经的废墟之上</h2><p>说来也是怪我自己脑子太二，在之前笔记本电脑内的Blog源文件没有备份就将电脑重装系统，结果就是之前的所有文章都消失得一干二净，虽然不是什么重要的文章，但毕竟是自己花心思写下的经验，丢了还是觉得蛮可惜的。所以这一次，我老老实实在GitHub上新开一个repository放我的hexo文件。以后每写一篇文章，就都要把源文件上传一次，妈妈再也不用担心换电脑没法继续写Blog了，顺带还能熟悉一些git命令，岂不美哉。<br><a id=\"more\"></a></p>\n<h3 id=\"既然开了一篇杂谈，那我就再说说找工作的事吧\"><a href=\"#既然开了一篇杂谈，那我就再说说找工作的事吧\" class=\"headerlink\" title=\"既然开了一篇杂谈，那我就再说说找工作的事吧\"></a>既然开了一篇杂谈，那我就再说说找工作的事吧</h3><p>虽然没人看，但是我还是记录一下大四找工作的一些经历和体会，以后回顾的时候也能在心里啐一句：<code>当初怎么跟个傻子似的</code>。</p>\n<p>想开始找工作是在大四上的时候，虽然那个时候周围的同学都还在重复过着悠闲自在的大学生活，但是我比较杞人忧天，或许是在知乎逛多了，感觉其他大学生都屌的不行，而我以前也从未有过去实习的经历，如果还不趁着秋招公司多，到毕业时想找恐怕就难了。<br>开始写简历的时候才发现，自己这四年来好像没什么好写的，一来学习成绩不怎么样，再来自己也没有参与过什么软件项目的开发，简直就只能白纸一张。想了好几个晚上，把自己大三开始所有写过的代码捋了一遍，挑了三个称的上开发的项目，然后一顿瞎掰开发过程。总算勉勉强强凑成了一页。<br>接下来就是不断的参加校招，不断的递简历，不断的参加笔试面试。<br>参加了几个比较有名的公司的校招，有的递完简历就了无音讯，有的参加完笔试就知道没机会了。不过在不断失败中，我还是攒到了一些经验，会针对面试公司可能出的问题进行复习。<br>功夫不负有心人，虽然大公司一家都没有消息，不过海投中的一些小公司还是有给我回信。陆陆续续的面试了好几个公司，从一开始自我介绍就会声音就会发抖，到后面稍微从容的跟面试官聊一聊人生。这样的进步我觉得比我拿到offer更值得高兴。<br>然后，我也收到了五个左右的offer，包括初创，电商，软件等公司，虽然大家都说在初创公司会得到很好的锻炼，但是我对自身技术水平还是不自信，怕到了初创公司会处于拖后腿的地位，考虑了很久，选择了一件面向企业的软件公司。<br>工作了差不多4月，现在我也慢慢进入了社会人的角色。现在这个公司工作量不算太大，给的工资也说的过去。不过，工作内容不是自己期待中呢那样。所以，我开始思考一年以后，我该何去何从。</p>\n<h3 id=\"对未来的展望\"><a href=\"#对未来的展望\" class=\"headerlink\" title=\"对未来的展望\"></a>对未来的展望</h3><p>说完当下现状，就该想想以后的发展目标了。现在这个公司实在太过安逸了，每天要么处理客户问题，要么做一些重复的软件二次开发，要么就发发呆。这样让我开始担忧我的技术水平能不能在这一年有所提高，还是会比在学校更糟糕，每天下班回来基本不会再看技术书，不会在家里写一行代码。而且岗位本身就不是一个单纯的开发岗位，更像一个售后技术人员和软件定制开发人员的结合。公司同个技术小组同事虽然都很好，但是没有技术的交流，没有共同开发，大家各干各的活，这点让我很是失望。<br>所以，我开始考虑明年跳槽，下一份工作，我决定去上海发展，在我们这个二流城市，互联网公司还是太少。机会感觉也不多。所以想去上海看看会不会有更多的机会。<br>同时，我开始了前期的准备工作。现在做的python开发，之前在学校学的java基本上也忘了差不多，而python我也没有很深的了解，这个状态肯定无法跳槽。所以，我开始重新捡起书籍，为明年而奋斗！！</p>\n","excerpt":"<h2 id=\"新的开始，建立在曾经的废墟之上\"><a href=\"#新的开始，建立在曾经的废墟之上\" class=\"headerlink\" title=\"新的开始，建立在曾经的废墟之上\"></a>新的开始，建立在曾经的废墟之上</h2><p>说来也是怪我自己脑子太二，在之前笔记本电脑内的Blog源文件没有备份就将电脑重装系统，结果就是之前的所有文章都消失得一干二净，虽然不是什么重要的文章，但毕竟是自己花心思写下的经验，丢了还是觉得蛮可惜的。所以这一次，我老老实实在GitHub上新开一个repository放我的hexo文件。以后每写一篇文章，就都要把源文件上传一次，妈妈再也不用担心换电脑没法继续写Blog了，顺带还能熟悉一些git命令，岂不美哉。<br>","more":"</p>\n<h3 id=\"既然开了一篇杂谈，那我就再说说找工作的事吧\"><a href=\"#既然开了一篇杂谈，那我就再说说找工作的事吧\" class=\"headerlink\" title=\"既然开了一篇杂谈，那我就再说说找工作的事吧\"></a>既然开了一篇杂谈，那我就再说说找工作的事吧</h3><p>虽然没人看，但是我还是记录一下大四找工作的一些经历和体会，以后回顾的时候也能在心里啐一句：<code>当初怎么跟个傻子似的</code>。</p>\n<p>想开始找工作是在大四上的时候，虽然那个时候周围的同学都还在重复过着悠闲自在的大学生活，但是我比较杞人忧天，或许是在知乎逛多了，感觉其他大学生都屌的不行，而我以前也从未有过去实习的经历，如果还不趁着秋招公司多，到毕业时想找恐怕就难了。<br>开始写简历的时候才发现，自己这四年来好像没什么好写的，一来学习成绩不怎么样，再来自己也没有参与过什么软件项目的开发，简直就只能白纸一张。想了好几个晚上，把自己大三开始所有写过的代码捋了一遍，挑了三个称的上开发的项目，然后一顿瞎掰开发过程。总算勉勉强强凑成了一页。<br>接下来就是不断的参加校招，不断的递简历，不断的参加笔试面试。<br>参加了几个比较有名的公司的校招，有的递完简历就了无音讯，有的参加完笔试就知道没机会了。不过在不断失败中，我还是攒到了一些经验，会针对面试公司可能出的问题进行复习。<br>功夫不负有心人，虽然大公司一家都没有消息，不过海投中的一些小公司还是有给我回信。陆陆续续的面试了好几个公司，从一开始自我介绍就会声音就会发抖，到后面稍微从容的跟面试官聊一聊人生。这样的进步我觉得比我拿到offer更值得高兴。<br>然后，我也收到了五个左右的offer，包括初创，电商，软件等公司，虽然大家都说在初创公司会得到很好的锻炼，但是我对自身技术水平还是不自信，怕到了初创公司会处于拖后腿的地位，考虑了很久，选择了一件面向企业的软件公司。<br>工作了差不多4月，现在我也慢慢进入了社会人的角色。现在这个公司工作量不算太大，给的工资也说的过去。不过，工作内容不是自己期待中呢那样。所以，我开始思考一年以后，我该何去何从。</p>\n<h3 id=\"对未来的展望\"><a href=\"#对未来的展望\" class=\"headerlink\" title=\"对未来的展望\"></a>对未来的展望</h3><p>说完当下现状，就该想想以后的发展目标了。现在这个公司实在太过安逸了，每天要么处理客户问题，要么做一些重复的软件二次开发，要么就发发呆。这样让我开始担忧我的技术水平能不能在这一年有所提高，还是会比在学校更糟糕，每天下班回来基本不会再看技术书，不会在家里写一行代码。而且岗位本身就不是一个单纯的开发岗位，更像一个售后技术人员和软件定制开发人员的结合。公司同个技术小组同事虽然都很好，但是没有技术的交流，没有共同开发，大家各干各的活，这点让我很是失望。<br>所以，我开始考虑明年跳槽，下一份工作，我决定去上海发展，在我们这个二流城市，互联网公司还是太少。机会感觉也不多。所以想去上海看看会不会有更多的机会。<br>同时，我开始了前期的准备工作。现在做的python开发，之前在学校学的java基本上也忘了差不多，而python我也没有很深的了解，这个状态肯定无法跳槽。所以，我开始重新捡起书籍，为明年而奋斗！！</p>"},{"title":"离线安装VMWare Tools","date":"2016-12-19T08:26:33.000Z","_content":"[VMWare Tools](http://softwareupdate.vmware.com/cds/vmw-desktop/ws/11.0.0/2305329/windows/packages/)\n\n### 解压tools文件 ###\n\n`win+R`打开运行窗口,解压exe文件\n> ..\\tools-windows-*.exe /e .\\\n解压成iso文件\n> msiexec /a \"..\\tools-windows.msi\" /qb TARGETDIR=\".\\\"\n \n虚拟机加载iso即可安装VMWare Tools\n","source":"_posts/离线安装WMWare-Tools.md","raw":"---\ntitle: 离线安装VMWare Tools\ndate: 2016-12-19 16:26:33\ncategories: \"工具配置\"\ntags:\n- WMWare\n---\n[VMWare Tools](http://softwareupdate.vmware.com/cds/vmw-desktop/ws/11.0.0/2305329/windows/packages/)\n\n### 解压tools文件 ###\n\n`win+R`打开运行窗口,解压exe文件\n> ..\\tools-windows-*.exe /e .\\\n解压成iso文件\n> msiexec /a \"..\\tools-windows.msi\" /qb TARGETDIR=\".\\\"\n \n虚拟机加载iso即可安装VMWare Tools\n","slug":"离线安装WMWare-Tools","published":1,"updated":"2017-01-02T05:29:23.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk0029m4qf2qodnm82","content":"<p><a href=\"http://softwareupdate.vmware.com/cds/vmw-desktop/ws/11.0.0/2305329/windows/packages/\" target=\"_blank\" rel=\"external\">VMWare Tools</a></p>\n<h3 id=\"解压tools文件\"><a href=\"#解压tools文件\" class=\"headerlink\" title=\"解压tools文件\"></a>解压tools文件</h3><p><code>win+R</code>打开运行窗口,解压exe文件</p>\n<blockquote>\n<p>..\\tools-windows-*.exe /e .\\<br>解压成iso文件<br>msiexec /a “..\\tools-windows.msi” /qb TARGETDIR=”.\\”</p>\n</blockquote>\n<p>虚拟机加载iso即可安装VMWare Tools</p>\n","excerpt":"","more":"<p><a href=\"http://softwareupdate.vmware.com/cds/vmw-desktop/ws/11.0.0/2305329/windows/packages/\">VMWare Tools</a></p>\n<h3 id=\"解压tools文件\"><a href=\"#解压tools文件\" class=\"headerlink\" title=\"解压tools文件\"></a>解压tools文件</h3><p><code>win+R</code>打开运行窗口,解压exe文件</p>\n<blockquote>\n<p>..\\tools-windows-*.exe /e .\\<br>解压成iso文件<br>msiexec /a “..\\tools-windows.msi” /qb TARGETDIR=”.\\”</p>\n</blockquote>\n<p>虚拟机加载iso即可安装VMWare Tools</p>\n"},{"title":"编写一个Chrome extension--网页二维码生成","date":"2016-12-13T14:11:33.000Z","_content":"> 很早之前就想过要用Chrome扩展开发一些实用的，或者有意思扩展。今天在看了`segmentfault`的技术周刊后，决定先按照别人写过的东西去~~抄一遍~~模仿的做一遍。\n\n本篇文章是看了[从小目标开始，编写一个简洁的二维码chrome扩展](https://segmentfault.com/a/1190000007594008)模仿的。这篇文章写得很详细。我主要写写自己模仿过程中的一些问题。\n<!-- more -->\n## Chrome extension基础 ##\n编写Chrome 扩展之前我们需要大致的了解一下Google提供的开发文档。鉴于我可怜的英文水平，我推荐花几分钟看一下下面的文档：\n1. [360翻译的官方API文档](http://open.chrome.360.cn/extension_dev/overview.html)\n2. [Chrome扩展及应用开发](http://www.ituring.com.cn/minibook/950) ←这本书不仅介绍API用法，还提供了好多实例。\n\n\n## 编写过程 ##\n有了上面几分钟的基础后，我们可以开始正式编写代码了。创建一个文件夹，将扩展所创建的文件都放在里面，方便完成后打包。\n### 首先编写`manifest.json` ###\n这是所有扩展的入口文件。看到后缀我们就知道这文件的语法结构必须符合json的写法。Chrome 扩展必须包含的属性有`name`、`version`、`manifest_version`。其他可选属性包括：`background`、`permissions`、`browser_action`、`page_action`、`options_page`、`content_scripts`等等。\n```javascript\n{\n    //目前Chrome版本为2\n    \"manifest_version\": 2,\n    //扩展名称\n    \"name\": \"QRcode\",\n    //扩展版本，可自定义\n    \"version\": \"1.0\",\n    //扩展描述，显示在扩展程序中\n    \"description\": \"简洁的二维码生成器\",\n    //显示在扩展程序中的图标\n    \"icons\": {\n        \"16\": \"images/icon16.png\",\n        \"128\": \"images/icon128.png\"\n    },\n    //权限声明\n    \"permissions\":[\"tabs\"]\n}\n```\n### 接下来就要编写扩展弹出页面`popup.html`文件 ###\npopup页面在被用户点击时初始化，关闭后就会销毁。所以该页面更多的是用来展示结果的。数据处理则需要`background`这个属性来声明，这里暂时没用到就不多说了。需要注意的是，应该用css指定popup页面大小。另外，Google不允许HTML和JavaScript混写在同一个文件内。所有我们把相应的JS提出来，在HTML中添加外部引用。\n```html\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<style type=\"text/css\">\n    .box {\n        height: 200px;\n        width: 200px;\n        background: #EEE;\n    }\n    .box .title{\n        text-align: center;\n        margin-bottom: 10px;\n    }\n</style>\n<body>\n<div class=\"box\">\n    <div class=\"title\">扫描二维码浏览本页面</div>\n    <center>\n    <div class=\"qrcode\" id=\"qrcode\"></div>\n    </center>\n</div>\n<script src=\"js/qrcode.js\" type=\"text/javascript\"></script>\n<script src=\"js/popup.js\" type=\"text/javascript\"></script>\n</body>\n</html>\n```\n\n### 编写相应的`popup.js`文件 ###\n`chrome.tabs`这个API可以与浏览器的标签页系统进行交互。具体API说明参考[标签--扩展开发文档](http://open.chrome.360.cn/extension_dev/tabs.html)\n通过获取到的标签页url传给[QRCode](http://code.ciaoca.com/javascript/qrcode/)。通过`QRCode.js`生成二维码。\n```javascript\nonload=function(){\n  chrome.tabs.getSelected(function(tab){\n      //QRCode(元素id,相关配置文件)\n      var qrcode = new QRCode(\"qrcode\", {\n              text: tab.url,\n              width: 160,\n              height: 160,\n              colorDark : '#000000',\n              colorLight : '#ffffff',\n              // QRCode的容错级别\n              correctLevel : QRCode.CorrectLevel.H\n            });\n    console.log(qrcode);\n  });\n}\n```\n到目前为止，一个简单的QRCode生成器边完成了。\n![加载自定义插件](http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode01.png)\n![QRCode](http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode02.png)\n\n## 后续 ##\n\n如果想让二维码中间位置显示自定义图片(如上图)，那么只需要在popup页面自定义一段CSS即可。\n### 修改`popup.html`文件 ###\n```html\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<style type=\"text/css\">\n    .box {\n        height: 200px;\n        width: 200px;\n        background: #EEE;\n        position: relative;\n    }\n    .box .title{\n        text-align: center;\n        margin-bottom: 10px;\n    }\n    .box .qrcode{\n        width: 100%;\n        height: 100%;\n        position: absolute;\n    }\n    .box .logo {\n          top: 80px;\n          left: 80px;\n          width: 40px;\n          height: 40px;\n          position: absolute;\n\n    }\n</style>\n<body>\n<div class=\"box\">\n    <div class=\"title\">扫描二维码浏览本页面</div>\n    <center>\n    <div class=\"qrcode\" id=\"qrcode\"></div>\n    <div class='logo'>\n    <img src=\"http://amoyiki.github.io/images/avatar.jpg\" width=\"40\" height=\"40\"/>\n    </div>\n    </center>\n</div>\n<script src=\"js/qrcode.js\" type=\"text/javascript\"></script>\n<script src=\"js/popup.js\" type=\"text/javascript\"></script>\n</body>\n</html>\n```\n\n### 动态获取网页icon ###\n如果想让icon图标随着每个网站不同的icon进行变动的话，就只要利用`tab`的`favIconUrl`属性就能得到标签页面的图标url地址,改动如下\n```javascript\nonload=function(){\n  chrome.tabs.getSelected(function(tab){\n      //QRCode(元素id,相关配置文件)\n      var qrcode = new QRCode(\"qrcode\", {\n              text: tab.url,\n              width: 160,\n              height: 160,\n              colorDark : '#000000',\n              colorLight : '#ffffff',\n              // QRCode的容错级别\n              correctLevel : QRCode.CorrectLevel.H\n            });\n    if (tab.favIconUrl) {//tab有图标的情况下动态赋值\n      var img = document.getElementsByTagName(\"img\")[1].src = tab.favIconUrl;\n    }\n    console.log(img);\n  });\n}\n```\n详细代码可以查看[github源码地址](https://github.com/amoyiki/LearnedAndProTest/tree/master/QRCode)\n","source":"_posts/编写一个Chrome-extension-网页二维码生成.md","raw":"---\ntitle: 编写一个Chrome extension--网页二维码生成\ndate: 2016-12-13 22:11:33\ncategories: \"Chrome extension\"\ntags:\n---\n> 很早之前就想过要用Chrome扩展开发一些实用的，或者有意思扩展。今天在看了`segmentfault`的技术周刊后，决定先按照别人写过的东西去~~抄一遍~~模仿的做一遍。\n\n本篇文章是看了[从小目标开始，编写一个简洁的二维码chrome扩展](https://segmentfault.com/a/1190000007594008)模仿的。这篇文章写得很详细。我主要写写自己模仿过程中的一些问题。\n<!-- more -->\n## Chrome extension基础 ##\n编写Chrome 扩展之前我们需要大致的了解一下Google提供的开发文档。鉴于我可怜的英文水平，我推荐花几分钟看一下下面的文档：\n1. [360翻译的官方API文档](http://open.chrome.360.cn/extension_dev/overview.html)\n2. [Chrome扩展及应用开发](http://www.ituring.com.cn/minibook/950) ←这本书不仅介绍API用法，还提供了好多实例。\n\n\n## 编写过程 ##\n有了上面几分钟的基础后，我们可以开始正式编写代码了。创建一个文件夹，将扩展所创建的文件都放在里面，方便完成后打包。\n### 首先编写`manifest.json` ###\n这是所有扩展的入口文件。看到后缀我们就知道这文件的语法结构必须符合json的写法。Chrome 扩展必须包含的属性有`name`、`version`、`manifest_version`。其他可选属性包括：`background`、`permissions`、`browser_action`、`page_action`、`options_page`、`content_scripts`等等。\n```javascript\n{\n    //目前Chrome版本为2\n    \"manifest_version\": 2,\n    //扩展名称\n    \"name\": \"QRcode\",\n    //扩展版本，可自定义\n    \"version\": \"1.0\",\n    //扩展描述，显示在扩展程序中\n    \"description\": \"简洁的二维码生成器\",\n    //显示在扩展程序中的图标\n    \"icons\": {\n        \"16\": \"images/icon16.png\",\n        \"128\": \"images/icon128.png\"\n    },\n    //权限声明\n    \"permissions\":[\"tabs\"]\n}\n```\n### 接下来就要编写扩展弹出页面`popup.html`文件 ###\npopup页面在被用户点击时初始化，关闭后就会销毁。所以该页面更多的是用来展示结果的。数据处理则需要`background`这个属性来声明，这里暂时没用到就不多说了。需要注意的是，应该用css指定popup页面大小。另外，Google不允许HTML和JavaScript混写在同一个文件内。所有我们把相应的JS提出来，在HTML中添加外部引用。\n```html\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<style type=\"text/css\">\n    .box {\n        height: 200px;\n        width: 200px;\n        background: #EEE;\n    }\n    .box .title{\n        text-align: center;\n        margin-bottom: 10px;\n    }\n</style>\n<body>\n<div class=\"box\">\n    <div class=\"title\">扫描二维码浏览本页面</div>\n    <center>\n    <div class=\"qrcode\" id=\"qrcode\"></div>\n    </center>\n</div>\n<script src=\"js/qrcode.js\" type=\"text/javascript\"></script>\n<script src=\"js/popup.js\" type=\"text/javascript\"></script>\n</body>\n</html>\n```\n\n### 编写相应的`popup.js`文件 ###\n`chrome.tabs`这个API可以与浏览器的标签页系统进行交互。具体API说明参考[标签--扩展开发文档](http://open.chrome.360.cn/extension_dev/tabs.html)\n通过获取到的标签页url传给[QRCode](http://code.ciaoca.com/javascript/qrcode/)。通过`QRCode.js`生成二维码。\n```javascript\nonload=function(){\n  chrome.tabs.getSelected(function(tab){\n      //QRCode(元素id,相关配置文件)\n      var qrcode = new QRCode(\"qrcode\", {\n              text: tab.url,\n              width: 160,\n              height: 160,\n              colorDark : '#000000',\n              colorLight : '#ffffff',\n              // QRCode的容错级别\n              correctLevel : QRCode.CorrectLevel.H\n            });\n    console.log(qrcode);\n  });\n}\n```\n到目前为止，一个简单的QRCode生成器边完成了。\n![加载自定义插件](http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode01.png)\n![QRCode](http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode02.png)\n\n## 后续 ##\n\n如果想让二维码中间位置显示自定义图片(如上图)，那么只需要在popup页面自定义一段CSS即可。\n### 修改`popup.html`文件 ###\n```html\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<style type=\"text/css\">\n    .box {\n        height: 200px;\n        width: 200px;\n        background: #EEE;\n        position: relative;\n    }\n    .box .title{\n        text-align: center;\n        margin-bottom: 10px;\n    }\n    .box .qrcode{\n        width: 100%;\n        height: 100%;\n        position: absolute;\n    }\n    .box .logo {\n          top: 80px;\n          left: 80px;\n          width: 40px;\n          height: 40px;\n          position: absolute;\n\n    }\n</style>\n<body>\n<div class=\"box\">\n    <div class=\"title\">扫描二维码浏览本页面</div>\n    <center>\n    <div class=\"qrcode\" id=\"qrcode\"></div>\n    <div class='logo'>\n    <img src=\"http://amoyiki.github.io/images/avatar.jpg\" width=\"40\" height=\"40\"/>\n    </div>\n    </center>\n</div>\n<script src=\"js/qrcode.js\" type=\"text/javascript\"></script>\n<script src=\"js/popup.js\" type=\"text/javascript\"></script>\n</body>\n</html>\n```\n\n### 动态获取网页icon ###\n如果想让icon图标随着每个网站不同的icon进行变动的话，就只要利用`tab`的`favIconUrl`属性就能得到标签页面的图标url地址,改动如下\n```javascript\nonload=function(){\n  chrome.tabs.getSelected(function(tab){\n      //QRCode(元素id,相关配置文件)\n      var qrcode = new QRCode(\"qrcode\", {\n              text: tab.url,\n              width: 160,\n              height: 160,\n              colorDark : '#000000',\n              colorLight : '#ffffff',\n              // QRCode的容错级别\n              correctLevel : QRCode.CorrectLevel.H\n            });\n    if (tab.favIconUrl) {//tab有图标的情况下动态赋值\n      var img = document.getElementsByTagName(\"img\")[1].src = tab.favIconUrl;\n    }\n    console.log(img);\n  });\n}\n```\n详细代码可以查看[github源码地址](https://github.com/amoyiki/LearnedAndProTest/tree/master/QRCode)\n","slug":"编写一个Chrome-extension-网页二维码生成","published":1,"updated":"2016-12-14T14:08:18.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk002dm4qf8harf0ev","content":"<blockquote>\n<p>很早之前就想过要用Chrome扩展开发一些实用的，或者有意思扩展。今天在看了<code>segmentfault</code>的技术周刊后，决定先按照别人写过的东西去<del>抄一遍</del>模仿的做一遍。</p>\n</blockquote>\n<p>本篇文章是看了<a href=\"https://segmentfault.com/a/1190000007594008\" target=\"_blank\" rel=\"external\">从小目标开始，编写一个简洁的二维码chrome扩展</a>模仿的。这篇文章写得很详细。我主要写写自己模仿过程中的一些问题。<br><a id=\"more\"></a></p>\n<h2 id=\"Chrome-extension基础\"><a href=\"#Chrome-extension基础\" class=\"headerlink\" title=\"Chrome extension基础\"></a>Chrome extension基础</h2><p>编写Chrome 扩展之前我们需要大致的了解一下Google提供的开发文档。鉴于我可怜的英文水平，我推荐花几分钟看一下下面的文档：</p>\n<ol>\n<li><a href=\"http://open.chrome.360.cn/extension_dev/overview.html\" target=\"_blank\" rel=\"external\">360翻译的官方API文档</a></li>\n<li><a href=\"http://www.ituring.com.cn/minibook/950\" target=\"_blank\" rel=\"external\">Chrome扩展及应用开发</a> ←这本书不仅介绍API用法，还提供了好多实例。</li>\n</ol>\n<h2 id=\"编写过程\"><a href=\"#编写过程\" class=\"headerlink\" title=\"编写过程\"></a>编写过程</h2><p>有了上面几分钟的基础后，我们可以开始正式编写代码了。创建一个文件夹，将扩展所创建的文件都放在里面，方便完成后打包。</p>\n<h3 id=\"首先编写manifest-json\"><a href=\"#首先编写manifest-json\" class=\"headerlink\" title=\"首先编写manifest.json\"></a>首先编写<code>manifest.json</code></h3><p>这是所有扩展的入口文件。看到后缀我们就知道这文件的语法结构必须符合json的写法。Chrome 扩展必须包含的属性有<code>name</code>、<code>version</code>、<code>manifest_version</code>。其他可选属性包括：<code>background</code>、<code>permissions</code>、<code>browser_action</code>、<code>page_action</code>、<code>options_page</code>、<code>content_scripts</code>等等。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//目前Chrome版本为2</span></span><br><span class=\"line\">    <span class=\"string\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"comment\">//扩展名称</span></span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"QRcode\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//扩展版本，可自定义</span></span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//扩展描述，显示在扩展程序中</span></span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"简洁的二维码生成器\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//显示在扩展程序中的图标</span></span><br><span class=\"line\">    <span class=\"string\">\"icons\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"16\"</span>: <span class=\"string\">\"images/icon16.png\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"128\"</span>: <span class=\"string\">\"images/icon128.png\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//权限声明</span></span><br><span class=\"line\">    <span class=\"string\">\"permissions\"</span>:[<span class=\"string\">\"tabs\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"接下来就要编写扩展弹出页面popup-html文件\"><a href=\"#接下来就要编写扩展弹出页面popup-html文件\" class=\"headerlink\" title=\"接下来就要编写扩展弹出页面popup.html文件\"></a>接下来就要编写扩展弹出页面<code>popup.html</code>文件</h3><p>popup页面在被用户点击时初始化，关闭后就会销毁。所以该页面更多的是用来展示结果的。数据处理则需要<code>background</code>这个属性来声明，这里暂时没用到就不多说了。需要注意的是，应该用css指定popup页面大小。另外，Google不允许HTML和JavaScript混写在同一个文件内。所有我们把相应的JS提出来，在HTML中添加外部引用。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: #EEE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .title&#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>扫描二维码浏览本页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/qrcode.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/popup.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写相应的popup-js文件\"><a href=\"#编写相应的popup-js文件\" class=\"headerlink\" title=\"编写相应的popup.js文件\"></a>编写相应的<code>popup.js</code>文件</h3><p><code>chrome.tabs</code>这个API可以与浏览器的标签页系统进行交互。具体API说明参考<a href=\"http://open.chrome.360.cn/extension_dev/tabs.html\" target=\"_blank\" rel=\"external\">标签–扩展开发文档</a><br>通过获取到的标签页url传给<a href=\"http://code.ciaoca.com/javascript/qrcode/\" target=\"_blank\" rel=\"external\">QRCode</a>。通过<code>QRCode.js</code>生成二维码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  chrome.tabs.getSelected(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tab</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//QRCode(元素id,相关配置文件)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> qrcode = <span class=\"keyword\">new</span> QRCode(<span class=\"string\">\"qrcode\"</span>, &#123;</span><br><span class=\"line\">              text: tab.url,</span><br><span class=\"line\">              width: <span class=\"number\">160</span>,</span><br><span class=\"line\">              height: <span class=\"number\">160</span>,</span><br><span class=\"line\">              colorDark : <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">              colorLight : <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">              <span class=\"comment\">// QRCode的容错级别</span></span><br><span class=\"line\">              correctLevel : QRCode.CorrectLevel.H</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(qrcode);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到目前为止，一个简单的QRCode生成器边完成了。<br><img src=\"http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode01.png\" alt=\"加载自定义插件\"><br><img src=\"http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode02.png\" alt=\"QRCode\"></p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>如果想让二维码中间位置显示自定义图片(如上图)，那么只需要在popup页面自定义一段CSS即可。</p>\n<h3 id=\"修改popup-html文件\"><a href=\"#修改popup-html文件\" class=\"headerlink\" title=\"修改popup.html文件\"></a>修改<code>popup.html</code>文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: #EEE;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .title&#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .qrcode&#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .logo &#123;</span><br><span class=\"line\">          top: 80px;</span><br><span class=\"line\">          left: 80px;</span><br><span class=\"line\">          width: 40px;</span><br><span class=\"line\">          height: 40px;</span><br><span class=\"line\">          position: absolute;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>扫描二维码浏览本页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'logo'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://amoyiki.github.io/images/avatar.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"40\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/qrcode.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/popup.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动态获取网页icon\"><a href=\"#动态获取网页icon\" class=\"headerlink\" title=\"动态获取网页icon\"></a>动态获取网页icon</h3><p>如果想让icon图标随着每个网站不同的icon进行变动的话，就只要利用<code>tab</code>的<code>favIconUrl</code>属性就能得到标签页面的图标url地址,改动如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  chrome.tabs.getSelected(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tab</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//QRCode(元素id,相关配置文件)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> qrcode = <span class=\"keyword\">new</span> QRCode(<span class=\"string\">\"qrcode\"</span>, &#123;</span><br><span class=\"line\">              text: tab.url,</span><br><span class=\"line\">              width: <span class=\"number\">160</span>,</span><br><span class=\"line\">              height: <span class=\"number\">160</span>,</span><br><span class=\"line\">              colorDark : <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">              colorLight : <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">              <span class=\"comment\">// QRCode的容错级别</span></span><br><span class=\"line\">              correctLevel : QRCode.CorrectLevel.H</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab.favIconUrl) &#123;<span class=\"comment\">//tab有图标的情况下动态赋值</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"img\"</span>)[<span class=\"number\">1</span>].src = tab.favIconUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(img);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>详细代码可以查看<a href=\"https://github.com/amoyiki/LearnedAndProTest/tree/master/QRCode\" target=\"_blank\" rel=\"external\">github源码地址</a></p>\n","excerpt":"<blockquote>\n<p>很早之前就想过要用Chrome扩展开发一些实用的，或者有意思扩展。今天在看了<code>segmentfault</code>的技术周刊后，决定先按照别人写过的东西去<del>抄一遍</del>模仿的做一遍。</p>\n</blockquote>\n<p>本篇文章是看了<a href=\"https://segmentfault.com/a/1190000007594008\">从小目标开始，编写一个简洁的二维码chrome扩展</a>模仿的。这篇文章写得很详细。我主要写写自己模仿过程中的一些问题。<br>","more":"</p>\n<h2 id=\"Chrome-extension基础\"><a href=\"#Chrome-extension基础\" class=\"headerlink\" title=\"Chrome extension基础\"></a>Chrome extension基础</h2><p>编写Chrome 扩展之前我们需要大致的了解一下Google提供的开发文档。鉴于我可怜的英文水平，我推荐花几分钟看一下下面的文档：</p>\n<ol>\n<li><a href=\"http://open.chrome.360.cn/extension_dev/overview.html\">360翻译的官方API文档</a></li>\n<li><a href=\"http://www.ituring.com.cn/minibook/950\">Chrome扩展及应用开发</a> ←这本书不仅介绍API用法，还提供了好多实例。</li>\n</ol>\n<h2 id=\"编写过程\"><a href=\"#编写过程\" class=\"headerlink\" title=\"编写过程\"></a>编写过程</h2><p>有了上面几分钟的基础后，我们可以开始正式编写代码了。创建一个文件夹，将扩展所创建的文件都放在里面，方便完成后打包。</p>\n<h3 id=\"首先编写manifest-json\"><a href=\"#首先编写manifest-json\" class=\"headerlink\" title=\"首先编写manifest.json\"></a>首先编写<code>manifest.json</code></h3><p>这是所有扩展的入口文件。看到后缀我们就知道这文件的语法结构必须符合json的写法。Chrome 扩展必须包含的属性有<code>name</code>、<code>version</code>、<code>manifest_version</code>。其他可选属性包括：<code>background</code>、<code>permissions</code>、<code>browser_action</code>、<code>page_action</code>、<code>options_page</code>、<code>content_scripts</code>等等。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//目前Chrome版本为2</span></span><br><span class=\"line\">    <span class=\"string\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"comment\">//扩展名称</span></span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"QRcode\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//扩展版本，可自定义</span></span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//扩展描述，显示在扩展程序中</span></span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"简洁的二维码生成器\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">//显示在扩展程序中的图标</span></span><br><span class=\"line\">    <span class=\"string\">\"icons\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"16\"</span>: <span class=\"string\">\"images/icon16.png\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"128\"</span>: <span class=\"string\">\"images/icon128.png\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//权限声明</span></span><br><span class=\"line\">    <span class=\"string\">\"permissions\"</span>:[<span class=\"string\">\"tabs\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"接下来就要编写扩展弹出页面popup-html文件\"><a href=\"#接下来就要编写扩展弹出页面popup-html文件\" class=\"headerlink\" title=\"接下来就要编写扩展弹出页面popup.html文件\"></a>接下来就要编写扩展弹出页面<code>popup.html</code>文件</h3><p>popup页面在被用户点击时初始化，关闭后就会销毁。所以该页面更多的是用来展示结果的。数据处理则需要<code>background</code>这个属性来声明，这里暂时没用到就不多说了。需要注意的是，应该用css指定popup页面大小。另外，Google不允许HTML和JavaScript混写在同一个文件内。所有我们把相应的JS提出来，在HTML中添加外部引用。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: #EEE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .title&#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>扫描二维码浏览本页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/qrcode.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/popup.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"编写相应的popup-js文件\"><a href=\"#编写相应的popup-js文件\" class=\"headerlink\" title=\"编写相应的popup.js文件\"></a>编写相应的<code>popup.js</code>文件</h3><p><code>chrome.tabs</code>这个API可以与浏览器的标签页系统进行交互。具体API说明参考<a href=\"http://open.chrome.360.cn/extension_dev/tabs.html\">标签–扩展开发文档</a><br>通过获取到的标签页url传给<a href=\"http://code.ciaoca.com/javascript/qrcode/\">QRCode</a>。通过<code>QRCode.js</code>生成二维码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  chrome.tabs.getSelected(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tab</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//QRCode(元素id,相关配置文件)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> qrcode = <span class=\"keyword\">new</span> QRCode(<span class=\"string\">\"qrcode\"</span>, &#123;</span><br><span class=\"line\">              text: tab.url,</span><br><span class=\"line\">              width: <span class=\"number\">160</span>,</span><br><span class=\"line\">              height: <span class=\"number\">160</span>,</span><br><span class=\"line\">              colorDark : <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">              colorLight : <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">              <span class=\"comment\">// QRCode的容错级别</span></span><br><span class=\"line\">              correctLevel : QRCode.CorrectLevel.H</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(qrcode);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到目前为止，一个简单的QRCode生成器边完成了。<br><img src=\"http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode01.png\" alt=\"加载自定义插件\"><br><img src=\"http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode02.png\" alt=\"QRCode\"></p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>如果想让二维码中间位置显示自定义图片(如上图)，那么只需要在popup页面自定义一段CSS即可。</p>\n<h3 id=\"修改popup-html文件\"><a href=\"#修改popup-html文件\" class=\"headerlink\" title=\"修改popup.html文件\"></a>修改<code>popup.html</code>文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span><br><span class=\"line\">    .box &#123;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        background: #EEE;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .title&#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .qrcode&#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .box .logo &#123;</span><br><span class=\"line\">          top: 80px;</span><br><span class=\"line\">          left: 80px;</span><br><span class=\"line\">          width: 40px;</span><br><span class=\"line\">          height: 40px;</span><br><span class=\"line\">          position: absolute;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>扫描二维码浏览本页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'logo'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://amoyiki.github.io/images/avatar.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"40\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/qrcode.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/popup.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"动态获取网页icon\"><a href=\"#动态获取网页icon\" class=\"headerlink\" title=\"动态获取网页icon\"></a>动态获取网页icon</h3><p>如果想让icon图标随着每个网站不同的icon进行变动的话，就只要利用<code>tab</code>的<code>favIconUrl</code>属性就能得到标签页面的图标url地址,改动如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  chrome.tabs.getSelected(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tab</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//QRCode(元素id,相关配置文件)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> qrcode = <span class=\"keyword\">new</span> QRCode(<span class=\"string\">\"qrcode\"</span>, &#123;</span><br><span class=\"line\">              text: tab.url,</span><br><span class=\"line\">              width: <span class=\"number\">160</span>,</span><br><span class=\"line\">              height: <span class=\"number\">160</span>,</span><br><span class=\"line\">              colorDark : <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">              colorLight : <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">              <span class=\"comment\">// QRCode的容错级别</span></span><br><span class=\"line\">              correctLevel : QRCode.CorrectLevel.H</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab.favIconUrl) &#123;<span class=\"comment\">//tab有图标的情况下动态赋值</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"img\"</span>)[<span class=\"number\">1</span>].src = tab.favIconUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(img);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>详细代码可以查看<a href=\"https://github.com/amoyiki/LearnedAndProTest/tree/master/QRCode\">github源码地址</a></p>"},{"title":" 编写简单的ORM","date":"2016-08-24T01:51:46.000Z","_content":"\n最近在跟着廖雪峰的python3教程，把学习的过程记录下来。日后好反复翻阅\n<!-- more -->\n\n```python\nclass Field(object):\n    def __init__(self, name, colum_type):\n        self.name = name\n        self.column_type = colum_type\n\n    def __str__(self):\n        return '<%s : %s>' % (self.__class__.__name__, self.name)\n\n\nclass StringField(Field):\n    def __init__(self, name):\n        super(StringField, self).__init__(name, 'varchar(100)')\n\n\nclass IntegerField(Field):\n    def __init__(self, name):\n        super(IntegerField, self).__init__(name, 'bigint')\n\n\nclass ModelMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        if name == 'Model':\n            return type.__new__(cls, name, bases, attrs)\n        print(\"Found model: %s\" % name)\n        mappings = dict()\n        for k, v in attrs.items():\n            if isinstance(v, Field):\n                print(\"Found mapping: %s ==> %s\" % (k, v))\n                mappings[k] = v\n\n        for k in mappings.keys():\n            attrs.pop(k)\n\n        attrs['__mappings__'] = mappings  # 保存属性和映射关系\n        attrs['__table__'] = name  # 表明与类名一致\n        return type.__new__(cls, name, bases, attrs)\n\nclass Model(dict, metaclass=ModelMetaclass):\n    def __init__(self, **kw):\n        super(Model, self).__init__(**kw)\n\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Model' object has no attribute '%s' \" % key)\n\n    def __setattr__(self, key, value):\n        self[key] = value\n\n    def save(self):\n        fields = []\n        params = []\n        args = []\n        for k, v in self.__mappings__.items():\n            fields.append(v.name)\n            params.append(\"?\")\n            args.append(getattr(self, k, None))\n        print('='.join(['name', 'iki']))\n        sql = \"INSERT INTO %s (%s) VALUES (%s)\" % (self.__table__, ','.join(fields), ','.join(params))\n        print('SQL: %s' % sql)\n        print('ARGS: %s' % str(args))\n\n    def update(self):\n        pass\n\n\n\n```\n\n```python\nclass User(Model):\n    # 定义类的属性到列的映射：\n    id = IntegerField('id')\n    name = StringField('username')\n    email = StringField('email')\n    password = StringField('password')\n\nu = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')\nu.save()\n\n[OUTPUT]\nFound model: User\nFound mapping: id ==> <IntegerField : id>\nFound mapping: name ==> <StringField : username>\nFound mapping: email ==> <StringField : email>\nFound mapping: password ==> <StringField : password>\n\nSQL: INSERT INTO User (username,id,email,password) VALUES (?,?,?,?)\nARGS: ['Michael', 12345, 'test@orm.org', 'my-pwd']\n\n\n```\n\n**本段代码是照着廖雪峰python3教程敲得，后续会补充一些理解和扩展该代码**\n","source":"_posts/编写简单的ORM.md","raw":"---\ntitle: ' 编写简单的ORM'\ndate: 2016-08-24 09:51:46\ncategories: \"Python\"\ntags:\n- 学习\n---\n\n最近在跟着廖雪峰的python3教程，把学习的过程记录下来。日后好反复翻阅\n<!-- more -->\n\n```python\nclass Field(object):\n    def __init__(self, name, colum_type):\n        self.name = name\n        self.column_type = colum_type\n\n    def __str__(self):\n        return '<%s : %s>' % (self.__class__.__name__, self.name)\n\n\nclass StringField(Field):\n    def __init__(self, name):\n        super(StringField, self).__init__(name, 'varchar(100)')\n\n\nclass IntegerField(Field):\n    def __init__(self, name):\n        super(IntegerField, self).__init__(name, 'bigint')\n\n\nclass ModelMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        if name == 'Model':\n            return type.__new__(cls, name, bases, attrs)\n        print(\"Found model: %s\" % name)\n        mappings = dict()\n        for k, v in attrs.items():\n            if isinstance(v, Field):\n                print(\"Found mapping: %s ==> %s\" % (k, v))\n                mappings[k] = v\n\n        for k in mappings.keys():\n            attrs.pop(k)\n\n        attrs['__mappings__'] = mappings  # 保存属性和映射关系\n        attrs['__table__'] = name  # 表明与类名一致\n        return type.__new__(cls, name, bases, attrs)\n\nclass Model(dict, metaclass=ModelMetaclass):\n    def __init__(self, **kw):\n        super(Model, self).__init__(**kw)\n\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Model' object has no attribute '%s' \" % key)\n\n    def __setattr__(self, key, value):\n        self[key] = value\n\n    def save(self):\n        fields = []\n        params = []\n        args = []\n        for k, v in self.__mappings__.items():\n            fields.append(v.name)\n            params.append(\"?\")\n            args.append(getattr(self, k, None))\n        print('='.join(['name', 'iki']))\n        sql = \"INSERT INTO %s (%s) VALUES (%s)\" % (self.__table__, ','.join(fields), ','.join(params))\n        print('SQL: %s' % sql)\n        print('ARGS: %s' % str(args))\n\n    def update(self):\n        pass\n\n\n\n```\n\n```python\nclass User(Model):\n    # 定义类的属性到列的映射：\n    id = IntegerField('id')\n    name = StringField('username')\n    email = StringField('email')\n    password = StringField('password')\n\nu = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')\nu.save()\n\n[OUTPUT]\nFound model: User\nFound mapping: id ==> <IntegerField : id>\nFound mapping: name ==> <StringField : username>\nFound mapping: email ==> <StringField : email>\nFound mapping: password ==> <StringField : password>\n\nSQL: INSERT INTO User (username,id,email,password) VALUES (?,?,?,?)\nARGS: ['Michael', 12345, 'test@orm.org', 'my-pwd']\n\n\n```\n\n**本段代码是照着廖雪峰python3教程敲得，后续会补充一些理解和扩展该代码**\n","slug":"编写简单的ORM","published":1,"updated":"2016-11-25T14:23:52.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk002gm4qfopkw0c19","content":"<p>最近在跟着廖雪峰的python3教程，把学习的过程记录下来。日后好反复翻阅<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Field</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, colum_type)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.column_type = colum_type</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;%s : %s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(StringField, self).__init__(name, <span class=\"string\">'varchar(100)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(IntegerField, self).__init__(name, <span class=\"string\">'bigint'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"string\">'Model'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class=\"line\">        print(<span class=\"string\">\"Found model: %s\"</span> % name)</span><br><span class=\"line\">        mappings = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> attrs.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(v, Field):</span><br><span class=\"line\">                print(<span class=\"string\">\"Found mapping: %s ==&gt; %s\"</span> % (k, v))</span><br><span class=\"line\">                mappings[k] = v</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> mappings.keys():</span><br><span class=\"line\">            attrs.pop(k)</span><br><span class=\"line\"></span><br><span class=\"line\">        attrs[<span class=\"string\">'__mappings__'</span>] = mappings  <span class=\"comment\"># 保存属性和映射关系</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'__table__'</span>] = name  <span class=\"comment\"># 表明与类名一致</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span><span class=\"params\">(dict, metaclass=ModelMetaclass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></span><br><span class=\"line\">        super(Model, self).__init__(**kw)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self[key]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Model' object has no attribute '%s' \"</span> % key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        self[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fields = []</span><br><span class=\"line\">        params = []</span><br><span class=\"line\">        args = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.__mappings__.items():</span><br><span class=\"line\">            fields.append(v.name)</span><br><span class=\"line\">            params.append(<span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">            args.append(getattr(self, k, <span class=\"keyword\">None</span>))</span><br><span class=\"line\">        print(<span class=\"string\">'='</span>.join([<span class=\"string\">'name'</span>, <span class=\"string\">'iki'</span>]))</span><br><span class=\"line\">        sql = <span class=\"string\">\"INSERT INTO %s (%s) VALUES (%s)\"</span> % (self.__table__, <span class=\"string\">','</span>.join(fields), <span class=\"string\">','</span>.join(params))</span><br><span class=\"line\">        print(<span class=\"string\">'SQL: %s'</span> % sql)</span><br><span class=\"line\">        print(<span class=\"string\">'ARGS: %s'</span> % str(args))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(Model):</span><br><span class=\"line\">    # 定义类的属性到列的映射：</span><br><span class=\"line\">    id = IntegerField('id')</span><br><span class=\"line\">    name = StringField('username')</span><br><span class=\"line\">    email = StringField('email')</span><br><span class=\"line\">    password = StringField('password')</span><br><span class=\"line\"></span><br><span class=\"line\">u = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')</span><br><span class=\"line\">u.save()</span><br><span class=\"line\"></span><br><span class=\"line\">[OUTPUT]</span><br><span class=\"line\">Found model: User</span><br><span class=\"line\">Found mapping: id ==&gt; &lt;IntegerField : id&gt;</span><br><span class=\"line\">Found mapping: name ==&gt; &lt;StringField : username&gt;</span><br><span class=\"line\">Found mapping: email ==&gt; &lt;StringField : email&gt;</span><br><span class=\"line\">Found mapping: password ==&gt; &lt;StringField : password&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SQL: INSERT INTO User (username,id,email,password) VALUES (?,?,?,?)</span><br><span class=\"line\">ARGS: ['Michael', 12345, 'test@orm.org', 'my-pwd']</span><br></pre></td></tr></table></figure>\n<p><strong>本段代码是照着廖雪峰python3教程敲得，后续会补充一些理解和扩展该代码</strong></p>\n","excerpt":"<p>最近在跟着廖雪峰的python3教程，把学习的过程记录下来。日后好反复翻阅<br>","more":"</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Field</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, colum_type)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.column_type = colum_type</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;%s : %s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(StringField, self).__init__(name, <span class=\"string\">'varchar(100)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(IntegerField, self).__init__(name, <span class=\"string\">'bigint'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"string\">'Model'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class=\"line\">        print(<span class=\"string\">\"Found model: %s\"</span> % name)</span><br><span class=\"line\">        mappings = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> attrs.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(v, Field):</span><br><span class=\"line\">                print(<span class=\"string\">\"Found mapping: %s ==&gt; %s\"</span> % (k, v))</span><br><span class=\"line\">                mappings[k] = v</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> mappings.keys():</span><br><span class=\"line\">            attrs.pop(k)</span><br><span class=\"line\"></span><br><span class=\"line\">        attrs[<span class=\"string\">'__mappings__'</span>] = mappings  <span class=\"comment\"># 保存属性和映射关系</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'__table__'</span>] = name  <span class=\"comment\"># 表明与类名一致</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span><span class=\"params\">(dict, metaclass=ModelMetaclass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></span><br><span class=\"line\">        super(Model, self).__init__(**kw)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self[key]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Model' object has no attribute '%s' \"</span> % key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        self[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fields = []</span><br><span class=\"line\">        params = []</span><br><span class=\"line\">        args = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.__mappings__.items():</span><br><span class=\"line\">            fields.append(v.name)</span><br><span class=\"line\">            params.append(<span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">            args.append(getattr(self, k, <span class=\"keyword\">None</span>))</span><br><span class=\"line\">        print(<span class=\"string\">'='</span>.join([<span class=\"string\">'name'</span>, <span class=\"string\">'iki'</span>]))</span><br><span class=\"line\">        sql = <span class=\"string\">\"INSERT INTO %s (%s) VALUES (%s)\"</span> % (self.__table__, <span class=\"string\">','</span>.join(fields), <span class=\"string\">','</span>.join(params))</span><br><span class=\"line\">        print(<span class=\"string\">'SQL: %s'</span> % sql)</span><br><span class=\"line\">        print(<span class=\"string\">'ARGS: %s'</span> % str(args))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(Model):</span><br><span class=\"line\">    # 定义类的属性到列的映射：</span><br><span class=\"line\">    id = IntegerField('id')</span><br><span class=\"line\">    name = StringField('username')</span><br><span class=\"line\">    email = StringField('email')</span><br><span class=\"line\">    password = StringField('password')</span><br><span class=\"line\"></span><br><span class=\"line\">u = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')</span><br><span class=\"line\">u.save()</span><br><span class=\"line\"></span><br><span class=\"line\">[OUTPUT]</span><br><span class=\"line\">Found model: User</span><br><span class=\"line\">Found mapping: id ==&gt; &lt;IntegerField : id&gt;</span><br><span class=\"line\">Found mapping: name ==&gt; &lt;StringField : username&gt;</span><br><span class=\"line\">Found mapping: email ==&gt; &lt;StringField : email&gt;</span><br><span class=\"line\">Found mapping: password ==&gt; &lt;StringField : password&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SQL: INSERT INTO User (username,id,email,password) VALUES (?,?,?,?)</span><br><span class=\"line\">ARGS: ['Michael', 12345, 'test@orm.org', 'my-pwd']</span><br></pre></td></tr></table></figure>\n<p><strong>本段代码是照着廖雪峰python3教程敲得，后续会补充一些理解和扩展该代码</strong></p>"},{"title":"[转]Java集合小抄","date":"2017-01-18T07:18:39.000Z","_content":"# 集合 #\n## List ##\n### ArrayList ###\n- 以数组实现，节约空间。但是数组容量限制，超出限制会增加50%容量，用System.arraycopy()复制到新的数组。因此最好能给出数组大小的预估值。\n- 默认第一次大小为10。\n<!-- more -->\n- 按下标访问元素，get(下标获取元素)、set(替换下标元素)的性能很高，\n是数组的基本优势。\n- 按下标插入元素，删除元素，add(i,e)、remove(i)、remove(e),则会用到System.arraycopy()来复制移动受影响的元素,性能会变差。\n- 越是前面的元素，修改的时候移动的元素越多。用add(e)在尾部添加元素、删除最后一个元素不会影响性能。\n### LinkedList ###\n- 以双向链表实现，链表无容量限制，但是双向链表本身使用了更多空间，每插入一个元素都要构造一个额外的Node对象，也需要额外的指针操作。\n- 按数组下标访问元素，get(i)、set(i,e),需要移动到指定Node节点(i>节点个数时从尾部移动到头部)\n- 插入、删除元素时修改前后节点指针即可\n- 只有在两头add()、addFirst()、addLast()、removeFirst()、removeLast()才能省掉指针的移动。\n\n### Iterator ###\nIterator 支持从集合中安全删除对象，只需在Iterator上调用remove().\nArrayList继承了AbstractList，而AbstractList有定义\n```java\n        /**\n         * The modCount value that the iterator believes that the backing\n         * List should have.  If this expectation is violated, the iterator\n         * has detected concurrent modification.\n         */\n        int expectedModCount = modCount;\n        ...\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n        ...\n```\n`checkForComodification`这个方法是检查modCount和expectedModCount的值是否是相对，如果不相等则抛出`ConcurrentModificationException`异常。\n这是因为在多线程中操作容器时，其他线程可能已经改变了容器的内容，所以每次对容器进行操作的时候modCount都会+1。当Iterator遍历检查到modCount变化是会马上抛出异常，这是Java的`fail-fast`机制。\n而Iterator的remove方法在操作完后让expectedModCount和modCount在此相等\n## Map ##\n### HashMap ###\n- 以Enty[]数组实现的哈希桶数组，用Key的哈希值取模桶数组的大小可以的到数组的下标\n- 插入元素时，如果两条Key落在同一个桶，称之为哈希冲突或者碰撞\n- 哈希冲突JDK8之前是用的是链表法，用Entry用一个next属性实现多个Entry以单向链表的形式存放。然后遍历链表中的所有元素，逐一比较Key值\n- 在JDK8后，新增链表的阈值为8，链表的元素数量超过阈值时改用红黑树来存储，提高查找速度。\n- 当Entry数量达到数组的75%，数组成倍扩容，重新分配原来的Entry，扩容成本不低。\n### LinkedHashMap ###\n- 扩展HashMap，每个Entry增加双向链表，非常占内存的数据结构\n### ConcurrentSkipListMap ###\n- JDK6新增并发优化的SortedMap，以SkipList结构实现，支持CAS无锁算法。\n\n** --待整理-- **\n# 线程 #\n方法区和堆一样，是线程共享的。在方法区中，存储每个类的信息（类名，方法信息，字段信息）、静态变量、常量以及编译器编译后的代码。\n\n# 基本数据类型 #\n## int -> Integer ##\n> Integer a = 59;\n> int b = 59;\n> Integer c = Integer.valueOf(59);\n> Integer d = new Integer(59);\n\na 会调用`valueOf`方法 这个方法返回的是一个Integer对象。下面是它的源码\n```java\npublic static Integer valueOf(int i) {\n    assert IntegerCache.high >= 127;\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n可以看出当i的值在[-128,127]而且在`IntegerCache`中存在此对象，就直接返回引用，没有的话创建一个新的对象。\n显然在这个a之前内存还没有59这个值，所有它创建了一个Integer对象\nb 是基本类型，存储在栈中\nc 也用了`valueOf`这个方法,此时IntegerCache已经存在这个对象，返回引用。\nd 是一个新的Integer对象\n在比较int和Integer值时，Integer会调用`intValue`自动拆箱成int，进行值比较。\n","source":"_posts/转-Java集合小抄.md","raw":"---\ntitle: '[转]Java集合小抄'\ndate: 2017-01-18 15:18:39\ncategories: \"Java\"\ntags:\n- 学习\n---\n# 集合 #\n## List ##\n### ArrayList ###\n- 以数组实现，节约空间。但是数组容量限制，超出限制会增加50%容量，用System.arraycopy()复制到新的数组。因此最好能给出数组大小的预估值。\n- 默认第一次大小为10。\n<!-- more -->\n- 按下标访问元素，get(下标获取元素)、set(替换下标元素)的性能很高，\n是数组的基本优势。\n- 按下标插入元素，删除元素，add(i,e)、remove(i)、remove(e),则会用到System.arraycopy()来复制移动受影响的元素,性能会变差。\n- 越是前面的元素，修改的时候移动的元素越多。用add(e)在尾部添加元素、删除最后一个元素不会影响性能。\n### LinkedList ###\n- 以双向链表实现，链表无容量限制，但是双向链表本身使用了更多空间，每插入一个元素都要构造一个额外的Node对象，也需要额外的指针操作。\n- 按数组下标访问元素，get(i)、set(i,e),需要移动到指定Node节点(i>节点个数时从尾部移动到头部)\n- 插入、删除元素时修改前后节点指针即可\n- 只有在两头add()、addFirst()、addLast()、removeFirst()、removeLast()才能省掉指针的移动。\n\n### Iterator ###\nIterator 支持从集合中安全删除对象，只需在Iterator上调用remove().\nArrayList继承了AbstractList，而AbstractList有定义\n```java\n        /**\n         * The modCount value that the iterator believes that the backing\n         * List should have.  If this expectation is violated, the iterator\n         * has detected concurrent modification.\n         */\n        int expectedModCount = modCount;\n        ...\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n        ...\n```\n`checkForComodification`这个方法是检查modCount和expectedModCount的值是否是相对，如果不相等则抛出`ConcurrentModificationException`异常。\n这是因为在多线程中操作容器时，其他线程可能已经改变了容器的内容，所以每次对容器进行操作的时候modCount都会+1。当Iterator遍历检查到modCount变化是会马上抛出异常，这是Java的`fail-fast`机制。\n而Iterator的remove方法在操作完后让expectedModCount和modCount在此相等\n## Map ##\n### HashMap ###\n- 以Enty[]数组实现的哈希桶数组，用Key的哈希值取模桶数组的大小可以的到数组的下标\n- 插入元素时，如果两条Key落在同一个桶，称之为哈希冲突或者碰撞\n- 哈希冲突JDK8之前是用的是链表法，用Entry用一个next属性实现多个Entry以单向链表的形式存放。然后遍历链表中的所有元素，逐一比较Key值\n- 在JDK8后，新增链表的阈值为8，链表的元素数量超过阈值时改用红黑树来存储，提高查找速度。\n- 当Entry数量达到数组的75%，数组成倍扩容，重新分配原来的Entry，扩容成本不低。\n### LinkedHashMap ###\n- 扩展HashMap，每个Entry增加双向链表，非常占内存的数据结构\n### ConcurrentSkipListMap ###\n- JDK6新增并发优化的SortedMap，以SkipList结构实现，支持CAS无锁算法。\n\n** --待整理-- **\n# 线程 #\n方法区和堆一样，是线程共享的。在方法区中，存储每个类的信息（类名，方法信息，字段信息）、静态变量、常量以及编译器编译后的代码。\n\n# 基本数据类型 #\n## int -> Integer ##\n> Integer a = 59;\n> int b = 59;\n> Integer c = Integer.valueOf(59);\n> Integer d = new Integer(59);\n\na 会调用`valueOf`方法 这个方法返回的是一个Integer对象。下面是它的源码\n```java\npublic static Integer valueOf(int i) {\n    assert IntegerCache.high >= 127;\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n可以看出当i的值在[-128,127]而且在`IntegerCache`中存在此对象，就直接返回引用，没有的话创建一个新的对象。\n显然在这个a之前内存还没有59这个值，所有它创建了一个Integer对象\nb 是基本类型，存储在栈中\nc 也用了`valueOf`这个方法,此时IntegerCache已经存在这个对象，返回引用。\nd 是一个新的Integer对象\n在比较int和Integer值时，Integer会调用`intValue`自动拆箱成int，进行值比较。\n","slug":"转-Java集合小抄","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk002km4qfh8u70m4f","content":"<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><ul>\n<li>以数组实现，节约空间。但是数组容量限制，超出限制会增加50%容量，用System.arraycopy()复制到新的数组。因此最好能给出数组大小的预估值。</li>\n<li>默认第一次大小为10。<a id=\"more\"></a></li>\n<li>按下标访问元素，get(下标获取元素)、set(替换下标元素)的性能很高，<br>是数组的基本优势。</li>\n<li>按下标插入元素，删除元素，add(i,e)、remove(i)、remove(e),则会用到System.arraycopy()来复制移动受影响的元素,性能会变差。</li>\n<li>越是前面的元素，修改的时候移动的元素越多。用add(e)在尾部添加元素、删除最后一个元素不会影响性能。<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3></li>\n<li>以双向链表实现，链表无容量限制，但是双向链表本身使用了更多空间，每插入一个元素都要构造一个额外的Node对象，也需要额外的指针操作。</li>\n<li>按数组下标访问元素，get(i)、set(i,e),需要移动到指定Node节点(i&gt;节点个数时从尾部移动到头部)</li>\n<li>插入、删除元素时修改前后节点指针即可</li>\n<li>只有在两头add()、addFirst()、addLast()、removeFirst()、removeLast()才能省掉指针的移动。</li>\n</ul>\n<h3 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h3><p>Iterator 支持从集合中安全删除对象，只需在Iterator上调用remove().<br>ArrayList继承了AbstractList，而AbstractList有定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * The modCount value that the iterator believes that the backing</span><br><span class=\"line\"> * List should have.  If this expectation is violated, the iterator</span><br><span class=\"line\"> * has detected concurrent modification.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p><code>checkForComodification</code>这个方法是检查modCount和expectedModCount的值是否是相对，如果不相等则抛出<code>ConcurrentModificationException</code>异常。<br>这是因为在多线程中操作容器时，其他线程可能已经改变了容器的内容，所以每次对容器进行操作的时候modCount都会+1。当Iterator遍历检查到modCount变化是会马上抛出异常，这是Java的<code>fail-fast</code>机制。<br>而Iterator的remove方法在操作完后让expectedModCount和modCount在此相等</p>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><ul>\n<li>以Enty[]数组实现的哈希桶数组，用Key的哈希值取模桶数组的大小可以的到数组的下标</li>\n<li>插入元素时，如果两条Key落在同一个桶，称之为哈希冲突或者碰撞</li>\n<li>哈希冲突JDK8之前是用的是链表法，用Entry用一个next属性实现多个Entry以单向链表的形式存放。然后遍历链表中的所有元素，逐一比较Key值</li>\n<li>在JDK8后，新增链表的阈值为8，链表的元素数量超过阈值时改用红黑树来存储，提高查找速度。</li>\n<li>当Entry数量达到数组的75%，数组成倍扩容，重新分配原来的Entry，扩容成本不低。<h3 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h3></li>\n<li>扩展HashMap，每个Entry增加双向链表，非常占内存的数据结构<h3 id=\"ConcurrentSkipListMap\"><a href=\"#ConcurrentSkipListMap\" class=\"headerlink\" title=\"ConcurrentSkipListMap\"></a>ConcurrentSkipListMap</h3></li>\n<li>JDK6新增并发优化的SortedMap，以SkipList结构实现，支持CAS无锁算法。</li>\n</ul>\n<p><strong> –待整理– </strong></p>\n<h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><p>方法区和堆一样，是线程共享的。在方法区中，存储每个类的信息（类名，方法信息，字段信息）、静态变量、常量以及编译器编译后的代码。</p>\n<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><h2 id=\"int-gt-Integer\"><a href=\"#int-gt-Integer\" class=\"headerlink\" title=\"int -&gt; Integer\"></a>int -&gt; Integer</h2><blockquote>\n<p>Integer a = 59;<br>int b = 59;<br>Integer c = Integer.valueOf(59);<br>Integer d = new Integer(59);</p>\n</blockquote>\n<p>a 会调用<code>valueOf</code>方法 这个方法返回的是一个Integer对象。下面是它的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出当i的值在[-128,127]而且在<code>IntegerCache</code>中存在此对象，就直接返回引用，没有的话创建一个新的对象。<br>显然在这个a之前内存还没有59这个值，所有它创建了一个Integer对象<br>b 是基本类型，存储在栈中<br>c 也用了<code>valueOf</code>这个方法,此时IntegerCache已经存在这个对象，返回引用。<br>d 是一个新的Integer对象<br>在比较int和Integer值时，Integer会调用<code>intValue</code>自动拆箱成int，进行值比较。</p>\n","excerpt":"<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><ul>\n<li>以数组实现，节约空间。但是数组容量限制，超出限制会增加50%容量，用System.arraycopy()复制到新的数组。因此最好能给出数组大小的预估值。</li>\n<li>默认第一次大小为10。","more":"</li>\n<li>按下标访问元素，get(下标获取元素)、set(替换下标元素)的性能很高，<br>是数组的基本优势。</li>\n<li>按下标插入元素，删除元素，add(i,e)、remove(i)、remove(e),则会用到System.arraycopy()来复制移动受影响的元素,性能会变差。</li>\n<li>越是前面的元素，修改的时候移动的元素越多。用add(e)在尾部添加元素、删除最后一个元素不会影响性能。<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3></li>\n<li>以双向链表实现，链表无容量限制，但是双向链表本身使用了更多空间，每插入一个元素都要构造一个额外的Node对象，也需要额外的指针操作。</li>\n<li>按数组下标访问元素，get(i)、set(i,e),需要移动到指定Node节点(i&gt;节点个数时从尾部移动到头部)</li>\n<li>插入、删除元素时修改前后节点指针即可</li>\n<li>只有在两头add()、addFirst()、addLast()、removeFirst()、removeLast()才能省掉指针的移动。</li>\n</ul>\n<h3 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h3><p>Iterator 支持从集合中安全删除对象，只需在Iterator上调用remove().<br>ArrayList继承了AbstractList，而AbstractList有定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * The modCount value that the iterator believes that the backing</span><br><span class=\"line\"> * List should have.  If this expectation is violated, the iterator</span><br><span class=\"line\"> * has detected concurrent modification.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p><code>checkForComodification</code>这个方法是检查modCount和expectedModCount的值是否是相对，如果不相等则抛出<code>ConcurrentModificationException</code>异常。<br>这是因为在多线程中操作容器时，其他线程可能已经改变了容器的内容，所以每次对容器进行操作的时候modCount都会+1。当Iterator遍历检查到modCount变化是会马上抛出异常，这是Java的<code>fail-fast</code>机制。<br>而Iterator的remove方法在操作完后让expectedModCount和modCount在此相等</p>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><ul>\n<li>以Enty[]数组实现的哈希桶数组，用Key的哈希值取模桶数组的大小可以的到数组的下标</li>\n<li>插入元素时，如果两条Key落在同一个桶，称之为哈希冲突或者碰撞</li>\n<li>哈希冲突JDK8之前是用的是链表法，用Entry用一个next属性实现多个Entry以单向链表的形式存放。然后遍历链表中的所有元素，逐一比较Key值</li>\n<li>在JDK8后，新增链表的阈值为8，链表的元素数量超过阈值时改用红黑树来存储，提高查找速度。</li>\n<li>当Entry数量达到数组的75%，数组成倍扩容，重新分配原来的Entry，扩容成本不低。<h3 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h3></li>\n<li>扩展HashMap，每个Entry增加双向链表，非常占内存的数据结构<h3 id=\"ConcurrentSkipListMap\"><a href=\"#ConcurrentSkipListMap\" class=\"headerlink\" title=\"ConcurrentSkipListMap\"></a>ConcurrentSkipListMap</h3></li>\n<li>JDK6新增并发优化的SortedMap，以SkipList结构实现，支持CAS无锁算法。</li>\n</ul>\n<p><strong> –待整理– </strong></p>\n<h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><p>方法区和堆一样，是线程共享的。在方法区中，存储每个类的信息（类名，方法信息，字段信息）、静态变量、常量以及编译器编译后的代码。</p>\n<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><h2 id=\"int-gt-Integer\"><a href=\"#int-gt-Integer\" class=\"headerlink\" title=\"int -&gt; Integer\"></a>int -&gt; Integer</h2><blockquote>\n<p>Integer a = 59;<br>int b = 59;<br>Integer c = Integer.valueOf(59);<br>Integer d = new Integer(59);</p>\n</blockquote>\n<p>a 会调用<code>valueOf</code>方法 这个方法返回的是一个Integer对象。下面是它的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出当i的值在[-128,127]而且在<code>IntegerCache</code>中存在此对象，就直接返回引用，没有的话创建一个新的对象。<br>显然在这个a之前内存还没有59这个值，所有它创建了一个Integer对象<br>b 是基本类型，存储在栈中<br>c 也用了<code>valueOf</code>这个方法,此时IntegerCache已经存在这个对象，返回引用。<br>d 是一个新的Integer对象<br>在比较int和Integer值时，Integer会调用<code>intValue</code>自动拆箱成int，进行值比较。</p>"},{"title":"零碎的小技巧","date":"2016-08-05T01:47:18.000Z","_content":"### 如何科学上网 ###\n作为一名折腾的人，一名苦逼搬砖程序员，最不能缺少的就是和世界接轨。如果不去了解国外的技术发展，就没有办法提升自身的技术水平。所以，科学上网是一个程序员应该有的基础能力。\n这里简单的介绍一下目前我使用的科学上网工具。\n<!-- more -->\n>1. vpn代理\n这个是最常见，最简单的方法。VPN软件也是多的数不胜数。目前我有在使用的是有两款，都是免费的（说到底还是因为穷）。一款是Lantern，另外一款是赛风。\n2. 更改Host\n这个方法只能浏览一些特定的网站，而且网速也是时好时坏。但是，对于只简单的想使用Google相关网站，还是很好用的。因为Host的IP经常会ban掉，所以需要经常更新一下。更新[Host地址](https://laod.cn/hosts/2016-google-hosts.html)\n\n### Chrome Google 首页及默认搜索设置 ###\n在成功的科学上网后，如果用的是Chrome的话，还可以设置下图操作，利用Https防止链接被和谐。\n![image](http://oi6538cys.bkt.clouddn.com/16_08_05_01.gif)\n","source":"_posts/零碎的小技巧.md","raw":"---\ntitle: 零碎的小技巧\ndate: 2016-08-05 09:47:18\ncategories: \"工具配置\"\n---\n### 如何科学上网 ###\n作为一名折腾的人，一名苦逼搬砖程序员，最不能缺少的就是和世界接轨。如果不去了解国外的技术发展，就没有办法提升自身的技术水平。所以，科学上网是一个程序员应该有的基础能力。\n这里简单的介绍一下目前我使用的科学上网工具。\n<!-- more -->\n>1. vpn代理\n这个是最常见，最简单的方法。VPN软件也是多的数不胜数。目前我有在使用的是有两款，都是免费的（说到底还是因为穷）。一款是Lantern，另外一款是赛风。\n2. 更改Host\n这个方法只能浏览一些特定的网站，而且网速也是时好时坏。但是，对于只简单的想使用Google相关网站，还是很好用的。因为Host的IP经常会ban掉，所以需要经常更新一下。更新[Host地址](https://laod.cn/hosts/2016-google-hosts.html)\n\n### Chrome Google 首页及默认搜索设置 ###\n在成功的科学上网后，如果用的是Chrome的话，还可以设置下图操作，利用Https防止链接被和谐。\n![image](http://oi6538cys.bkt.clouddn.com/16_08_05_01.gif)\n","slug":"零碎的小技巧","published":1,"updated":"2016-12-14T14:08:18.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbk002nm4qf4aqkmp20","content":"<h3 id=\"如何科学上网\"><a href=\"#如何科学上网\" class=\"headerlink\" title=\"如何科学上网\"></a>如何科学上网</h3><p>作为一名折腾的人，一名苦逼搬砖程序员，最不能缺少的就是和世界接轨。如果不去了解国外的技术发展，就没有办法提升自身的技术水平。所以，科学上网是一个程序员应该有的基础能力。<br>这里简单的介绍一下目前我使用的科学上网工具。<br><a id=\"more\"></a></p>\n<blockquote>\n<ol>\n<li>vpn代理<br>这个是最常见，最简单的方法。VPN软件也是多的数不胜数。目前我有在使用的是有两款，都是免费的（说到底还是因为穷）。一款是Lantern，另外一款是赛风。</li>\n<li>更改Host<br>这个方法只能浏览一些特定的网站，而且网速也是时好时坏。但是，对于只简单的想使用Google相关网站，还是很好用的。因为Host的IP经常会ban掉，所以需要经常更新一下。更新<a href=\"https://laod.cn/hosts/2016-google-hosts.html\" target=\"_blank\" rel=\"external\">Host地址</a></li>\n</ol>\n</blockquote>\n<h3 id=\"Chrome-Google-首页及默认搜索设置\"><a href=\"#Chrome-Google-首页及默认搜索设置\" class=\"headerlink\" title=\"Chrome Google 首页及默认搜索设置\"></a>Chrome Google 首页及默认搜索设置</h3><p>在成功的科学上网后，如果用的是Chrome的话，还可以设置下图操作，利用Https防止链接被和谐。<br><img src=\"http://oi6538cys.bkt.clouddn.com/16_08_05_01.gif\" alt=\"image\"></p>\n","excerpt":"<h3 id=\"如何科学上网\"><a href=\"#如何科学上网\" class=\"headerlink\" title=\"如何科学上网\"></a>如何科学上网</h3><p>作为一名折腾的人，一名苦逼搬砖程序员，最不能缺少的就是和世界接轨。如果不去了解国外的技术发展，就没有办法提升自身的技术水平。所以，科学上网是一个程序员应该有的基础能力。<br>这里简单的介绍一下目前我使用的科学上网工具。<br>","more":"</p>\n<blockquote>\n<ol>\n<li>vpn代理<br>这个是最常见，最简单的方法。VPN软件也是多的数不胜数。目前我有在使用的是有两款，都是免费的（说到底还是因为穷）。一款是Lantern，另外一款是赛风。</li>\n<li>更改Host<br>这个方法只能浏览一些特定的网站，而且网速也是时好时坏。但是，对于只简单的想使用Google相关网站，还是很好用的。因为Host的IP经常会ban掉，所以需要经常更新一下。更新<a href=\"https://laod.cn/hosts/2016-google-hosts.html\">Host地址</a></li>\n</ol>\n</blockquote>\n<h3 id=\"Chrome-Google-首页及默认搜索设置\"><a href=\"#Chrome-Google-首页及默认搜索设置\" class=\"headerlink\" title=\"Chrome Google 首页及默认搜索设置\"></a>Chrome Google 首页及默认搜索设置</h3><p>在成功的科学上网后，如果用的是Chrome的话，还可以设置下图操作，利用Https防止链接被和谐。<br><img src=\"http://oi6538cys.bkt.clouddn.com/16_08_05_01.gif\" alt=\"image\"></p>"},{"title":"[LeetCode]232. Implement Queue using Stacks","date":"2017-01-11T03:28:14.000Z","_content":"### 问题描述 ###\n利用堆栈实现队列功能\n<!-- more -->\n\n### 解题思路 ###\n`Stack`的特点是先进后出，`Queue`的特点是先进先出。利用两个`Stack`，一个负责输入一个负责输出.\n如果输出堆栈为空，将输入堆栈值传给输出堆栈，若两个堆栈都为空，返回空值\n`python`中用list模拟堆栈.\n### 具体代码 ###\n**python**\n```python\nclass Queue(object):\n    def __init__(self):\n        self.stackA = []\n        self.stackB = []\n    def push(self, x):\n        self.stackA.append(x)\n    def pop(self):\n        self.peek()\n        self.stackB.pop()\n    def peek(self):\n        if self.stackB:\n            return self.stackB[-1]\n        elif not self.stackA:\n            return None\n        else:\n            while self.stackA:\n                self.stackB.append(self.stackA.pop())\n            return self.stackB[-1]\n    def empty(self):\n        return len(self.stackA)==0 and len(self.stackB)==0\n```\n\n**Java**\n```java\npublic class MyQueue{\n    Stack<Integer> input;\n    Stack<Integer> output;\n    public MyQueue(){\n        input = new Stack<Integer>();\n        output = new Stack<Integer>();\n    }\n    public void push(int x){\n        input.push(x);\n    }\n    public int pop(){\n        peek();\n        return output.pop();\n    }\n    public int peek(){\n        if(output.empty()){\n            while(!input.empty()){\n                output.push(input.pop());\n            }\n        }\n        return output.peek();\n    }\n    public boolean empty(){\n        return input.empty() && output.empty();\n    }\n}\n```\n","source":"_posts/LeetCode-232-Implement-Queue-using-Stacks.md","raw":"---\ntitle: '[LeetCode]232. Implement Queue using Stacks'\ndate: 2017-01-11 11:28:14\ncategories: \"Algorithms\"\ntags:\n- 学习\n---\n### 问题描述 ###\n利用堆栈实现队列功能\n<!-- more -->\n\n### 解题思路 ###\n`Stack`的特点是先进后出，`Queue`的特点是先进先出。利用两个`Stack`，一个负责输入一个负责输出.\n如果输出堆栈为空，将输入堆栈值传给输出堆栈，若两个堆栈都为空，返回空值\n`python`中用list模拟堆栈.\n### 具体代码 ###\n**python**\n```python\nclass Queue(object):\n    def __init__(self):\n        self.stackA = []\n        self.stackB = []\n    def push(self, x):\n        self.stackA.append(x)\n    def pop(self):\n        self.peek()\n        self.stackB.pop()\n    def peek(self):\n        if self.stackB:\n            return self.stackB[-1]\n        elif not self.stackA:\n            return None\n        else:\n            while self.stackA:\n                self.stackB.append(self.stackA.pop())\n            return self.stackB[-1]\n    def empty(self):\n        return len(self.stackA)==0 and len(self.stackB)==0\n```\n\n**Java**\n```java\npublic class MyQueue{\n    Stack<Integer> input;\n    Stack<Integer> output;\n    public MyQueue(){\n        input = new Stack<Integer>();\n        output = new Stack<Integer>();\n    }\n    public void push(int x){\n        input.push(x);\n    }\n    public int pop(){\n        peek();\n        return output.pop();\n    }\n    public int peek(){\n        if(output.empty()){\n            while(!input.empty()){\n                output.push(input.pop());\n            }\n        }\n        return output.peek();\n    }\n    public boolean empty(){\n        return input.empty() && output.empty();\n    }\n}\n```\n","slug":"LeetCode-232-Implement-Queue-using-Stacks","published":1,"updated":"2017-01-29T09:01:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyifvjbz002qm4qfj0wiiti4","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>利用堆栈实现队列功能<br><a id=\"more\"></a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p><code>Stack</code>的特点是先进后出，<code>Queue</code>的特点是先进先出。利用两个<code>Stack</code>，一个负责输入一个负责输出.<br>如果输出堆栈为空，将输入堆栈值传给输出堆栈，若两个堆栈都为空，返回空值<br><code>python</code>中用list模拟堆栈.</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.stackA = []</span><br><span class=\"line\">        self.stackB = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.stackA.append(x)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.peek()</span><br><span class=\"line\">        self.stackB.pop()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.stackB:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stackB[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> self.stackA:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> self.stackA:</span><br><span class=\"line\">                self.stackB.append(self.stackA.pop())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stackB[<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.stackA)==<span class=\"number\">0</span> <span class=\"keyword\">and</span> len(self.stackB)==<span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span></span>&#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; input;</span><br><span class=\"line\">    Stack&lt;Integer&gt; output;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        input = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">        output = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        input.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        peek();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(output.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!input.empty())&#123;</span><br><span class=\"line\">                output.push(input.pop());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> input.empty() &amp;&amp; output.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>利用堆栈实现队列功能<br>","more":"</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p><code>Stack</code>的特点是先进后出，<code>Queue</code>的特点是先进先出。利用两个<code>Stack</code>，一个负责输入一个负责输出.<br>如果输出堆栈为空，将输入堆栈值传给输出堆栈，若两个堆栈都为空，返回空值<br><code>python</code>中用list模拟堆栈.</p>\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p><strong>python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.stackA = []</span><br><span class=\"line\">        self.stackB = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.stackA.append(x)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.peek()</span><br><span class=\"line\">        self.stackB.pop()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.stackB:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stackB[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> self.stackA:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> self.stackA:</span><br><span class=\"line\">                self.stackB.append(self.stackA.pop())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stackB[<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.stackA)==<span class=\"number\">0</span> <span class=\"keyword\">and</span> len(self.stackB)==<span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span></span>&#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; input;</span><br><span class=\"line\">    Stack&lt;Integer&gt; output;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        input = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">        output = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        input.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        peek();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(output.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!input.empty())&#123;</span><br><span class=\"line\">                output.push(input.pop());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> input.empty() &amp;&amp; output.empty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciyifvj9t0000m4qf0hon7dop","category_id":"ciyifvja90005m4qfo98sq23e","_id":"ciyifvjap000fm4qf7md90ppk"},{"post_id":"ciyifvja9000dm4qf5z5zbkpc","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjap000mm4qfmghlpi44"},{"post_id":"ciyifvj9t0002m4qf9mxqhng3","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjap000qm4qfp0uhg0x2"},{"post_id":"ciyifvjap000hm4qfgoefvbb0","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjap000tm4qf76irdgn4"},{"post_id":"ciyifvjap000km4qf685smrp1","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjap000wm4qfufncj30n"},{"post_id":"ciyifvja90006m4qfv0hrp2ik","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjap000zm4qfvmvl5upc"},{"post_id":"ciyifvjap000nm4qfzavoit5d","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjap0012m4qfz6kkkniq"},{"post_id":"ciyifvjap000rm4qf5dixenw8","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjb40016m4qf5vadjt3r"},{"post_id":"ciyifvja9000am4qf8fw5ro1y","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjb40019m4qf4sqb2ofk"},{"post_id":"ciyifvjap000um4qfbl5ied80","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjb4001cm4qfer586jkq"},{"post_id":"ciyifvjap000xm4qf1b5m0sxf","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjb4001gm4qfr2ke3xmq"},{"post_id":"ciyifvjap0010m4qfbs5oqcnr","category_id":"ciyifvjb40015m4qf6v6prn4j","_id":"ciyifvjb4001jm4qfu71jvp8c"},{"post_id":"ciyifvjb40013m4qf2ud95ovq","category_id":"ciyifvjb4001em4qft06giw70","_id":"ciyifvjb4001qm4qf2ly620f3"},{"post_id":"ciyifvjb4001nm4qf4fxe38ad","category_id":"ciyifvjb40015m4qf6v6prn4j","_id":"ciyifvjbk001vm4qfjhz6ztqo"},{"post_id":"ciyifvjb40017m4qfq5p8wckz","category_id":"ciyifvjb4001lm4qfwfearvmc","_id":"ciyifvjbk001ym4qf2127bln3"},{"post_id":"ciyifvjb4001am4qfi2qz9f11","category_id":"ciyifvjb4001em4qft06giw70","_id":"ciyifvjbk0023m4qfoe8mzti7"},{"post_id":"ciyifvjb4001dm4qfal7kgkte","category_id":"ciyifvjb4001lm4qfwfearvmc","_id":"ciyifvjbk002am4qfcufxhpyp"},{"post_id":"ciyifvjb4001hm4qfl5bmg05h","category_id":"ciyifvjbk0025m4qf74y0n2ti","_id":"ciyifvjbk002im4qfyntvucv0"},{"post_id":"ciyifvjb4001km4qfwbx1gtzy","category_id":"ciyifvjbk0025m4qf74y0n2ti","_id":"ciyifvjbk002pm4qf1666kgll"},{"post_id":"ciyifvjbk002gm4qfopkw0c19","category_id":"ciyifvjb4001lm4qfwfearvmc","_id":"ciyifvjbz002tm4qfozejc2f8"},{"post_id":"ciyifvjb4001pm4qftqnoxden","category_id":"ciyifvjbk002jm4qfzy4o3gdj","_id":"ciyifvjbz002wm4qfyjcqhy7o"},{"post_id":"ciyifvjbz002qm4qfj0wiiti4","category_id":"ciyifvja9000bm4qf3srbmzb5","_id":"ciyifvjbz002zm4qfgyo3tlbl"},{"post_id":"ciyifvjb4001um4qfbq1tqnka","category_id":"ciyifvjbz002rm4qfccxcpavx","_id":"ciyifvjbz0031m4qf9be289ma"},{"post_id":"ciyifvjbk001wm4qfxqo0pzh0","category_id":"ciyifvjbz002xm4qf87zvsq0r","_id":"ciyifvjbz0034m4qf93qcduwp"},{"post_id":"ciyifvjbk0020m4qf9mr42j6e","category_id":"ciyifvjbz0033m4qfj3hvlcjx","_id":"ciyifvjbz0036m4qfpjd267ub"},{"post_id":"ciyifvjbk0022m4qfh51lcf2i","category_id":"ciyifvjbz002xm4qf87zvsq0r","_id":"ciyifvjbz0038m4qf9e9hx20x"},{"post_id":"ciyifvjbk0026m4qf85lfjq7z","category_id":"ciyifvjbz0037m4qf8dpn7sut","_id":"ciyifvjbz003am4qfjev1kg5t"},{"post_id":"ciyifvjbk0029m4qf2qodnm82","category_id":"ciyifvjbz002rm4qfccxcpavx","_id":"ciyifvjbz003cm4qf0h0qqddw"},{"post_id":"ciyifvjbk002dm4qf8harf0ev","category_id":"ciyifvjbz003bm4qfm5h7hdmv","_id":"ciyifvjbz003em4qfcvtvm3ub"},{"post_id":"ciyifvjbk002km4qfh8u70m4f","category_id":"ciyifvjbz0033m4qfj3hvlcjx","_id":"ciyifvjbz003gm4qfh1mfr1em"},{"post_id":"ciyifvjbk002nm4qf4aqkmp20","category_id":"ciyifvjbz002rm4qfccxcpavx","_id":"ciyifvjbz003hm4qf5vvvsrne"}],"PostTag":[{"post_id":"ciyifvj9t0000m4qf0hon7dop","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvja9000cm4qfi74z7tpk"},{"post_id":"ciyifvja9000am4qf8fw5ro1y","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap000em4qf0iev7yz3"},{"post_id":"ciyifvja9000dm4qf5z5zbkpc","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap000jm4qfyw0fp95h"},{"post_id":"ciyifvj9t0002m4qf9mxqhng3","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap000lm4qflrbcimlz"},{"post_id":"ciyifvjap000hm4qfgoefvbb0","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap000pm4qfa4o0bg9z"},{"post_id":"ciyifvjap000km4qf685smrp1","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap000sm4qfzirm7ldh"},{"post_id":"ciyifvja90006m4qfv0hrp2ik","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap000vm4qfgz4m0o00"},{"post_id":"ciyifvjap000nm4qfzavoit5d","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap000ym4qf89ikumk3"},{"post_id":"ciyifvjap000rm4qf5dixenw8","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjap0011m4qfoes6sywa"},{"post_id":"ciyifvjap000um4qfbl5ied80","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb40014m4qf8175c7v0"},{"post_id":"ciyifvjap000xm4qf1b5m0sxf","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb40018m4qfs1tlrojj"},{"post_id":"ciyifvjap0010m4qfbs5oqcnr","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb4001bm4qfg8pefbsg"},{"post_id":"ciyifvjb40013m4qf2ud95ovq","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb4001fm4qf3z5ifm5u"},{"post_id":"ciyifvjb40017m4qfq5p8wckz","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb4001im4qfe1oj421p"},{"post_id":"ciyifvjb4001am4qfi2qz9f11","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb4001mm4qfdsjatov3"},{"post_id":"ciyifvjb4001dm4qfal7kgkte","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb4001om4qfprq5jfw0"},{"post_id":"ciyifvjb4001hm4qfl5bmg05h","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjb4001tm4qfcyz9s6wf"},{"post_id":"ciyifvjbk001wm4qfxqo0pzh0","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjbk0021m4qfcw9bn3rc"},{"post_id":"ciyifvjb4001nm4qf4fxe38ad","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjbk0024m4qfo8ke7rc5"},{"post_id":"ciyifvjb4001nm4qf4fxe38ad","tag_id":"ciyifvjb4001rm4qfht1awdog","_id":"ciyifvjbk0028m4qfstmhder5"},{"post_id":"ciyifvjbk0020m4qf9mr42j6e","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjbk002bm4qfc7okse65"},{"post_id":"ciyifvjbk0022m4qfh51lcf2i","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjbk002fm4qflkx2p7gs"},{"post_id":"ciyifvjb4001pm4qftqnoxden","tag_id":"ciyifvjbk001zm4qf6tqpogug","_id":"ciyifvjbk002hm4qfgjbp3dc5"},{"post_id":"ciyifvjbk002gm4qfopkw0c19","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjbk002lm4qfpm11abhk"},{"post_id":"ciyifvjb4001um4qfbq1tqnka","tag_id":"ciyifvjbk0027m4qfkrzh4xo8","_id":"ciyifvjbk002om4qfq2h42rhc"},{"post_id":"ciyifvjb4001um4qfbq1tqnka","tag_id":"ciyifvjbk002em4qf5puosooj","_id":"ciyifvjbz002sm4qf7lg97zig"},{"post_id":"ciyifvjbk002km4qfh8u70m4f","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjbz002vm4qf6mgnhbx7"},{"post_id":"ciyifvjbz002qm4qfj0wiiti4","tag_id":"ciyifvja90004m4qfmmank0nj","_id":"ciyifvjbz002ym4qfbr5bvj3f"},{"post_id":"ciyifvjbk0026m4qf85lfjq7z","tag_id":"ciyifvjbk002mm4qf8yxcg3xo","_id":"ciyifvjbz0030m4qfwgu8ye5l"},{"post_id":"ciyifvjbk0029m4qf2qodnm82","tag_id":"ciyifvjbz002um4qfnvq3hey6","_id":"ciyifvjbz0032m4qfahmzoe9p"}],"Tag":[{"name":"学习","_id":"ciyifvja90004m4qfmmank0nj"},{"name":"vim","_id":"ciyifvjb4001rm4qfht1awdog"},{"name":"git","_id":"ciyifvjbk001zm4qf6tqpogug"},{"name":"Virtualenv","_id":"ciyifvjbk0027m4qfkrzh4xo8"},{"name":"Python","_id":"ciyifvjbk002em4qf5puosooj"},{"name":"杂谈","_id":"ciyifvjbk002mm4qf8yxcg3xo"},{"name":"WMWare","_id":"ciyifvjbz002um4qfnvq3hey6"}]}}